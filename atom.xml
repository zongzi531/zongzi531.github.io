<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zong</title>
  
  
  <link href="https://zongzi531.com/atom.xml" rel="self"/>
  
  <link href="https://zongzi531.com/"/>
  <updated>2023-01-01T09:31:09.000Z</updated>
  <id>https://zongzi531.com/</id>
  
  <author>
    <name>Zong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>２０２３年おめでとうございます</title>
    <link href="https://zongzi531.com/2023/01/01/%EF%BC%92%EF%BC%90%EF%BC%92%EF%BC%93%E5%B9%B4%E3%81%8A%E3%82%81%E3%81%A7%E3%81%A8%E3%81%86%E3%81%94%E3%81%96%E3%81%84%E3%81%BE%E3%81%99/"/>
    <id>https://zongzi531.com/2023/01/01/%EF%BC%92%EF%BC%90%EF%BC%92%EF%BC%93%E5%B9%B4%E3%81%8A%E3%82%81%E3%81%A7%E3%81%A8%E3%81%86%E3%81%94%E3%81%96%E3%81%84%E3%81%BE%E3%81%99/</id>
    <published>2023-01-01T09:31:09.000Z</published>
    <updated>2023-01-01T09:31:09.000Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><h2 id="想先说的话"><a href="#想先说的话" class="headerlink" title="想先说的话"></a>想先说的话</h2><p>疫情三年，国家保护我们免受新冠病毒的危害。</p><p>12月初，国家开放了，我也很快的感染上了新冠病毒。</p><p>在家和病毒战争的日子可以说是非常煎熬，毫不夸张的说这个病毒很可怕，免疫系统要与这个病毒战争好几个日日夜夜才能获得胜利。</p><p>这不禁让人回想起，三年前的新冠病毒，以及当时的医疗、物资等环境，是多么的困难。</p><p>我们唯有好好的补充、修养我们的身体，才对得起我们自己、我们的家人、我们的国家！</p><p>生命如此脆弱，也是如此渺小，也是如此多姿多彩。</p><p>唯有健康、快乐才能更好的享受生命，尽可能的让生命大放光彩！</p><p>感谢老婆，是老婆一直在我的身边细心照顾我，还有我的家人们、朋友们，在身边鼓励、帮助我！</p><h2 id="简单概要"><a href="#简单概要" class="headerlink" title="简单概要"></a>简单概要</h2><blockquote><p>2022 年，业务支撑（含服务端入门）、低代码领域（协议、引擎、专利、工程化工具、运行时工具）、基础建设、构建性能优化、运行时渲染性能优化、技术分享、学习 Rust。<br>2023 年，深入 Rust、运行时性能优化。</p></blockquote><h2 id="回顾-2022-年"><a href="#回顾-2022-年" class="headerlink" title="回顾 2022 年"></a>回顾 2022 年</h2><ul><li><strong><span class="github-emoji" alias="couplekiss_man_woman" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f469-2764-1f48b-1f468.png?v8">👩️‍❤️‍💋️‍👨</span> 更爱老婆，和她开心幸福在一起</strong></li><li><strong><span class="github-emoji" alias="heartpulse" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f497.png?v8">💗</span> 更爱家人，祝家人身体健康，平平安安</strong></li><li><strong><span class="github-emoji" alias="horse_racing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8">🏇</span> 锻炼身体</strong> <code>适量</code></li><li><strong><span class="github-emoji" alias="notebook_with_decorative_cover" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8">📔</span> 日本語学習文法・語彙</strong> <code>语法及词汇 第1页</code></li><li><strong><span class="github-emoji" alias="books" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">📚</span> 建立自己的知识体系</strong> <code>持续进行</code></li><li><strong>学习 Rust</strong></li><li><strong>初探低代码</strong></li></ul><h2 id="展望-2023-年"><a href="#展望-2023-年" class="headerlink" title="展望 2023 年"></a>展望 2023 年</h2><ul><li><strong><span class="github-emoji" alias="couplekiss_man_woman" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f469-2764-1f48b-1f468.png?v8">👩️‍❤️‍💋️‍👨</span> 更爱老婆，和她开心幸福在一起</strong></li><li><strong><span class="github-emoji" alias="heartpulse" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f497.png?v8">💗</span> 更爱家人，祝家人身体健康，平平安安</strong></li><li><strong><span class="github-emoji" alias="horse_racing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8">🏇</span> 锻炼身体</strong></li><li><strong><span class="github-emoji" alias="notebook_with_decorative_cover" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8">📔</span> 日本語学習文法・語彙</strong></li><li><strong><span class="github-emoji" alias="books" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">📚</span> 建立自己的知识体系</strong></li><li><strong>深入 Rust</strong></li><li><strong>深入低代码</strong></li></ul><h2 id="展开说说"><a href="#展开说说" class="headerlink" title="展开说说"></a>展开说说</h2><p>首先来说一下当初定下的 35 岁第二目标，目前还在探索中……，加油吧！</p><p>再来就是绩效考核从 OKR 变成了 PBC 的形式，怎么说呢，从目前体验 PBC 的感受下来，感觉没有 OKR 那么激励人，可能是因为 OKR 太过于模糊无法定量考核的可能吧。</p><p>学习 Rust 的时候接触到了宏这个词，也借助 Babel 的力量简单实现了一个 demo ，也是一种不错的尝试。现在看来，其实可以使用这种宏的概念在低代码场景中，类似于 Excel 中的「函数」，可以由我们来定义一套简易的写法来帮助用户来完成程序开发，最终在编译阶段还原即可。</p><p>性能优化的尝试，我更倾向于在浏览器运行时的实践，这两年的性能优化思路大多都是借鉴 React 的核心思想以及一些著名的设计模式，我想换个接入点，一是寻找到很合适有机会的地方，二是使用 WASM 技术来完成这些，不仅可以加深我在浏览器运行时上优化的经验，还可以加深我在 Rust 实践上的技巧，这也是我后面想去做的事情。</p><p>发现人年纪上来之后，会多去想一些有关人活着的意义之类的话题，其实和年纪上来也没什么关系，无非是想让自己活的明白、通透一些罢了。这些，可能才是最有必要想清楚和做的事情了。</p><p>对了，因为 12 月在家与新冠病毒战争的事情，我更加明确了远程办公的重要性！当然了，战争期间，我的领导、单位都很照顾我，我也很感动，我也会为团队，公司好好出一份我的力量！</p><p>再来说说我的劣势吧，缺乏产品思维和商业思维。准确的说是没有完整的产品经历（ 0-1 ）和商业的洞察能力，不过现在接触的低代码领域可以说是从 0 开始的。</p><p>这些是我需要补充的，在具备技术和视野的条件下，我才能从更高的角度来思考问题。</p><p>技术好比是深度，不单单指开发侧的技术，也可以是产品设计、流程把控、人才管理储备等角度来谈。</p><p>视野好比广度，指产品价值、商业价值或是产品方向等角度来谈。</p><p>总之，还是比较虚幻的一个概念，但是我认为这是我往上提升所需要具备的能力。</p><p>我希望我可以在低代码领域深耕，摸透，领悟出新的内容，来创新未来。</p>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>《初探 Rust》</title>
    <link href="https://zongzi531.com/2022/12/21/%E5%88%9D%E6%8E%A2rust%E5%88%86%E4%BA%AB/"/>
    <id>https://zongzi531.com/2022/12/21/%E5%88%9D%E6%8E%A2rust%E5%88%86%E4%BA%AB/</id>
    <published>2022-12-21T08:55:08.000Z</published>
    <updated>2022-12-21T08:55:08.000Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><p>欠了好久的分享，本来想为大家分享 Rust 的一些基础，但是明显 Rust 的基础太多了，没法在一次分享里说完整，也不如文档来的全面，所以就简单的挑选几个小点来说一说。</p><p>以及如何使用 <code>cargo</code> 来初始化一个 Rust 项目，本来还想简单的聊一聊如何制作一个 WASM 包，但是考虑到知识点断层的问题，想想还是算了吧（反正我也是摘录网上的内容）。</p><p>总之，这次分享的目的是为了让你能够粗略简单的认识到 Rust 的 1% ，希望吧。</p><p>希望你可以提起兴趣学习剩下的 99% 的内容（当然不是通过我，而是我们一起）。</p><p>要说为什么要学习 Rust ，原因也比较简单，从工程师的角度，不应该只掌握一种语言，至少需要再掌握一门辅助，当然不一定要是 Rust ，也可以是 Go 或者 C++ 。</p><p>再来就是快吧，你要说 Rust 一定快吗？也不全是，但是在大部分场景下是快的。</p><p>当然也是“安全”的，所谓的安全其实也是相对的，就像冰山一样，你看的到的就是安全，看不到的只能自己去摸索了，就像你深入 Rust 一样，你会发现她很危险。</p><p>最后就是卷呗，这可是前端圈的名词，哈哈。</p><p>那我们简单认识一下 Rust 吧～</p><blockquote><p>以下内容基本参考<a href="https://course.rs/">《Rust语言圣经》</a></p></blockquote><h2 id="字符类型-char"><a href="#字符类型-char" class="headerlink" title="字符类型(char)"></a>字符类型(char)</h2><p><img src="/2022/12/21/%E5%88%9D%E6%8E%A2rust%E5%88%86%E4%BA%AB/003.jpeg"></p><p>单引号表示的是字符类型，这和 <code>String</code> 类型有着区别，表示单个字符则使用单引号。</p><h2 id="布尔-bool"><a href="#布尔-bool" class="headerlink" title="布尔(bool)"></a>布尔(bool)</h2><p><img src="/2022/12/21/%E5%88%9D%E6%8E%A2rust%E5%88%86%E4%BA%AB/004.jpeg"></p><p>布尔类型则是 <code>bool</code> ，并且可以显式的声明。</p><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><p><img src="/2022/12/21/%E5%88%9D%E6%8E%A2rust%E5%88%86%E4%BA%AB/005.jpeg"></p><p>整数类型和进制。</p><p><img src="/2022/12/21/%E5%88%9D%E6%8E%A2rust%E5%88%86%E4%BA%AB/006.jpeg"></p><p>浮点类型。</p><p>接下来试着创建自己的 World Hello 吧～</p><p>如何在电脑上安装 Rust 这里就不再赘述了，可以参考文档进行安装。</p><p><img src="/2022/12/21/%E5%88%9D%E6%8E%A2rust%E5%88%86%E4%BA%AB/008.jpeg"></p><p>我们执行 <code>cargo</code> 命令来初始化一个项目，类似于 <code>vue create world_hello</code> 或是 <code>create-react-app world_hello</code> 。</p><p><img src="/2022/12/21/%E5%88%9D%E6%8E%A2rust%E5%88%86%E4%BA%AB/009.jpeg"></p><p><code>Cargo.toml</code> 属于项目的信息文件，等同于 <code>package.json</code> 的作用，在安装过依赖后，也会生成一个 <code>Cargo.lock</code> 文件。</p><p><img src="/2022/12/21/%E5%88%9D%E6%8E%A2rust%E5%88%86%E4%BA%AB/010.jpeg"></p><p><code>run</code> 命令则是代表编译和运行。</p><p><img src="/2022/12/21/%E5%88%9D%E6%8E%A2rust%E5%88%86%E4%BA%AB/011.jpeg"></p><p><code>build</code> 命令则是代表编译，然后通过找到编译结果（可执行文件）来运行。</p><p><img src="/2022/12/21/%E5%88%9D%E6%8E%A2rust%E5%88%86%E4%BA%AB/012.jpeg"></p><p>让我们来简单修改一下 <code>main.rs</code> 文件吧。</p><p><img src="/2022/12/21/%E5%88%9D%E6%8E%A2rust%E5%88%86%E4%BA%AB/013.jpeg"></p><p>试着重新编译运行一下吧。</p><p>OK，那就简单的介绍了 Rust 的 1% ，一起加油吧～</p>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Share" scheme="https://zongzi531.com/categories/Share/"/>
    
    
    <category term="Rust" scheme="https://zongzi531.com/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>和躺平说达咩</title>
    <link href="https://zongzi531.com/2022/12/01/%E5%92%8C%E8%BA%BA%E5%B9%B3%E8%AF%B4%E8%BE%BE%E5%92%A9/"/>
    <id>https://zongzi531.com/2022/12/01/%E5%92%8C%E8%BA%BA%E5%B9%B3%E8%AF%B4%E8%BE%BE%E5%92%A9/</id>
    <published>2022-12-01T09:25:17.000Z</published>
    <updated>2022-12-01T09:25:17.000Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><p>总是会感慨到，时间过的好快啊。</p><p>其实并不是，时间从来的都是一秒一秒的过，而度过一年后，在大脑中只有记忆的片段，拼凑在一起的时间很短暂，让你觉得时间过的好快啊。</p><h2 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h2><ul><li><em><strong>「日本語学習計画」</strong>：语法及词汇 <strong>第1页</strong></em></li><li><em><strong>「计算机图形学」</strong>：材质与外观</em></li><li><strong>「锻炼身体」</strong>：步行、上楼梯、Just Dance、健身环、刘畊宏直播 <strong>待加强</strong></li><li><em><strong>「ECMA-262」</strong>：6.2.4 The Reference Specification Type</em></li><li><strong>「Rust语言圣经(Rust教程 Rust Course)」</strong>：11.5.1. 数据布局和基本操作</li><li><strong>「Rust By Practice( Rust 练习实践 )」</strong>：17.3. 深入生命周期</li><li><strong>「The <code>wasm-bindgen</code> Guide」</strong>：1.10. web-sys: Closures</li><li><strong>「Rust 秘典（死灵书）」</strong>：3.1. 引用</li></ul><p>回顾前几个月或是前半年或者这一年，本质上自己学习了 Rust ，但是停滞了日语的学习，业余时间基本都在认真生活。</p><p>也不能算是没有收获吧，可以说是生活、工作平衡～ 均衡持续的发展才会健康～</p><p>比较遗憾的是，下半年投身于低代码建设，并没有太多时间研究性能问题，也将 Rust 的应用抛之脑后，准确的来说是没有找到很好的切入点。</p><p>计划 12 月为同事们做一次 Rust 入门的技术分享，希望可以拉起同事们对 Rust 的兴趣，可以形成一个小范围的学习群体，这样应该会更好的找到切入点吧。</p><p>马上也要进行年终总结，按照惯例进行回顾和展望。</p><p>也不难发现随着年纪的增长，记忆力和学习能力也在持续的进行弱化（在给自己的躺平找说辞）。当然，我还是会尽力而为！</p><p>职业定位也出现了微弱的转折，我自然是希望按照我理想状态进行发展，从原本只需要聚焦开发工作外进行了微弱的转变，我始终主张「专业技术经验不足不能轻易尝试管理岗位」这一观点。</p><p>目前除了聚焦开发外，会有机会从软件全局思考一些问题，并参与整体架构设计、里程碑设计等，从更高的角度来看问题。</p><p>这是我需要锻炼的内容。加上技术积累，这样才会让我在未来能够走的更远。</p><p>当然会有更多机会接触到管理大佬，看那些管理方法论，看就好了。</p><p>从自身发展来说，我不希望自己局限于前端，而是要从软件工程师或是工程师的角度来思考问题，把问题边界考虑的更广，想的更多，美其名曰「架构师」。</p><p>就工作来说是这样，平衡发展的另一边则是生活。</p><p>试着在把生活过的更好、更有意义、更有趣也是我需要学习和探索的。</p><p>感谢我的老婆，让我的生命充满了意义！</p><p>嘿嘿，甜一下～</p>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>svg 文件自动化转组件</title>
    <link href="https://zongzi531.com/2022/11/11/svg%E6%96%87%E4%BB%B6%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BD%AC%E7%BB%84%E4%BB%B6/"/>
    <id>https://zongzi531.com/2022/11/11/svg%E6%96%87%E4%BB%B6%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BD%AC%E7%BB%84%E4%BB%B6/</id>
    <published>2022-11-11T08:52:11.000Z</published>
    <updated>2022-11-11T08:52:11.000Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><p>这是介于之前发布的<a href="https://zongzi531.com/2020/12/16/img%E6%A0%87%E7%AD%BE%E4%BD%BF%E7%94%A8svg%E5%90%8E%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98%E9%A2%9C%E8%89%B2/">《<img> 使用 svg 后如何改变颜色》</a> 的第四种解决方案。</p><p>由于方案三使用的是 CSS 解决，总的来说在部分场景下会不太方便，并且 <code>transform: translate(-1000px);</code> 的值始终不好控制，以至于在某些场景下会导致图片“消失”，就比较诡异。</p><h2 id="方案四"><a href="#方案四" class="headerlink" title="方案四"></a>方案四</h2><p>避免使用 <code>&lt;img&gt;</code> 标签，而是直接使用脚本自动化解析 svg 文件，通过规律生成一个新的 JSX 组件子集，以此来解决问题。</p><p>首先，我们的 svg 文件来自 iconfont ，也以此为例子。</p><p>可以看到 svg 文件格式规律如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" standalone="no"?></span><span class="token doctype">&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200.00px<span class="token punctuation">"</span></span> <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0 0 1024 1024<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.1<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/* svg content */<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由此来扫描 svg 文件夹：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs-extra'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> svgs <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./svgs'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 存放 svg 文件夹</span><span class="token keyword">const</span> files <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>svgs<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// svg 下的 svg 文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么我们现在可以获得到 svg 文件，接下来我们需要设计一下生成的 JSX 组件子集：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">const</span> svgname <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token operator">></span><span class="token comment" spellcheck="true">/* svg content */</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们再来设计一下所需的 svg 组件（以 Vue 为例）：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> as svgMap <span class="token keyword">from</span> <span class="token string">'./svgs'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>      required<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>svg      viewBox<span class="token operator">=</span><span class="token string">"0 0 1024 1024"</span>      version<span class="token operator">=</span><span class="token string">"1.1"</span>      xmlns<span class="token operator">=</span><span class="token string">"http://www.w3.org/2000/svg"</span>    <span class="token operator">></span>      <span class="token punctuation">{</span> svgMap<span class="token punctuation">[</span>props<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>svg<span class="token operator">></span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此，我们的 svg 组件已设计完成，那么我们只需要实现脚本，自动扫描 svg 文件夹即可实现我们的组件。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs-extra'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> svgs <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./svgs'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 存放 svg 文件夹</span><span class="token keyword">const</span> newFilePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./svgs.tsx'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// JSX 组件子集文件位置</span><span class="token keyword">const</span> files <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>svgs<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// svg 下的 svg 文件</span><span class="token keyword">const</span> svgContentReg <span class="token operator">=</span> <span class="token operator">/</span><span class="token operator">&lt;</span><span class="token function">svg</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\s\S<span class="token punctuation">]</span><span class="token operator">*</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span>\s\S<span class="token punctuation">]</span><span class="token operator">*</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>\<span class="token operator">/</span>svg<span class="token operator">></span><span class="token operator">/</span> <span class="token comment" spellcheck="true">// 正则分析 svg 文件内容，可以自行换成其他库，如 magic-string 之类的</span><span class="token keyword">const</span> newFileContent <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// JSX 组件子集内容，如需要避开 eslint ，可设置初始值为 ['</span><span class="token comment" spellcheck="true">/* eslint-disable */</span>'<span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> file <span class="token keyword">of</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>svgs<span class="token punctuation">,</span> <span class="token string">'./'</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 读取 svg 文件内容</span>  <span class="token keyword">const</span> content <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> svgContent <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>svgContentReg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 获取 svg 中 svg 标签内的内容</span>  newFileContent<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`export const </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>file<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/-/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'.svg'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = &lt;></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>svgContent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/>`</span></span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 文件名的解析这边只做了简单处理，可以根据自己的规范调整文件名到命名的转换， 同理 svg 文件内容</span><span class="token punctuation">}</span>fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>newFilePath<span class="token punctuation">,</span> newFileContent<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此，我们可以快乐的执行自动化脚本，无惧 svg 文件的变更，畅快更新 svg 组件资源，也能更好的改变 svg 的颜色咯～</p><p>但是，目前唯一的缺点就是手动执行的自动化脚本，如果有需要可以更抽象化成 webpack vite rollup 插件。</p>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://zongzi531.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://zongzi531.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>【秋】良渚古城遗址公园</title>
    <link href="https://zongzi531.com/2022/11/01/%E7%A7%8B-%E8%89%AF%E6%B8%9A%E5%8F%A4%E5%9F%8E%E9%81%97%E5%9D%80%E5%85%AC%E5%9B%AD/"/>
    <id>https://zongzi531.com/2022/11/01/%E7%A7%8B-%E8%89%AF%E6%B8%9A%E5%8F%A4%E5%9F%8E%E9%81%97%E5%9D%80%E5%85%AC%E5%9B%AD/</id>
    <published>2022-11-01T13:05:21.000Z</published>
    <updated>2022-11-01T13:05:21.000Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><p>10月的周末和好友一起去了良渚古城遗址公园，这应该是第二次去这个公园了。而且回忆起来两次去都是秋天的时候，也不知道为什么，后面或许可以在其他的季节去看看。</p><p>不过现在哪里都是人，这点真的很烦，不喜欢人多的地方。明显感觉到这次去比上一次人多多了，停车场的车也比原来要多了。</p><p>大概是疫情的关系吧，大家都没什么地方可以去……</p><p>只能杭州周边玩玩，露露营什么的，确实蛮无聊的。</p><p>不过上周末，又去了 Live House 。参加万圣节活动，年轻的气氛顿时就上来了， High 的不行。</p><p>总之，很棒～</p><p>10月也因为国庆放假，所以工作日比较短。但是比较难受的是很忙……</p><p>工作内容没啥可说的，就还是继续低代码。</p><p>你要说有新的进展吗？也没有，要说没有吗？也有。</p><p>反正，持续寻找机会～</p><p>在单位中午也不太敢睡觉，因为天气转凉了，办公室的环境吧，容易感冒……</p><p>总之，吃好睡好，身体第一！</p>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>思考忙碌的意义</title>
    <link href="https://zongzi531.com/2022/10/01/%E6%80%9D%E8%80%83%E5%BF%99%E7%A2%8C%E7%9A%84%E6%84%8F%E4%B9%89/"/>
    <id>https://zongzi531.com/2022/10/01/%E6%80%9D%E8%80%83%E5%BF%99%E7%A2%8C%E7%9A%84%E6%84%8F%E4%B9%89/</id>
    <published>2022-10-01T09:57:06.000Z</published>
    <updated>2022-10-01T09:57:06.000Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><p>其实会经常思考，人为什么要让自己忙碌起来，是因为清闲会让人觉得空虚吗？或者说是让人感觉度日如年吗？</p><p>感慨到如今的杭州已经不像小时候的杭州那样，让人觉得舒适，因为发展的很快。</p><p>虽然说城市发展快，我也可以选择继续原来的舒适，但是似乎我的性格不允许我这么做。</p><p>所以没有继续呆在原来的单位里，但是现在的这种忙碌会让我觉得，实在是太忙了。</p><p>让我似乎没有精力去或多或少的关注一些除了工作以外的事情，现在的我。</p><p>除了工作，家人几乎没有其他时间。</p><p>这让我觉得，其实并不是我想要的样子，我当然认为工作是必要的，只是这样的忙碌并不是我想要的样子，我只是想在忙碌和清闲中寻找一个适合自己的平衡点。</p><p>对于现在来说，忙碌和清闲的比例划分的确有点不健康。</p><p>虽然说忙碌并不是总有（似乎我在自我安慰或者是为现在的忙碌找推辞），但是我还是会想把这些平衡起来，我想追寻人活着正真的意义，而不是陷入在忙碌中，让自己的时间过的快一些，从而忘掉人活着的意义。</p><p>所以，“负能量”的内容就暂时提到这里。</p><p>未来，平衡忙碌和清闲也会成为我探索意义的基础，从而让我可以更好的感受到活着的意义。</p><h2 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h2><ul><li><em><strong>「日本語学習計画」</strong>：语法及词汇 <strong>第1页</strong></em></li><li><em><strong>「计算机图形学」</strong>：材质与外观</em></li><li><strong>「锻炼身体」</strong>：步行、上楼梯、Just Dance、健身环 <strong>待加强</strong></li><li><em><strong>「ECMA-262」</strong>：6.2.4 The Reference Specification Type</em></li><li><strong>「Rust语言圣经(Rust教程 Rust Course)」</strong>：11.5.1. 数据布局和基本操作</li><li><strong>「Rust By Practice( Rust 练习实践 )」</strong>：17.3. 深入生命周期</li><li><strong>「The <code>wasm-bindgen</code> Guide」</strong>：1.10. web-sys: Closures</li></ul><p>再来说说任务进度可以说是停着没动了。</p><p>主要是暂时没有什么精力吧，最近。</p><p>最近主要是在忙着做低代码引擎，引擎这块工作基本完工，目前正在准备接入到现有平台。</p><p>另外一件事情就是职级答辩，比较认真的准备了，在准备过程中也正视了自己，回顾了自己。</p><p>也从现有的工作内容分析了未来自己的发展方向，但是现在回过头来看似乎感觉自己想的还是比较片面的，被工作内容所局限了。</p><p>所以自己未来的发展方向，现在看起来的确还是有点模糊。</p><p>深入技术这一点没错，只是怎么深入，从什么方向深入这点其实没有过思考，以及怎么结合自己擅长的领域去做深入，这时候就要问自己，自己擅长什么？</p><p>也通过一些 SWOT 分析出来自己的长处，不过这是真实的分析结果还是表象的分析结果呢，还得我自己再想一想。</p><p>再一个深入业务也没错，工作驱动我去做的内容，没问题。</p><p>只是，最后我需要通过深入业务后沉淀下来一些什么呢？</p><p>其实仔细分析下来，自己没有想清楚的问题还很多，确实有必要认真想一想，才会让自己未来的努力目标更清晰。</p><p>跑出局限，那么就当下的社会环境来说，怎么样给自己留一个备选方案会比较合适呢。</p><p>从「赛道」的角度来讲，是不是应该布局一些其他「赛道」来为自己的未来争取一些机会呢。</p><p>想一想吧～</p><p>为了有能力让我在意义中探索！</p>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>patch-package 遭私有源背刺</title>
    <link href="https://zongzi531.com/2022/09/02/patch-package%E9%81%AD%E7%A7%81%E6%9C%89%E6%BA%90%E8%83%8C%E5%88%BA/"/>
    <id>https://zongzi531.com/2022/09/02/patch-package%E9%81%AD%E7%A7%81%E6%9C%89%E6%BA%90%E8%83%8C%E5%88%BA/</id>
    <published>2022-09-02T15:07:55.000Z</published>
    <updated>2022-09-02T15:07:55.000Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><p>众所周知， <code>patch-package</code> 是一款很不错的打补丁工具包，虽然 <code>pnpm</code> 没法使用。</p><p>由于目前工作环境受限于私有源限制，想给某个包打补丁。</p><p>但是问题就是，因为私有源同步 npm 落后了，导致执行 <code>npx patch-package pkg_example</code> 失败。</p><p>报错提示：</p><pre class="line-numbers language-shell"><code class="language-shell">Error Couldn't find any versions for "..." that matches "^0.0.0"...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>而且看报错提示就是 npm 的执行过程的提示。</p><p>当然了，最简单的办法当然是私有源及时同步 npm 最新的依赖包版本。</p><p>但是，明明我打补丁，我并不关心依赖的关系，我只是想单纯的打补丁，能不能从本地打呢？</p><p>答案是：<strong>能！</strong></p><p>我们来看到源码：</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// https://github.com/ds300/patch-package/blob/master/src/makePatch.ts</span><span class="token comment" spellcheck="true">// 删除部分代码</span><span class="token keyword">import</span> <span class="token punctuation">{</span> dirSync <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"tmp"</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">makePatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 创建临时文件夹</span>  <span class="token keyword">const</span> tmpRepo <span class="token operator">=</span> <span class="token function">dirSync</span><span class="token punctuation">(</span><span class="token punctuation">{</span> unsafeCleanup<span class="token punctuation">:</span> <span class="token keyword">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> tmpRepoPackagePath <span class="token operator">=</span> <span class="token function">join</span><span class="token punctuation">(</span>tmpRepo<span class="token punctuation">.</span>name<span class="token punctuation">,</span> packageDetails<span class="token punctuation">.</span>path<span class="token punctuation">)</span>  <span class="token keyword">const</span> tmpRepoNpmRoot <span class="token operator">=</span> tmpRepoPackagePath<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>    <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token template-string"><span class="token string">`/node_modules/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>packageDetails<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">.</span>length<span class="token punctuation">,</span>  <span class="token punctuation">)</span>  <span class="token keyword">const</span> tmpRepoPackageJsonPath <span class="token operator">=</span> <span class="token function">join</span><span class="token punctuation">(</span>tmpRepoNpmRoot<span class="token punctuation">,</span> <span class="token string">"package.json"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>packageManager <span class="token operator">===</span> <span class="token string">"yarn"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 尝试使用 yarn 安装依赖</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 尝试使用 npm 安装依赖</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么我们就可以从这里展开操作，自己创建一个临时文件夹来代替 <code>tmp</code> 创建的临时文件夹路径，以此为出发点，在临时文件夹内手动安装依赖，并将安装动作取消。</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">const</span> tmpRepo <span class="token operator">=</span> <span class="token function">dirSync</span><span class="token punctuation">(</span><span class="token punctuation">{</span> unsafeCleanup<span class="token punctuation">:</span> <span class="token keyword">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>tmpRepo<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token comment" spellcheck="true">// 你需要的本地文件夹路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在完成这些操作后，我们就可以使用本地资源来打补丁了。</p><p><span class="github-emoji" alias="tada" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8">🎉</span><span class="github-emoji" alias="tada" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8">🎉</span><span class="github-emoji" alias="tada" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8">🎉</span></p>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://zongzi531.com/categories/JavaScript/"/>
    
    
    <category term="patch-package" scheme="https://zongzi531.com/tags/patch-package/"/>
    
    <category term="npm" scheme="https://zongzi531.com/tags/npm/"/>
    
    <category term="registry" scheme="https://zongzi531.com/tags/registry/"/>
    
  </entry>
  
  <entry>
    <title>火焰山 - 杭州</title>
    <link href="https://zongzi531.com/2022/09/01/%E7%81%AB%E7%84%B0%E5%B1%B1-%E6%9D%AD%E5%B7%9E/"/>
    <id>https://zongzi531.com/2022/09/01/%E7%81%AB%E7%84%B0%E5%B1%B1-%E6%9D%AD%E5%B7%9E/</id>
    <published>2022-09-01T13:18:57.000Z</published>
    <updated>2022-09-01T13:18:57.000Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><p>本来想说，八月很热，都是 40 度的高温天气，结果八月底降温了，感觉比去年这个时候还要凉快一些。</p><p>不过还好，赶着八月底去山顶露营玩耍了一下。</p><p>今年夏天这么热，也不知道今年冬天会不会很冷。</p><p>这个月可以说是比较忙碌，都在处理低代码的工作，但是在忙碌之余，通过公司的课程学习了「绩效管理」相关的知识内容。</p><p>同时也在中午的时候学习了部分 <code>wasm-bindgen</code> 的知识，计划着把 Rust 实践起来，在能够较为熟练的掌握 Rust 时，为大家提供一些 Rust 的入门分享。</p><p>也在考虑要不上购买一些有关 Rust 的书籍和产品、商业相关的书籍学习。</p><p>暂时就这么多吧，散会！</p><h2 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h2><ul><li><em><strong>「日本語学習計画」</strong>：语法及词汇 <strong>第1页</strong></em></li><li><em><strong>「计算机图形学」</strong>：材质与外观</em></li><li><strong>「锻炼身体」</strong>：步行、上楼梯、Just Dance、健身环 <strong>待加强</strong></li><li><em><strong>「ECMA-262」</strong>：6.2.4 The Reference Specification Type</em></li><li><strong>「Rust语言圣经(Rust教程 Rust Course)」</strong>：11.5.1. 数据布局和基本操作</li><li><strong>「Rust By Practice( Rust 练习实践 )」</strong>：17.3. 深入生命周期</li><li><strong>「The <code>wasm-bindgen</code> Guide」</strong>：1.10. web-sys: Closures</li></ul><h2 id="生活记忆"><a href="#生活记忆" class="headerlink" title="生活记忆"></a>生活记忆</h2><div style="display: grid; grid-template-columns: 1fr 1fr 1fr; grid-gap: 16px;">  <img src="pic2.jpeg">  <img src="pic3.jpeg">  <div></div></div>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>为什么总是在下班的时候下雷阵雨</title>
    <link href="https://zongzi531.com/2022/08/01/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%80%BB%E6%98%AF%E5%9C%A8%E4%B8%8B%E7%8F%AD%E7%9A%84%E6%97%B6%E5%80%99%E4%B8%8B%E9%9B%B7%E9%98%B5%E9%9B%A8/"/>
    <id>https://zongzi531.com/2022/08/01/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%80%BB%E6%98%AF%E5%9C%A8%E4%B8%8B%E7%8F%AD%E7%9A%84%E6%97%B6%E5%80%99%E4%B8%8B%E9%9B%B7%E9%98%B5%E9%9B%A8/</id>
    <published>2022-08-01T08:53:39.000Z</published>
    <updated>2022-08-01T08:53:39.000Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><p>其实也是这几年慢慢的意识到，为什么杭州夏天的雷阵雨总是在下班的时候开始下，17:30 左右，真是糟糕透了！</p><p>每每到下班，就开始下雨！不开车湿鞋、开车路上堵。</p><p>今天刚好上网搜了一下，砖家说是：热力和动力因素共同导致。</p><p>砖业的我也不太懂，我理解的大致意思就是，下午的时候天气晴朗，地面很多的水气都升上去了，到下班的时间水气厚了就下雨了（可能也不是厚了，反正就是要下雨了），也真是好巧不巧……</p><p>反正就是这样吧……</p><h2 id="加藤-恵（かとう-めぐみ）"><a href="#加藤-恵（かとう-めぐみ）" class="headerlink" title="加藤 恵（かとう めぐみ）"></a>加藤 恵（かとう めぐみ）</h2><p>入手 劇場版「冴えない彼女の育てかた Fine」 加藤恵 メイドVer. 1&#x2F;7スケールフィギュア</p><p><img src="/2022/08/01/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%80%BB%E6%98%AF%E5%9C%A8%E4%B8%8B%E7%8F%AD%E7%9A%84%E6%97%B6%E5%80%99%E4%B8%8B%E9%9B%B7%E9%98%B5%E9%9B%A8/600_11878.jpg" alt="600_11878"></p><h2 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h2><ul><li><em><strong>「日本語学習計画」</strong>：语法及词汇 <strong>第1页</strong></em></li><li><em><strong>「计算机图形学」</strong>：材质与外观</em></li><li><strong>「锻炼身体」</strong>：步行、上楼梯、Just Dance、健身环 <strong>待加强</strong></li><li><em><strong>「ECMA-262」</strong>：6.2.4 The Reference Specification Type</em></li><li><strong>「Rust语言圣经(Rust教程 Rust Course)」</strong>：11.5.1. 数据布局和基本操作</li><li><strong>「Rust By Practice( Rust 练习实践 )」</strong>：12 类型转换</li></ul><p>有关 ECMA-262 的推进，似乎不是现在的重点，侧重发力 Rust 可能会是不错的选择，待第二语言熟悉后再回过头来看 ECMA 可能才是更好的选择，毕竟需要更多的积累才行。</p><p>也很明显的发现，前端这个领域 JavaScript 虽然占据了主导地位，但是很多底层的优化工作还是得放手交由其他更接近底层的语言去实现，比较有说服力的例子就是 swc 在工程化的的性能提升可见是非常明显了。</p><h2 id="低代码建设"><a href="#低代码建设" class="headerlink" title="低代码建设"></a>低代码建设</h2><p>引擎的设计与实现可谓是 Q3 的一部分工作内容，此次引擎开发采用的是文档、设计先行的工作模式。</p><p>在此期间锻炼了我的文档编写能力，虽然以前编写代码前都也会进行设计，但是没有落地到文档的习惯，不会把自己的设计思路落地成通熟易懂的文字的表达方式。</p><p>同事们只有在接触到我的代码才能大致理解是在做什么，但是并不能理解为什么这么做。</p><p>所以呢，此次会让我更好的学习如何简单、通熟易懂的表达，如何在编码前充分的设计可能性，这样不仅在工作交接、功能回顾的时候能够更高效，也能成为部门的知识沉淀（当然不止这些）。</p><p>引擎的设计更加考验的是抽象能力，也在不断的学习和汲取外部的知识，来提升自己的抽象能力，设计出更好更强大更通用的引擎能力。</p><p>想分享但是又不太好说，不过没关系。</p><p>我想着先把内部的文档写好，再来描述今天的这些也不迟。</p><h2 id="关于未来的焦虑"><a href="#关于未来的焦虑" class="headerlink" title="关于未来的焦虑"></a>关于未来的焦虑</h2><p>说是焦虑呢可能夸张了点，也没到焦虑的这个地步。只是说想提前对未来有些规划或者想法吧（虽然现在一点也想不到，只能定一个浅显的目标）。</p><p>期望还是如此，希望自己在 35 岁时有一份轻松的副业，这样能为自己的 35 岁有更多的保障吧，当然没有也没关系，身体健康才是最重要的。</p><p>毕竟人生无常，不过在这个环境下努力一下也是没关系的。</p><p>总之希望，身体健康、开心快乐，足矣！</p>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>微前端下 Webpack Runtime 遇坑记录</title>
    <link href="https://zongzi531.com/2022/07/15/%E5%BE%AE%E5%89%8D%E7%AB%AF%E4%B8%8Bwebpack-runtime%E9%81%87%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://zongzi531.com/2022/07/15/%E5%BE%AE%E5%89%8D%E7%AB%AF%E4%B8%8Bwebpack-runtime%E9%81%87%E5%9D%91%E8%AE%B0%E5%BD%95/</id>
    <published>2022-07-15T09:36:12.000Z</published>
    <updated>2022-07-15T09:36:12.000Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><p>故事发生在微前端的场景下，基于 single-spa 定制，在路由切换进行子应用交替时发生的情况。</p><p>举例说明， 有子应用 A 和子应用 B ， A 使用 Vue3 相关技术栈， B 使用 Vue2 相关技术栈。</p><p>默认情况下，第一次进入 A 或者第一次进入 B ，相应的内容都可以正常的载入，并且不会报错。</p><p>但是如果说是先进入 A ，再进入 B ，或者反之操作，会引起后者无法正常载入，并且可以从控制台查看到报错信息。</p><p>定位到的问题也非常诡异，检查 A 和 B 本身并没有什么问题会造成这样的情况。</p><p>尝试从 Webpack 的编译产物入手排查发现， Webpack Runtime 的代码中，有一个 <code>modules</code> 的对象，用于在加载模块时进行查询使用。</p><p>仔细来回切换发现， A 和 B 的 <code>modules</code> 在第一次进入时都很正常，但是进行切换后会发现 <code>modules</code> 出现了污染。</p><p>简单点来说就是 A 和 B 的 <code>modules</code> 意外的合并了……</p><p>仔细检查 Runtime 代码和翻阅 Webpack 文档发现，是因为 async chunk 引起此问题。</p><p>并且发现 A 和 B 的代码中的 <a href="https://www.webpackjs.com/configuration/output/#output-jsonpfunction"><code>jsonpFunction</code></a> 同名了，所以导致了此问题。</p><blockquote><p>只在 target 是 web 时使用，用于按需加载(load on-demand) chunk 的 JSONP 函数。</p><p>JSONP 函数用于异步加载(async load) chunk，或者拼接多个初始 chunk(CommonsChunkPlugin, AggressiveSplittingPlugin)。</p><p>如果在同一网页中使用了多个（来自不同编译过程(compilation)的）webpack runtime，则需要修改此选项。</p><p>如果使用了 output.library 选项，library 名称时自动追加的。</p></blockquote><p>比较奇怪的是，明明 A 和 B 的构建配置已经设置了独立的 <code>library</code> 选项，但是还是造成了这么多困惑。</p><p>总之，问题得以解决，记录一下。</p>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Webpack" scheme="https://zongzi531.com/categories/Webpack/"/>
    
    
    <category term="webpack" scheme="https://zongzi531.com/tags/webpack/"/>
    
    <category term="micro" scheme="https://zongzi531.com/tags/micro/"/>
    
  </entry>
  
  <entry>
    <title>真的夏天来咯</title>
    <link href="https://zongzi531.com/2022/07/01/%E7%9C%9F%E7%9A%84%E5%A4%8F%E5%A4%A9%E6%9D%A5%E5%92%AF/"/>
    <id>https://zongzi531.com/2022/07/01/%E7%9C%9F%E7%9A%84%E5%A4%8F%E5%A4%A9%E6%9D%A5%E5%92%AF/</id>
    <published>2022-07-01T13:25:37.000Z</published>
    <updated>2022-07-01T13:25:37.000Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><p>本来还说着今年春天加班加的有点久，没想到夏天一转眼就来了，温度一下子也就上去了……</p><p>可以说是非常的炎热，没有空调不行啊！</p><h2 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h2><ul><li><em><strong>「日本語学習計画」</strong>：语法及词汇 <strong>第1页</strong></em></li><li><em><strong>「计算机图形学」</strong>：材质与外观</em></li><li><strong>「锻炼身体」</strong>：步行、上楼梯、Just Dance、健身环 <strong>待加强</strong></li><li><em><strong>「ECMA-262」</strong>：6.2.4 The Reference Specification Type</em></li><li><strong>「Rust语言圣经(Rust教程 Rust Course)」</strong>：11.5.1. 数据布局和基本操作</li><li><strong>「Rust By Practice( Rust 练习实践 )」</strong>：6.1 字符串</li></ul><h2 id="低代码建设"><a href="#低代码建设" class="headerlink" title="低代码建设"></a>低代码建设</h2><p>本月主要负责画布编辑、渲染模块重构工作，并适配到平台以及开发 CLI，提供即插即用能力。</p><p>并且开始布局类似于阿里低代码引起的能力，设计整体引擎架构及软件生态等。</p><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p>本月也主要负责可视化大屏渲染性能优化工作，分析当前可视化大屏在一些配置较差的设备环境下运行，会因一些交互或者大型 3D 组件产生的掉帧、卡顿现象。</p><p>利用将 JS 执行任务进行优先级划分的策略来减轻当用户产生交互或因大型 3D 组件执行 JS 产生的主线程阻塞情况。</p><p>思路大致借鉴 React Fiber 的思路来进行优化，优化效果在 6.1% ～ 36.5% 之间，从结果来看并不是很理想。</p><p>因为很不稳定，并且提升的性能也有限。</p><p>从此布局，需要重新设计组件规范，提供组件侧参与调度任务 API 能力。</p><p>同时对于渲染模块，需要具备运行策略的调度能力来实现稳定的性能优化。</p><p><img src="/2022/07/01/%E7%9C%9F%E7%9A%84%E5%A4%8F%E5%A4%A9%E6%9D%A5%E5%92%AF/pic2.png" alt="性能优化"></p><h2 id="技术分享"><a href="#技术分享" class="headerlink" title="技术分享"></a>技术分享</h2><ul><li><a href="https://github.com/zongzi531/daily-learning/blob/master/share/%E5%BD%93%E5%89%8D%E7%AB%AF%E6%8A%8A%E6%89%8B%E4%BC%B8%E5%90%91%E5%90%8E%E7%AB%AF%EF%BC%8C%E5%81%9A%E8%B5%B7%E5%85%A8%E6%A0%88%E6%97%B6.pdf">《当前端把手伸向后端，做起全栈时》</a></li><li><a href="https://zongzi531.com/2022/06/15/%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84JavaScript%E5%AE%8F/">《实现自己的 JavaScript 宏》</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>借助 Webpack 实现样式手动插入</title>
    <link href="https://zongzi531.com/2022/06/22/%E5%80%9F%E5%8A%A9webpack%E5%AE%9E%E7%8E%B0%E6%A0%B7%E5%BC%8F%E6%89%8B%E5%8A%A8%E6%8F%92%E5%85%A5/"/>
    <id>https://zongzi531.com/2022/06/22/%E5%80%9F%E5%8A%A9webpack%E5%AE%9E%E7%8E%B0%E6%A0%B7%E5%BC%8F%E6%89%8B%E5%8A%A8%E6%8F%92%E5%85%A5/</id>
    <published>2022-06-22T12:30:18.000Z</published>
    <updated>2022-06-22T12:30:18.000Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><p>背景是需要将 <code>import &#39;example.css&#39;</code> 的样式插入到 <code>iframe</code> 下。</p><p>网上有很多方案，但是都不是我想要的解决方法。</p><p>比如获得到样式的内容，然后插入到 <code>iframe</code> 下，但是我希望实现的是类似于 <code>import</code> 的实现方法。</p><p>那么查阅了相关资料发现，<code>style-loader</code> 有一个配置项 <code>injectType: &#39;lazyStyleTag&#39;</code> ，支持后动插入 <code>&lt;style&gt;</code> 标签。</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">'example.css'</span>styles<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>是在调用 <code>use</code> 方法后对应的 <code>&lt;style&gt;</code> 标签才会插入到 <code>document.head</code> 中。由于我们的需求是插入到 <code>iframe</code> 下的 <code>head</code> 中去，所以我们还需要进行少许配置。</p><p>我们需要配置 <code>insert</code> 函数，让 <code>use</code> 方法的调用可以插入到指定的位置。</p><p>但是你会发现 <code>use</code> 方法不接受参数，所以我们需要使用一些手段来实现，当调用 <code>use</code> 方法时，能够顺利插入到指定位置。</p><p>我们需要看到 <code>node_modules/style-loader/dist/index.js</code> 的源码位置，可以看到 <code>use</code> 方法调用时会调用来自 <code>./runtime/injectStylesIntoStyleTag.js</code> 的默认导出函数。并且传入上下文和 <code>options</code> 。</p><p>当然这不是重点，这是入口，持续执行后会看到进入到 <code>insertStyleElement</code> 函数。如果配置 <code>insert</code> 为函数，相当于调用 <code>use</code> 方法时逻辑自行处理。</p><p>回到 <code>index.js</code> 的文件位置，这里很关键的内容出现了，我们可以在 <code>insert</code> 函数定义时通过外部的环境来定义需要将样式插入的具体位置。</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  injectType<span class="token punctuation">:</span> <span class="token string">'lazyStyleTag'</span><span class="token punctuation">,</span>  insert<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>style<span class="token punctuation">:</span> HTMLStyleElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> doc <span class="token operator">=</span> globalThis<span class="token punctuation">.</span>__example__ <span class="token operator">||</span> document    <span class="token keyword">if</span> <span class="token punctuation">(</span>doc<span class="token punctuation">.</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>      doc<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，你仔细观察源码可以发现，其他还可以在 <code>insert</code> 函数中获取到 <code>exported</code> 这个变量，至于是为什么，相信你去看下 <code>index.js</code> 便会明白。</p><p>我们可以按照我们的需求，声明一下 <code>d.ts</code>：</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">'*.css?lazy'</span> <span class="token punctuation">{</span>  <span class="token keyword">interface</span> <span class="token class-name">LazyCSS</span> <span class="token punctuation">{</span>    locals<span class="token punctuation">:</span> Record<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">any</span><span class="token operator">></span>    use<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span>    unuse<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span>    __appendTo__<span class="token operator">?</span><span class="token punctuation">:</span> Document  <span class="token punctuation">}</span>  <span class="token keyword">const</span> lazycss<span class="token punctuation">:</span> LazyCSS  <span class="token keyword">export</span> <span class="token keyword">default</span> lazycss<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们就可以这样使用：</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">'example.css?lazy'</span>styles<span class="token punctuation">.</span>__appendTo__ <span class="token operator">=</span> iframeDocstyles<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当然， <code>insert</code> 函数也需要做稍许调整：</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  injectType<span class="token punctuation">:</span> <span class="token string">'lazyStyleTag'</span><span class="token punctuation">,</span>  insert<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>style<span class="token punctuation">:</span> HTMLStyleElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> doc <span class="token operator">=</span> exported<span class="token punctuation">.</span>__appendTo__ <span class="token operator">||</span> document    <span class="token keyword">if</span> <span class="token punctuation">(</span>doc<span class="token punctuation">.</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>      doc<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里肯定会奇怪，为何后面加了一个参数 <code>?lazy</code> ，是为了区分普通 <code>import</code> 样式和手动插入的参数。</p><p>结合完整的在 webpack-chain 中的配置如下：</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">const</span> insert <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>style<span class="token punctuation">:</span> HTMLStyleElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> doc <span class="token operator">=</span> exported<span class="token punctuation">.</span>__appendTo__ <span class="token operator">||</span> document  <span class="token keyword">if</span> <span class="token punctuation">(</span>doc<span class="token punctuation">.</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    doc<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 可以加入任何你想加入的逻辑</span><span class="token punctuation">}</span>config<span class="token punctuation">.</span><span class="token keyword">module</span><span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">'css'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">oneOf</span><span class="token punctuation">(</span><span class="token string">'lazy-css'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">'normal'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">resourceQuery</span><span class="token punctuation">(</span><span class="token regex">/lazy/</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token regex">/\.css$/</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'style-loader'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">'style-loader'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">{</span> injectType<span class="token punctuation">:</span> <span class="token string">'lazyStyleTag'</span><span class="token punctuation">,</span> insert <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'css-loader'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">'css-loader'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'postcss-loader'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">'postcss-loader'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 同样的，你也可以配置 module.css 也使用手动插入的形式</span><span class="token comment" spellcheck="true">// 记住需要在原有的 loader 校验前加入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里，我们其实已经实现了我们的需求。也算是大功告成！</p><p>不过这里针对 CSS Module 这种形式记得注意 <code>hash</code> 值是否能够保持一致，若你的 npm 包需要提供这类能力，可以将样式在构建产出时将 <code>hash</code> 值编译成一个非 CSS Module 的样式文件，然后进行引入使用即可。</p><p>有关 <code>style-loader</code> 的源码可以<a href="https://github.com/webpack-contrib/style-loader/tree/master/src">点击查看</a>。</p><p>同理，在别的工程化工具下，也可以借助这个思路实现手动插入样式的需求～</p>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="CSS" scheme="https://zongzi531.com/tags/CSS/"/>
    
    <category term="Webpack" scheme="https://zongzi531.com/tags/Webpack/"/>
    
    <category term="Style" scheme="https://zongzi531.com/tags/Style/"/>
    
    <category term="lazy" scheme="https://zongzi531.com/tags/lazy/"/>
    
    <category term="import" scheme="https://zongzi531.com/tags/import/"/>
    
    <category term="iframe" scheme="https://zongzi531.com/tags/iframe/"/>
    
  </entry>
  
  <entry>
    <title>《实现自己的 JavaScript 宏》</title>
    <link href="https://zongzi531.com/2022/06/15/%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84JavaScript%E5%AE%8F/"/>
    <id>https://zongzi531.com/2022/06/15/%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84JavaScript%E5%AE%8F/</id>
    <published>2022-06-15T12:55:30.000Z</published>
    <updated>2022-06-15T12:55:30.000Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><p><strong>宏</strong>（英语：Macro），是一种批量处理的称谓。</p><p>之所以会想做这次分享一是因为想继续多的操作一些 AST 相关的知识，二是也是受到学习 Rust 的影响。</p><h2 id="什么是宏"><a href="#什么是宏" class="headerlink" title="什么是宏"></a>什么是宏</h2><p>我觉得百科中这段解释比较合理：</p><blockquote><p>计算机科学里的宏是一种抽象（Abstraction），它根据一系列预定义的规则替换一定的文本模式。解释器或编译器在遇到宏时会自动进行这一模式替换。对于编译语言，宏展开在编译时发生，进行宏展开的工具常被称为宏展开器。宏这一术语也常常被用于许多类似的环境中，它们是源自宏展开的概念，这包括键盘宏和宏语言。绝大多数情况下，“宏”这个词的使用暗示着将小命令或动作转化为一系列指令。</p><p>宏的用途在于自动化频繁使用的序列或者是获得一种更强大的抽象能力。</p></blockquote><p>当然，更多的解释可以前往百科中学习。</p><h2 id="初识宏"><a href="#初识宏" class="headerlink" title="初识宏"></a>初识宏</h2><p>我最早知道宏的时候是在小学，那时候对宏其实产生了很大的恐惧，那时候流行的是宏病毒，以至于在学习 Office 软件时一直以来不敢接触里面的宏功能。</p><blockquote><p>在计算机技术的历史中，宏病毒（英语：Macro virus）是一种使得应用软件的相关应用文档内含有被称为宏的可执行代码的病毒。一个电子表格程序可能允许用户在一个文档中嵌入“宏命令”，使得某种操作得以自动运行；同样的操作也就可以将病毒嵌入电子表格来对用户的使用造成破坏。</p></blockquote><p>那时候的我，看到这些还是会感到惧怕，担心电脑因此中病毒……当然现在的我也不会去特意接触这些。</p><h2 id="为什么-JavaScript-没有宏编程"><a href="#为什么-JavaScript-没有宏编程" class="headerlink" title="为什么 JavaScript 没有宏编程"></a>为什么 JavaScript 没有宏编程</h2><p>学习 JavaScript 至今，你会发现， JavaScript 没有宏编程的概念，我想其实这与 JavaScript 的运行环境有关系，当然 JavaScript 设计之初就没有设计宏的概念。</p><p>我会认为在 JavaScript 中要想实现类似于宏编程的能力就是函数本身，可以自己实现一个具备抽象的函数处理方法，而宏编程则是向上面百科中提到的内容一样，是一种预定义的规则替换模式。</p><h2 id="如何借助-Babel-实现自己的宏"><a href="#如何借助-Babel-实现自己的宏" class="headerlink" title="如何借助 Babel 实现自己的宏"></a>如何借助 Babel 实现自己的宏</h2><p>本文将不会侧重什么是 AST 、如何编写 AST 等知识，我们可以借助 Babel 提供的宏插件来按照要求实现自己的宏能力。</p><p>我们会以 <a href="https://github.com/kentcdodds/babel-plugin-macros">kentcdodds&#x2F;babel-plugin-macros</a> 提供的教程实现自己的宏。</p><p>我们按照文档要求编写代码如下：</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// index.ts</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createMacro <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'babel-plugin-macros'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createMacro</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> references<span class="token punctuation">,</span> state<span class="token punctuation">,</span> babel <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// do something</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且，我们需要这样去使用：</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// example</span><span class="token keyword">import</span> <span class="token punctuation">{</span> somemacro <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@zong/js.macro'</span>somemacro<span class="token template-string"><span class="token string">`any your want`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于使用 TypeScript 编写，为了提供更好的类型推导，我们需要在 <code>index.ts</code> 定义我们需要被导出的宏方法，并定义对应的逻辑即可。</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// index.ts</span><span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">const</span> define<span class="token punctuation">:</span> <span class="token keyword">Function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>目前，我设计的是想实现一个属于我自己的声明变量的宏。</p><p>我期望实现的宏代码如下：</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span> define <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@zong/js.macro'</span>define<span class="token template-string"><span class="token string">`  @a:1;  @b:2;  @c:'cde';  @d:"def";  @e:true;  @f:false;`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终经过 Babel 编译后的结果是：</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// Compiled</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token string">"cde"</span><span class="token punctuation">;</span><span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token string">"def"</span><span class="token punctuation">;</span><span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span><span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们需要从 <code>references</code> 对象中获取对应的宏名称使用：</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// index.ts</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createMacro <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'babel-plugin-macros'</span><span class="token keyword">import</span> transformDefine <span class="token keyword">from</span> <span class="token string">'./transforms/define'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createMacro</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> references<span class="token punctuation">,</span> state<span class="token punctuation">,</span> babel <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 这里的 define 即我们期望使用的宏名称</span>  <span class="token function">transformDefine</span><span class="token punctuation">(</span>references<span class="token punctuation">.</span>define<span class="token punctuation">,</span> state<span class="token punctuation">,</span> babel<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">const</span> define<span class="token punctuation">:</span> <span class="token keyword">Function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来辛苦由 <code>transformDefine</code> 函数进行 AST 操作获得我们想要的结果。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，我们了解了什么是宏以及 JavaScript 该如何借助 Babel 实现自己的宏。</p><p>其中的折腾劲十足，明明可以通过抽象一个函数得到的结果，我们非要绕这么大一圈。</p><p>也并不是没有收获，我们收获上面的知识，很开心。</p><p>可以查看 <a href="https://www.npmjs.com/package/@zong/js.macro">@zong&#x2F;js.macro</a> 学习 AST 处理操作。</p><p>目前来看，我不仅实现了上面的静态宏使用方法，还实现了：</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span> define <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@zong/js.macro'</span><span class="token keyword">const</span> var1 <span class="token operator">=</span> <span class="token number">2</span>define<span class="token template-string"><span class="token string">`  @va:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;  @vb:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>var1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;`</span></span><span class="token comment" spellcheck="true">// Compiled</span><span class="token keyword">const</span> var1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">const</span> va <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> vb <span class="token operator">=</span> var1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，未来我还考虑加入更多的宏能力来锻炼 AST 处理能力。</p><ol><li>支持 <code>let</code> 声明 (<code>mut@</code>&#x2F;<code>@@</code>) ；</li><li><code>;</code> 结尾为可选项；</li><li>支持没有初始值；</li><li>若没有初始值则必须以 <code>let</code> 进行声明的校验；</li><li>初始值支持变量等其他 JavaScript 使用方式；</li><li>ESLint 插件 —— 上下文声明变量重复检查；</li></ol>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Share" scheme="https://zongzi531.com/categories/Share/"/>
    
    
    <category term="JavaScript" scheme="https://zongzi531.com/tags/JavaScript/"/>
    
    <category term="Babel" scheme="https://zongzi531.com/tags/Babel/"/>
    
    <category term="macro" scheme="https://zongzi531.com/tags/macro/"/>
    
  </entry>
  
  <entry>
    <title>《当前端把手伸向后端，做起全栈时》</title>
    <link href="https://zongzi531.com/2022/06/09/%E5%BD%93%E5%89%8D%E7%AB%AF%E6%8A%8A%E6%89%8B%E4%BC%B8%E5%90%91%E5%90%8E%E7%AB%AF%EF%BC%8C%E5%81%9A%E8%B5%B7%E5%85%A8%E6%A0%88%E6%97%B6/"/>
    <id>https://zongzi531.com/2022/06/09/%E5%BD%93%E5%89%8D%E7%AB%AF%E6%8A%8A%E6%89%8B%E4%BC%B8%E5%90%91%E5%90%8E%E7%AB%AF%EF%BC%8C%E5%81%9A%E8%B5%B7%E5%85%A8%E6%A0%88%E6%97%B6/</id>
    <published>2022-06-09T10:56:20.000Z</published>
    <updated>2022-06-09T10:56:20.000Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><blockquote><p><a href="https://github.com/zongzi531/daily-learning/blob/master/share/%E5%BD%93%E5%89%8D%E7%AB%AF%E6%8A%8A%E6%89%8B%E4%BC%B8%E5%90%91%E5%90%8E%E7%AB%AF%EF%BC%8C%E5%81%9A%E8%B5%B7%E5%85%A8%E6%A0%88%E6%97%B6.pdf">链接</a></p></blockquote><p>本次内容来自内部的一些课题分享，也非技术性的内容，只是浅谈一下作为前端如何“卷”起来罢了。</p><p>首先是我们都从事着前端开发的工作，也会每天和产品、设计、后端、测试、运维等产品生命周期内的成员们打交道。</p><p>那么什么被称作是“全栈”呢？</p><p>从知乎上我看到一句内容我挺赞同的，全栈就是一个通才，能够自己创建不平凡的应用程序。</p><p>很关键，其实会和你看到这次分享时的想法有点不太一样，只是在定义全栈这件事情的角度发生了变化。</p><p>从广义上来说，全栈就是一条龙服务，即用户提出了一个应用程序的需求，全栈能够独自设计并交付这个应用程序来满足用户的需求。</p><p>可以说是包揽了整个应用程序产品的生命周期，样样精通。</p><p>但是我们今天也不会讨论的这么广，那么回到正题。</p><p>从软件开发的角度来说，即前端+后端可以产出一个应用程序，前端也就是我们俗称的切图仔，也就是我；后端是我们俗称的业务仔。</p><p>那么有了如此浅显的认识后，我们该如何从前端出发，把手往后端伸过去，做起一个全栈开发工程师呢？</p><p>其实我们可以慢慢的伸过去，我们来回忆一下。</p><p>我们与后端交互频率最高的操作，那必定是 HTTP 请求，通俗宽泛一些的讲就是 AJAX 。</p><p>在工作多了其实会发现 RESTful 这种架构并没有真正意义上的方便我们的交互，它也有它的问题。</p><p>那么这时候喜欢“卷”的我们就设计了一套中间服务，美其名曰 BFF 。</p><p>其实 BFF 可以算是我们伸向后端的第一步，首先跟我们的后端同学分析现状，业务仔每次因为一个特殊的需求或者场景需要给我们增加一个 API 接口真的很心累，作为业务仔才不想关心这些呢。我们的后端同学表示只想专心于业务，那么我们“卷”的机会就出现了。</p><p>这时候后端同学通常会暴露出一些具备通用性且抽象的 API 接口，至于我们想如何使用，我们则在 BFF 进行自行定义，那么如果遇到上面的问题，我们也不需要苦苦的去求后端同学增加 API 接口，后端同学也可以跟切图仔说拜拜了。</p><p>当然了，BFF 中间的实现过程依然可以是 RESTful to RESTful 的形式，也可以是 GraphQL to RESTful 的形式，前者有后端控制，我们 BFF 只做中间的转换者。</p><p>慢慢的，你会发现后端没有心思来管业务，他们更多的会去关心一些底层的设计和性能问题，那我们就可以既是切图仔又是业务仔了，这时候的后端为我们提供可以是一些由后端给出的操作数据的接口、或者直接操作数据库的权限，那么这时候我们就是名副其实的业务仔了。</p><p>再慢慢的，我们就把手伸到那些底层的设计和性能问题时，后端就不复存在了……（开玩笑的）这是不可能的。</p><p>当然了，对于前端……啊呸！软件开发工程师来说，熟悉并掌握整个软件开发的细节，这时候就是全栈了！</p><p>自身能力也得到了提升，可以说是卷王之王！</p><p>当然了，我觉得接触后端不一定是要做个业务仔的，也可以从应用程序优化的角度着手。</p><p>比如我们前端常说的 SSR ，优化应用程序在客户端的启动时间，也会让你接触到后端的技术。</p><p>优化 DevOps 流程、缩短编译时间等等优化方向都会让你接触到后端技术，只是作为前端，其实身边有很多机会可以把手伸到后端去，所以大胆伸进去试一试吧！</p><p>当然从此发散出去，也可以把手伸向产品设计、视觉交互设计、软件测试、软件运维等各个环节中去……卷他们。</p>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Share" scheme="https://zongzi531.com/categories/Share/"/>
    
    
    <category term="前端" scheme="https://zongzi531.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="后端" scheme="https://zongzi531.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="全栈" scheme="https://zongzi531.com/tags/%E5%85%A8%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>お任せ</title>
    <link href="https://zongzi531.com/2022/06/01/omakase/"/>
    <id>https://zongzi531.com/2022/06/01/omakase/</id>
    <published>2022-06-01T12:57:22.000Z</published>
    <updated>2022-06-01T12:57:22.000Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><blockquote><p>お任せとは、料理人に注文を委託するという日本料理の用語である。</p><p>おまかせスタイルを注文したお客様は、メニューに無いような料理が提供される事を期待して注文を行う。一般的にはアラカルトで注文した料理より値段の高い料理が提供される。</p><p>近年、日本料理の浸透とともに、この用語も浸透した。</p></blockquote><p>这个月是我们的结婚纪念日，同样的在这个月老婆也带我去尝试了お任せ～</p><p>很开心～～嘿嘿</p><h2 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h2><ul><li><em><strong>「日本語学習計画」</strong>：语法及词汇 <strong>第1页</strong></em></li><li><em><strong>「计算机图形学」</strong>：材质与外观</em></li><li><strong>「锻炼身体」</strong>：步行、上楼梯、Just Dance、健身环 <strong>待加强</strong></li><li><em><strong>「ECMA-262」</strong>：6.2.4 The Reference Specification Type</em></li><li><strong>「Rust语言圣经(Rust教程 Rust Course)」</strong>：11.5.1. 数据布局和基本操作</li><li><strong>「Rust By Practice( Rust 练习实践 )」</strong>：4.1 数值类型</li></ul><h2 id="低代码建设"><a href="#低代码建设" class="headerlink" title="低代码建设"></a>低代码建设</h2><p>这个月主要负责画布和一些低代码业务侧的能力建设，画布新增功能可支持渲染父或子内容，因为原子组件的加入和考虑到画布未来能力的扩展，也正在进行画布的重构工作。</p><h2 id="JavaScript-Macro"><a href="#JavaScript-Macro" class="headerlink" title="JavaScript Macro"></a>JavaScript Macro</h2><p>受到 Rust 学习带来的影响，发现 JavaScript 没有宏这个概念，其实从某种角度来说 JavaScript 并不需要宏的存在，因为与其他语言有所区别，浏览器是包含编译和运行的。</p><p>当然了，我们想尝试和不需要并不冲突。</p><p>为了实现这个目标，并且更了解 AST，那么我就想着实现 JavaScript 宏看一看。</p><p>于是乎，我就创建了一个仓库开始折腾 <a href="https://github.com/zongzi531/js.macro">zongzi531&#x2F;js.macro</a> 。</p><blockquote><p>Macro in JavaScript powered by Babel.</p></blockquote><p>基于 Babel 提供的能力，利用操作 AST 来实现自己的 JavaScript 宏吧。</p><p>目前我的设想是可以声明变量，截止到儿童节（可能是我想端午节放假了吧……），只实现了一个很基础的能力。</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> define <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@zong/js.macro'</span>define<span class="token template-string"><span class="token string">`  @a:1;  @b:2;`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我的设计是：</p><ol><li><code>@</code> 等价于 <code>const</code> ；</li><li><code>@</code> 后为需要声明的变量名称；</li><li><code>:</code> 等价于 <code>=</code> ；</li><li><code>:</code> 后为变量的初始值；</li><li><code>;</code> 表示声明完成；</li></ol><p>最后代码经过 Babel 编译后得到的代码内容是：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当然， <code>define</code> 宏目前功能还有很多局限性，我没有进行对应的处理。</p><p>后面计划实现的能力：</p><ol><li>支持 <code>let</code> 声明 (<code>mut@</code>&#x2F;<code>@@</code>) ；</li><li><code>;</code> 结尾为可选项；</li><li>支持没有初始值；</li><li>若没有初始值则必须以 <code>let</code> 进行声明的校验；</li><li>初始值支持变量等其他 JavaScript 使用方式；</li><li>ESLint 插件 —— 上下文声明变量重复检查；</li></ol><p>同时计划输出文章和内部分享。</p><p>马上端午节了，放假咯～跑</p>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>核酸常态化</title>
    <link href="https://zongzi531.com/2022/05/01/%E6%A0%B8%E9%85%B8%E5%B8%B8%E6%80%81%E5%8C%96/"/>
    <id>https://zongzi531.com/2022/05/01/%E6%A0%B8%E9%85%B8%E5%B8%B8%E6%80%81%E5%8C%96/</id>
    <published>2022-05-01T08:38:10.000Z</published>
    <updated>2022-05-01T08:38:10.000Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><p>杭州市政府发布核酸常态化的通知，看出了杭州政府的抗疫决心，我们能做的就是理解和配合，加油杭州！</p><h2 id="PBC"><a href="#PBC" class="headerlink" title="PBC"></a>PBC</h2><p>Q2 开始正式执行 PBC 绩效考核，全称：Personal Business Commitment（个人绩效承诺）。整个 Q2 的工作内容也是围绕着低代码平台迭代、浏览器性能优化等工作进行开展，整个团队也按照一样的目标，分工去一起达成整个团队的 PBC 绩效考核。</p><h2 id="低代码基础建设"><a href="#低代码基础建设" class="headerlink" title="低代码基础建设"></a>低代码基础建设</h2><p>低代码平台也进入正式迭代阶段，除了前端侧业务级别的代码修改，还接触了 Node.js 服务端的业务代码修改。比如学习 <code>typeorm</code>, 编写 migration 文件等业务级别代码。</p><p>同时维护低代码平台配套物料开发 CLI 脚手架，包括能力扩展和缺陷修复。</p><p>以及内部 Webpack 插件能力扩展（布局嵌套功能等）。</p><p>说来说去，其实大部分都是业务级别的工作内容，接触到比较额外的内容就是写 Node.js 在实战中了。</p><h2 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h2><ul><li><em><strong>「日本語学習計画」</strong>：语法及词汇 <strong>第1页</strong></em></li><li><em><strong>「计算机图形学」</strong>：材质与外观</em></li><li><strong>「锻炼身体」</strong>：步行、上楼梯、Just Dance、健身环 <strong>待加强</strong></li><li><em><strong>「ECMA-262」</strong>：6.2.4 The Reference Specification Type</em></li><li><strong>「Rust语言圣经(Rust教程 Rust Course)」</strong>：10. Rust最佳实践</li><li><strong>「Rust By Practice( Rust 练习实践 )」</strong>：4.1 数值类型</li></ul><h2 id="短期规划"><a href="#短期规划" class="headerlink" title="短期规划"></a>短期规划</h2><p>发现内容有点少，那么来水一点短期规划吧。</p><p>从低代码角度，更多的是提升自己对业务的抽象能力，并且把产品落地落下来，是当前首要任务。</p><p>其二是学习 Rust ，其实已经发现学习了 Rust 后对 JavaScript 的看法也有些转变，也印证了我之前对 ECMA 规范的想法，如果想改进 ECMA ，必须从其他语言入手，寻找 JavaScript 缺少的地方等等。学习 Rust 对我自身的能力也是一种提升。</p><p>预计 5月，进入实践阶段。</p><p>5月还计划做的一件事情就是内部技术分享，本来计划着分享一篇《实现自己的 JavaScript 宏》的技术内容，也是受 Rust 的启发，想利用 AST 去实现一些有意思的内容，但是查阅了资料发现，还是需要去学习一些内容，但是我还是想把主题暂定在这个上面去做一些挑战和学习。</p>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>初探 Rust</title>
    <link href="https://zongzi531.com/2022/04/01/%E5%88%9D%E6%8E%A2rust/"/>
    <id>https://zongzi531.com/2022/04/01/%E5%88%9D%E6%8E%A2rust/</id>
    <published>2022-04-01T10:05:50.000Z</published>
    <updated>2022-04-01T10:05:50.000Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><p>羡慕老婆先去三亚旅游～而我还在搬砖…</p><p>Rust 依靠着每天一些碎片时间来学习着，等着把基础知识学完成后，开始实践起来，争取写一些工具出来使用。</p><h2 id="低代码基础建设"><a href="#低代码基础建设" class="headerlink" title="低代码基础建设"></a>低代码基础建设</h2><p><strong>我们团队目前有 HC, 需要招从事低代码基础建设的开发人员…</strong></p><p>这个月主要完成的工作是基于团队内部的低代码协议，打通团队内两款低代码平台和工具的资产，比如组件、配置项等。</p><p>这也是当初编写协议的初衷，为了在早期建立起低代码相关的规范。实现自己的低代码引擎！</p><p>提供了一个运行时适配器工具，能够实现类似于微前端形式的不同 UI 框架的渲染 SDK ，同时为内部两款低代码平台和工具提供了 <code>preset</code> 适配。</p><p>再一个就是既然有运行时，那么就必然存在编译时的工具，当然了，编译适配器这么叫肯定不合理，那么我也找了开源社区中并没有像我们这样的可怕需求，就是使用 Vue3 开发，还得兼容 IE 11 。</p><p>对于这个需求来说，我基于 <code>unplugin</code> 实现了一款编译插件，可以将 Vue3 的 SFC 或者 TSX 文件编译成 Vue2 的编译结果，可以使用在 Vue2 环境下的降级兼容。参考了 <code>vue-loader</code> 、 <code>@vue/compiler-sfc</code> 、 <code>vue-template-compiler</code> 、 <code>vue-template-es2015-compiler</code> 、 <code>@vue/babel-preset-app</code> 等工具来实现。截止当前插件已实现基础的降级兼容能力，还有不少边界问题没有处理。</p><p>以 SFC 为例，对其内容进行解析，解析结果主要产出 <code>template</code> 、 <code>script</code> 、 <code>styles</code> 。</p><p><code>template</code> 会带有 <code>with(this) &#123; ...</code> 将其包装后编译成 <code>es2015</code> 后使用， <code>script</code> 则解析语言类型，若是 Typescript 则进入 Babel 处理后更新， <code>styles</code> 则会遍历处理，当然若语言是 <code>postcss</code> 则进行再处理，等等其他补丁操作。</p><p>最后生成 Vue2 编译结果以达成降级兼容。</p><p>那么今年也将主要发力低代码基础建设了，加油！</p><h2 id="绩效"><a href="#绩效" class="headerlink" title="绩效"></a>绩效</h2><p>绩效的调整，对未来的工作来说，即是机遇也是挑战。可以接触到更多的管理模式，对自己来说也是增加压力，达成目标，同样加油！</p><h2 id="开源贡献"><a href="#开源贡献" class="headerlink" title="开源贡献"></a>开源贡献</h2><p>这方面这个月主要集中在 Rust 书籍上的一些修正，既然认真阅读了，那也顺手帮忙修正了一些问题。</p><h2 id="内部建设"><a href="#内部建设" class="headerlink" title="内部建设"></a>内部建设</h2><p>其实非常喜欢开源这套协同工作流程，异步的方式去完成各自的目标。也是参考开源的这套协同流程，现在在内部的 Issues 和 PR 上面也有了不错的的进展。在内部 Wiki 上规范了开设 Issues 和 PR 的模板和要求，大家也能按照要求在上面反映和修复问题。内部组件库也进入了一个更好的迭代更新模式～</p><h2 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h2><ul><li><strong>「日本語学習計画」</strong>：语法及词汇 <strong>第1页</strong></li><li><strong>「计算机图形学」</strong>：材质与外观</li><li><strong>「锻炼身体」</strong>：步行、上楼梯、Just Dance、健身环 <strong>待加强</strong></li><li><strong>「ECMA-262」</strong>：6.2.4 The Reference Specification Type</li><li><strong>「Rust语言圣经(Rust教程 Rust Course)」</strong>：6.3.5 工作空间 Workspace (跳过 4 Rust 异步编程)</li></ul>]]></content>
    
    
    <summary type="html">羡慕老婆先去三亚旅游～而我还在搬砖...</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>想旅游</title>
    <link href="https://zongzi531.com/2022/03/01/%E6%83%B3%E6%97%85%E6%B8%B8/"/>
    <id>https://zongzi531.com/2022/03/01/%E6%83%B3%E6%97%85%E6%B8%B8/</id>
    <published>2022-03-01T10:05:13.000Z</published>
    <updated>2022-03-01T10:05:13.000Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><p>冬天渐渐过去了，天气渐渐的要暖和起来了，想计划着带老婆去三亚度个假，挑选一个天气晴朗的好日子出游。</p><p>春节过完年回来后，主要负责组织内低代码项目的基础协议编写，参考阿里提供的两份协议《阿里巴巴中后台前端物料规范》和《阿里巴巴中后台前端搭建协议规范》，并集合组织内两个低代码项目的架构，重新整理并编写两份贴合组织现有低代码项目的协议内容，以整合两个项目的基础架构和物料资源。</p><p>再一个就是在完成两份协议后，进行基础架构的设计和开发，正在进行中……</p><p>回到自身，在春节放假前其实已经想明白，要学习 Rust ，那么回来也没闲着，利用休息时间学习 Rust 知识，待学习完成后进入实践状态。</p><p>开源社区方面，这个月对多处 Rust 教程书写错误进行了修正，以及对 Element Plus 进行了一次类型修复。</p><p>要说能写在这里的内容，似乎还不如直接去看 Rust 教程或者我的 Github 主页。</p><p>其余的话就是对组织内的基础建设支持了。</p><h2 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h2><ul><li><strong>「日本語学習計画」</strong>：语法及词汇 <strong>第1页</strong></li><li><strong>「计算机图形学」</strong>：材质与外观</li><li><strong>「锻炼身体」</strong>：步行、上楼梯、Just Dance、健身环 <strong>待加强</strong></li><li><strong>「ECMA-262」</strong>：6.2.4 The Reference Specification Type</li><li><strong>「Rust语言圣经(Rust教程 Rust Course)」</strong>：3.2.1 闭包 Closure</li></ul><p>回到家其实一直有想学习日语的想法，但是白天消耗的精力实在太多了，还是看情况而定吧……当然了，要学的东西一样也不会少，加油吧。</p><p>话说回来，最近我的厨艺确实有了点提升，老婆经常夸我烧的菜好吃～因为上班的关系，老婆总会说“好想吃你做的菜”，嘿嘿～</p>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>虎虎生威</title>
    <link href="https://zongzi531.com/2022/02/01/%E8%99%8E%E8%99%8E%E7%94%9F%E5%A8%81/"/>
    <id>https://zongzi531.com/2022/02/01/%E8%99%8E%E8%99%8E%E7%94%9F%E5%A8%81/</id>
    <published>2022-02-01T17:01:10.000Z</published>
    <updated>2022-02-01T17:01:10.000Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><p>春节快乐！～</p><p>其实这一年下来发现，自己仍然在开发这个环境中打转，但是也很明显的发现自己的侧重方向发生了转变，首当其冲的是加强了自己对 TypeScript 的使用能力，通过对 TypeScript 的进阶挑战做题和帮助同事解决使用过程中遇到的高阶类型推导问题来提升这方面的能力，截止今年年初，部门内部 TypeScript 的使用率较去年有大幅度提升，从去年的 20% 的使用率到今年年初的近 80% 使用率，可以说同事们对 TypeScript 的接纳程度也越来越好了。</p><p>其次就是自己这一年在编译方面也有了更多的关注和实践，真实的接触了 AST 的部分结构，开发编译插件来提升同事们的开发体验和提供友好的同构产物，使用 AST 来处理补充代码、替换或移除代码、清除注释块中的代码等等场景……在有过这些铺垫后，当下，我会有想学习 Rust 的冲动。<a href="https://course.rs/">《Rust语言圣经(Rust教程 Rust Course)》</a>，这可能是我会学习的下一门编程语言（本来想说第二门的，但是我接触过的语言也有好几门，虽然用不到）。</p><p>业务交付的话就是基本的需求排期、功能开发、缺陷修复、功能自测工作了。</p><p>当然了，去年年中时候定下的中期目标仍然会一直伴随我</p><ul><li>35 岁前，有一份轻松快乐的副业</li><li>35 岁，打稳主业基础，尝试更多突破</li></ul><p>话说回来，春节前进行了几次 2022 年工作方向的汇报和讨论，对产品商业价值这一问题形成了一个很简单的认识，但是对如何寻找产品的切入点、寻找商业价值这一系列问题上，暂时还是无从下手，这也是我缺乏的能力，或许具备了某些方法论和商业眼光的话，或许就会出现好的机会。</p><h1 id="基础建设"><a href="#基础建设" class="headerlink" title="基础建设"></a>基础建设</h1><p>首先是微前端的支持工作，包含提供技术架构、技术支持、新特性支持和缺陷修复工作。在同事开发过程中不免会遇到一些写法造成当初架构未考虑到的情况，那么解决业务问题当然是第一位的，发布新特性支持和缺陷修复就成为了微前端架构的迭代路径。也同时在今年年中，依靠此技术架构构建的项目体积增长到了 100 多兆，并且自动化的时间也变得缓慢，解决此问题也刻不容缓，经过一些解决思路的整理，最终提升自动化时间和缩小项目的大小，性能提升近70% 。</p><p>差点忘了提，自动化的环节使用了动态构建平台，可以任意撮合各项目之间的子应用关系，组成一个新应用来复用开发。</p><p>再来就是基于 Vue3 的内部组件库开发工作，结合设计部门一起打造新的内部组件库，带着新的设计风格进入 beta 版本。</p><p>这一年，内部标准代码风格也进行了迭代，根据会议内容进行了相应的调整。</p><p>再一个就是低代码建设，也是今年的主要工作内容，工作相关的关键点在之前的博客中有提到，这里就不再提了。</p><h1 id="技术分享"><a href="#技术分享" class="headerlink" title="技术分享"></a>技术分享</h1><ul><li>《追求优雅的代码2》</li><li>《进阶 TypeScript 之初见泛型》</li><li>《现代 Web 应用的资源及网络优化分享》</li></ul><h1 id="开源贡献"><a href="#开源贡献" class="headerlink" title="开源贡献"></a>开源贡献</h1><ul><li><a href="https://github.com/element-plus/element-plus">element-plus</a> <a href="https://github.com/element-plus/element-plus/pull/1953">#1953</a> <a href="https://github.com/element-plus/element-plus/pull/1963">#1963</a> <a href="https://github.com/element-plus/element-plus/pull/1975">#1975</a> <a href="https://github.com/element-plus/element-plus/pull/2050">#2050</a></li><li><a href="https://github.com/element-plus/vite-plugin-element-plus">vite-plugin-element-plus</a> <a href="https://github.com/element-plus/vite-plugin-element-plus/pull/2">#2</a> <a href="https://github.com/element-plus/vite-plugin-element-plus/pull/5">#5</a></li><li><a href="https://github.com/type-challenges/type-challenges">type-challenges</a> <a href="https://github.com/type-challenges/type-challenges/pull/2158">#2158</a></li><li><a href="https://github.com/fczbkk/css-selector-generator">css-selector-generator</a> <a href="https://github.com/fczbkk/css-selector-generator/pull/132">#132</a></li></ul>]]></content>
    
    
    <summary type="html">春节快乐！～</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>２０２２年おめでとうございます</title>
    <link href="https://zongzi531.com/2022/01/01/%EF%BC%92%EF%BC%90%EF%BC%92%EF%BC%92%E5%B9%B4%E3%81%8A%E3%82%81%E3%81%A7%E3%81%A8%E3%81%86%E3%81%94%E3%81%96%E3%81%84%E3%81%BE%E3%81%99/"/>
    <id>https://zongzi531.com/2022/01/01/%EF%BC%92%EF%BC%90%EF%BC%92%EF%BC%92%E5%B9%B4%E3%81%8A%E3%82%81%E3%81%A7%E3%81%A8%E3%81%86%E3%81%94%E3%81%96%E3%81%84%E3%81%BE%E3%81%99/</id>
    <published>2022-01-01T13:13:21.000Z</published>
    <updated>2022-01-01T13:13:21.000Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><blockquote><p>2021 年，负责内部组件库，TypeScript 进阶，工程化实践，接触低代码，核心架构设计，做技术分享等等。<br>2022 年，持续前进，明确目标。</p></blockquote><h2 id="回顾-2021-年"><a href="#回顾-2021-年" class="headerlink" title="回顾 2021 年"></a>回顾 2021 年</h2><ul><li><strong><span class="github-emoji" alias="couplekiss_man_woman" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f469-2764-1f48b-1f468.png?v8">👩️‍❤️‍💋️‍👨</span> 更爱老婆，和她开心幸福在一起</strong></li><li><strong><span class="github-emoji" alias="heartpulse" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f497.png?v8">💗</span> 更爱家人，祝家人身体健康，平平安安</strong></li><li><strong><span class="github-emoji" alias="horse_racing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8">🏇</span> 锻炼身体</strong> <code>微量</code></li><li><strong><span class="github-emoji" alias="notebook_with_decorative_cover" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8">📔</span> 日本語学習文法・語彙</strong> <code>语法及词汇 第1页</code></li><li><strong><span class="github-emoji" alias="books" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">📚</span> 建立自己的前端知识体系</strong> <code>持续进行</code></li><li><strong><span class="github-emoji" alias="hammer_and_wrench" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f6e0.png?v8">🛠</span> 学习前端自动化工程体系</strong> <code>持续进行</code></li><li>阅读 ECMA 标准 <code>6.2.4 The Reference Specification Type</code></li><li>学习 OKR</li></ul><h2 id="展望-2022-年"><a href="#展望-2022-年" class="headerlink" title="展望 2022 年"></a>展望 2022 年</h2><ul><li><strong><span class="github-emoji" alias="couplekiss_man_woman" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f469-2764-1f48b-1f468.png?v8">👩️‍❤️‍💋️‍👨</span> 更爱老婆，和她开心幸福在一起</strong></li><li><strong><span class="github-emoji" alias="heartpulse" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f497.png?v8">💗</span> 更爱家人，祝家人身体健康，平平安安</strong></li><li><strong><span class="github-emoji" alias="horse_racing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8">🏇</span> 锻炼身体</strong></li><li><strong><span class="github-emoji" alias="notebook_with_decorative_cover" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8">📔</span> 日本語学習文法・語彙</strong></li><li><strong><span class="github-emoji" alias="books" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">📚</span> 建立自己知识体系</strong><ul><li>阅读 ECMA 标准</li><li>学习计算机图形学&#x2F;可视化领域</li><li>实践 Three.js</li><li>学习服务端架构</li><li>学习产品思维</li></ul></li></ul><h2 id="持续进行"><a href="#持续进行" class="headerlink" title="持续进行"></a>持续进行</h2><ul><li>关注 ECMA 标准 &#x2F; ECMAScript Next</li><li>关注前端发展趋势</li><li>关注 NPM 社区</li><li>关注 TypeScript</li><li>学习算法</li><li>学习 CSS</li><li>至少 2 场技术分享</li></ul><h2 id="优先级较低的规划"><a href="#优先级较低的规划" class="headerlink" title="优先级较低的规划"></a>优先级较低的规划</h2><ul><li>了解 JavaScript 在不同宿主环境下的表现</li><li>尝试实践渲染性能优化</li><li>尝试 Angular、Ember.js</li><li>尝试 Progressive Web Apps</li><li>尝试 WebAssembly</li><li>学习 Web Accessibility</li></ul><h2 id="📚-建立自己知识体系"><a href="#📚-建立自己知识体系" class="headerlink" title="📚 建立自己知识体系"></a><span class="github-emoji" alias="books" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">📚</span> 建立自己知识体系</h2><p>怎么说呢，今年的学习其实较去年来说，变得缓慢了……</p><p>当然了，形成自己的知识体系必然重要，现在看来其实可以跑出「前端」这个范围，而是从一个更广更大的范围形成自己的知识体系。</p><p>我来一点点说明，从语言这个角度出发，我们需要具备对 ECMA 标准的认识，并且能够在宿主环境中找到可优化的方案，从而在 TC39 发起提案。</p><p>可以说是一条非常牛逼的道路，并且从中还会学习更底层的语言，对 JS 的认识会有大幅度提升，对宿主环境（V8）有着清晰的认识。</p><p>从样式的角度出发，也不乏是一个走的人不太多的道路，通过学习 CSS 规范并加以实践，形成自己对宿主环境表现的认知体系，不断总结，尝试更高阶的使用方式，掌握样式带来的渲染性能优化等等能力。</p><p>从计算机图形学、可视化这类角度出发，掌握图形学基础，也可以在「前端」以外的地方发力，比如做一款游戏是一件很有成就感的事情。</p><p>从服务端的角度则是后端技术，我也不太了解，总之这是一条路。</p><p>从技术架构这个角度出发，需要学会对每一种技术优劣形态的分析，并且能够在当前的场景下选择合适的解决方案，同样具备在未来 5 - 10 年可升级、并且含有兜底的技术方案，这条路需要具备大量的技术能力，当然还需要掌握最前沿的技术，不过各个角度都需要掌握最前沿的技术。</p><p>从项目的角度出发，需要能够负责项目的可行性、推进和落地的能力，同时需要具备能够对项目进行合理排期、风险把控等管理能力。对了，关于项目孵化的这块内容，同时需要具备商业价值的探索、立项、结合 OKR 形成核心目标，从痛点切入等等。</p><p>大概目前能想到的就是这些内容，这些角度可以同时并行，我认为不影响，只要你能力足够强大……</p><p>经过这一年，慢慢回顾其实发现自己做的最多的是关于逻辑相关的工作，会让自己觉得可能是擅长逻辑？缺乏思维创新和审美创新，当然这有可能是没有尝试过另外一块领域导致自己有这样的刻板印象，不过没什么关系，可以尝试学习一些专业的书籍以尝试看看。</p><p>不过还是需要进行大量的体验、学习、比对、总结和积累，才会形成自己的一套体系。</p><p>有一点其实我也慢慢想明白了，我想 Remote 远程办公。</p><p>这就是我这一年对职业的新看法，其实比去年来说，不会再聚焦于「前端」这个词，而是看的更多更广了。</p>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
</feed>
