<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zong</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zongzi531.com/"/>
  <updated>2021-05-26T05:37:48.844Z</updated>
  <id>https://zongzi531.com/</id>
  
  <author>
    <name>Zong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《追求优雅的代码之用设计模式让代码更优雅》</title>
    <link href="https://zongzi531.com/2021/05/25/%E8%BF%BD%E6%B1%82%E4%BC%98%E9%9B%85%E7%9A%84%E4%BB%A3%E7%A0%812/"/>
    <id>https://zongzi531.com/2021/05/25/追求优雅的代码2/</id>
    <published>2021-05-25T09:25:57.000Z</published>
    <updated>2021-05-26T05:37:48.844Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><a id="more"></a><blockquote><p><a href="https://github.com/zongzi531/daily-learning/blob/master/share/%E8%BF%BD%E6%B1%82%E4%BC%98%E9%9B%85%E7%9A%84%E4%BB%A3%E7%A0%812.pdf" target="_blank" rel="noopener">链接</a></p></blockquote><p>大家晚上好，很高兴能够为大家带来这次分享，不好意思鸽了一下，业务太忙了。本次为大家分享的主题是追求优雅的代码之用设计模式让代码更优雅。</p><p>讲到设计模式，大家一定有使用过和了解过，关于什么是设计模式，我总结了一句话：场景下的“最佳”解决方案。这里的最佳我给他划了一个下划线是因为他是在某个场景某个情况（某个时空）下的最佳解决方案，并且这里的最佳也是相对的。</p><p>所以设计模式，他存在的目的也很简单。</p><p>为了复用代码、提升可维护性、提升性能等等…… 总之，就是让你的代码更优雅。</p><p>可以说是无处不在，处处都存在设计模式。那么我找了几个设计模式为切入点，为大家介绍使用设计模式如何让你的代码更优雅。</p><p>观察者模式，浏览器环境的事件监听就使用了这个模式，当然 DOM 事件触发后执行注册过的回调函数，并且实现一对多的通知功能，也体现出观察者模式的优势就是可以在任意代码位置进行订阅或解除订阅。</p><p>比如让我们来看到观察者模式，一般初学者容易忽略的使用技巧导致后期排查问题费了很多时间，其实凡是遇到观察者模式，就一定会有订阅和解除订阅，而初学者特别容易忘记的就是解除订阅而产生重复的通知，从而产生问题。</p><p>原型模式，相信大家都很熟悉，JavaScript 就是基于原型设计的语言。这个例子不是很恰当，也不是很直观，不过没关系，我就是想简单介绍一下这个模式。大家看一下即可，Zong 在实例化以后可以调用原型 Human 的方法。</p><p>再来说到一些原型链的问题，我找了一个比较常见的例子，就是 hasOwnProperty 这个方法，我们看到代码……</p><blockquote><p>这里使用到的 Father 和 Child 命名空间并不恰当，不属于继承关系。</p></blockquote><p>尝试看到这段代码……</p><p>尝试看到这段代码……</p><p>Mixin 模式，我们来看到这段代码，代码中 Class 类沿用原型模式的例子，而 mixin 则是类似“人”的一些通用能力的复用，如 sayHi 和 sleep ，可以用在不同的“人”上。使用 Mixin 可以扩展功能，看到代码第 22 行。我们可以使实例化后的 zong1 获得 sayHi 的功能，当然问题也同样暴露出来了，那就是原有的 sleep 被 Mixin 中的 sleep 覆盖。他对原有的类造成了污染，所以使用 Mixin 模式的时候要格外小心，因为或许你一个人注意也无济于事，当项目经由多人协作时，不熟悉项目获不熟悉 Mixin 的开发者使用或不使用 Mixin 都会产生不小的影响。</p><p>那么如此容易出现问题的 Mixin 模式在目前也有不少的解决方案，如 Vue 采用 Composition API ，React 采用高阶组件（HOC）也就是高阶函数来解决问题，推荐大家在平时开发时采用此类设计模式解决问题。</p><p>水了一会时间，上面我挑选了几个设计模式和大家进行了简单的介绍，其他的设计模式有兴趣的同学可以通过网上查阅和学习，就简单说到这里了。那么接下来，分享一些我自己的经验之谈，当然因为时间紧迫加上平时没有将一些技巧及时总结下来，导致短时间内没回想起多少经验，比如设计模式带来的好处、如何组合设计模式提供特殊场景下的解决方案。</p><p>在日常的 B 端开发过程中，相信大家见的最多的就是 CRUD 基本操作了。也相信大家已经厌倦了 CV 的操作，并且这样做非常的不优雅，所以大家会想办法抽离并抽象这部分 CRUD 的代码，最早接触到的设计模式就是 Mixin 模式，在 React 或 Vue 中都有 Mixin 的使用方法，非常的方便。当然了，前面提到了 Mixin 的缺陷也是必然存在的，说起来也很不好意思，比如我刚入职那会在改公司项目的时候，就是因为不熟悉项目，所以没有充分很好的利用 Mixin ，而全部自己手写了一套 CRUD 代码，当我写完后我才发现居然可以直接使用 Mixin ，讲实话非常的难过。</p><p>当然了，这已经成为历史。现在我们可以拥抱高阶组件、Composition API 来真正的抽象所需要的代码，让我们写的代码变得优雅起来。</p><p>目前 Composition API 基本支持 Vue 2 和 Vue 3 ，建议大家可以尝试使用起来，嘿嘿，安利一波优雅的心态。</p><p>说了这么多，所以类似于高阶函数、组合式API他们只是简单的解决了 CV 问题吗？</p><ol><li>高效开发</li><li>专注调试（当出现程序缺陷时，可以只在关键的代码位置进行调试，这时候就体现出单元测试的重要性了，所以必要的时候还是要写单元测试噢～）</li><li>高安全性（这一点是基于单元测试的，如果说你抽象出来的代码包含了较为完整的测试用例和较高的覆盖率的话，你所抽象的代码将会显得可靠。）</li><li>易用易维护（这一点与前面没有较大的关联，他体现在你抽离的代码自身是否应用了比较好的设计模式，比如使用插件模式设计功能等等……）</li><li>低代码基石（这一点是我认为在近段时间就可以落地的想法，当大家把业务中的逻辑，像是 CRUD 做到合理的抽象、安全性的保障，那么他就是低代码平台的基石，低代码平台或零代码平台就是依托于此，让非专业开发人员完成 CRUD 等业务逻辑的组合。）</li></ol><p>那么这个场景下使用设计模式解决问题，可以带来这些好处。当然在其他场景下也同样的会有另外的好处。</p><p>总之，就和没有绝对的对错一样，没有绝对的优雅，所以坚持你的坚持，定会有所成果。</p><p>其实身边，还有很多可以提升代码优雅，让你的代码变得优雅的地方和机会，有兴趣的同学可以，如果愿意的话，我们可以在日常工作中多多讨论此类问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- no node --&gt;
    
    </summary>
    
    
      <category term="Share" scheme="https://zongzi531.com/categories/Share/"/>
    
    
      <category term="JavaScript" scheme="https://zongzi531.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>The Next Target</title>
    <link href="https://zongzi531.com/2021/05/01/the-next-target/"/>
    <id>https://zongzi531.com/2021/05/01/the-next-target/</id>
    <published>2021-05-01T15:15:37.000Z</published>
    <updated>2021-05-26T05:37:48.732Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><a id="more"></a><blockquote><p>提前完成了 17 年定下的 30 岁目标，也证明了当年离开浙商银行的正确决定。<br>的确，年轻的可能性很大！付出终归会有回报。</p></blockquote><h2 id="新目标"><a href="#新目标" class="headerlink" title="新目标"></a>新目标</h2><ul><li>35 岁前，有一份轻松快乐的副业</li><li>35 岁，打稳主业基础，尝试更多突破</li></ul><h2 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h2><ul><li><strong>「日本語学習計画」</strong>：语法及词汇 <strong>第1页</strong></li><li><strong>「计算机图形学」</strong>：材质与外观</li><li><strong>「锻炼身体」</strong>：简单运动 <strong>待加强</strong></li><li><strong>「ECMA-262」</strong>：5.2.3.4 ReturnIfAbrupt Shorthands</li><li><strong>「内部技术分享」</strong>：计划5月中旬 <strong>主题《追求优雅的代码之用设计模式让代码更优雅》</strong></li></ul><h2 id="TypeScript-进阶"><a href="#TypeScript-进阶" class="headerlink" title="TypeScript 进阶"></a>TypeScript 进阶</h2><p>有关 TypeScript 的面试问题，其实很难提问。因为自己掌握的也只是很浅的知识，为了更深入的理解 TypeScript ，所以我尝试开始做 <code>Type&lt;Challenge[]&gt;</code> 的题目，目前做到 medium 部分，确实在编写泛型层面有了简单的突破，计划将挑战尽快做完，做到更理解 TypeScript 。</p><h2 id="内部组件库阶段性感受"><a href="#内部组件库阶段性感受" class="headerlink" title="内部组件库阶段性感受"></a>内部组件库阶段性感受</h2><p>在使用过 PostCSS 来编写组件库后有个很明显的感受就是，它不像 Sass 这样更具备编程性， PostCSS 更像是 JavaScript 中的 polyfills 的角色，应该说更像是 Babel 的角色。</p><p>所以，从组件库开发的角度来说，PostCSS 和 Sass 更适合组合使用。</p><p>虽然说这次的技术方案只采用了 PostCSS ，并且开发体验并没有如此之好，不过这或许是更了解 PostCSS 的一次尝试，更有可能接触和编写 PostCSS Plugin 的一次机会。</p><p>PS：每天早上看 PR ，效率最高～</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- no node --&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>时光荏苒</title>
    <link href="https://zongzi531.com/2021/04/01/%E6%97%B6%E5%85%89%E8%8D%8F%E8%8B%92/"/>
    <id>https://zongzi531.com/2021/04/01/时光荏苒/</id>
    <published>2021-04-01T09:30:25.000Z</published>
    <updated>2021-05-26T05:37:48.796Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><a id="more"></a><blockquote><p>这么快入职一周年了，其实我更想表达的是时间不够。<br>除了工作、生活、陪伴家人，自己的时间确确实实变少了，或许这就是长大了。<br>应该承担起更多的责任，加油吧～<br>本想说一堆废话，但是被我删掉了，所以加油继续努力即可，向前向上！</p></blockquote><h2 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h2><ul><li><strong>「日本語学習計画」</strong>：语法及词汇 <strong>第1页</strong></li><li><strong>「计算机图形学」</strong>：材质与外观</li><li><strong>「锻炼身体」</strong>：简单运动 <strong>待加强</strong></li><li><strong>「ECMA-262」</strong>：5.1.3 The Numeric String Grammar</li><li><strong>「内部技术分享」</strong>：计划5月中旬</li></ul><h2 id="内部技术贡献"><a href="#内部技术贡献" class="headerlink" title="内部技术贡献"></a>内部技术贡献</h2><ul><li>基于 Vue 3.0 + TypeScript 开发 Vue 组件库/负责相关组件 PR 评审</li><li>微前端动态构建平台</li><li>专利发明</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- no node --&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>新动力</title>
    <link href="https://zongzi531.com/2021/03/01/%E6%96%B0%E5%8A%A8%E5%8A%9B/"/>
    <id>https://zongzi531.com/2021/03/01/新动力/</id>
    <published>2021-03-01T15:51:30.000Z</published>
    <updated>2021-05-26T05:37:48.792Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><a id="more"></a><blockquote><p>讲实话，最近有些焦虑……一直在思考人为什么活着，为 什么活着？<br>这里就不深入了，看看春节月我都做了些什么吧～</p></blockquote><h2 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h2><ul><li><strong>「日本語学習計画」</strong>：语法及词汇 <em>仅学了 <strong>1</strong> 页</em></li><li><strong>「计算机图形学」</strong>：材质与外观 <em>停滞</em></li><li><strong>「锻炼身体」</strong>：简单运动，爬公司楼梯、散步</li></ul><blockquote><p>自己好懒惰啊，动漫疯狂看，游戏疯狂玩。就是没办法坚持上面的事情。愤怒！<br>始终相信万事都不难，贵在坚持，只是我没坚持住……</p></blockquote><h2 id="ECMA-262-进度"><a href="#ECMA-262-进度" class="headerlink" title="ECMA-262 进度"></a>ECMA-262 进度</h2><p>阅读版本：ECMAScript® 2020 language specification, 11th edition (June 2020)</p><p>讲实话，看英文文章大多借助翻译工具加自己的理解，虽然不能很完整的还原细节（大概率会漏）。不过没关系，至少对大致有了认识。</p><p>目前进度：<a href="https://262.ecma-international.org/11.0/#sec-organization-of-this-specification" target="_blank" rel="noopener">4.4 Organization of This Specification</a></p><p>摘抄内容：</p><blockquote><p>The remainder of this specification is organized as follows:<br>Clause 5 defines the notational conventions used throughout the specification.<br>Clauses 6-9 define the execution environment within which ECMAScript programs operate.<br>Clauses 10-16 define the actual ECMAScript programming language including its syntactic encoding and the execution semantics of all language features.<br>Clauses 17-26 define the ECMAScript standard library. They include the definitions of all of the standard objects that are available for use by ECMAScript programs as they execute.<br>Clause 27 describes the memory consistency model of accesses on SharedArrayBuffer-backed memory and methods of the Atomics object.</p></blockquote><p>到目前为止，规范的内容已进行了介绍，后续将是对规范中的细节进行讲解，我们敬请期待吧。</p><h2 id="CSS3-三角函数实现-2-5D-动效实践"><a href="#CSS3-三角函数实现-2-5D-动效实践" class="headerlink" title="CSS3 + 三角函数实现 2.5D 动效实践"></a>CSS3 + 三角函数实现 2.5D 动效实践</h2><p>需求：轮播组件</p><p>需求来的很突然（因为 CSS 这块的薄弱，所以称之为突然），不过我一向不怕这些，我喜欢迎难而上。</p><p>说是一个轮播组件的确没错，但是这个组件是倾斜的（设计图我就不放了，我怕挨打）。</p><p>我尽可能的用文字描述一下，类似<a href="https://element.eleme.cn/#/zh-CN/component/carousel#qia-pian-hua" target="_blank" rel="noopener">Element Carousel 走马灯</a>组件使用卡片化的效果，可透视至后方，椭圆的视觉效果，并且从上 45 度角向下看的视觉效果。</p><p>我还是画个草图吧……</p><p><img src="pic2.png" alt="轮播组件"></p><p>起初我打算使用 <code>transform</code> 的旋转和变换实现透视圆形轮播，在外层使用 <code>perspective</code> 实现视角下沉，但是经过实践我发现这并不可行（或许是我的姿势有问题）。但是就算这个方式实现了，卡片的视角会有问题，因为使用了旋转，所以会有变短的效果。</p><p>后来我发现其实可以只用 <code>transform</code> 来实现，卡片位置使用相对定位控制，那么如何让卡片位置形成这样的椭圆形呢，那就是使用三角函数<a href="https://wuu.wikipedia.org/wiki/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">[维基]</a>！</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/0/0f/Trig_functions_on_descartes.png" alt="三角函数"></p><p>利用公式，计算卡片坐标位置。以及使用一些简单的算法来计算出当前卡片位置的权重，设置 <code>z-index</code> 来实现层次感。</p><p>最后加入动画效果及自动播放旋转功能即大功告成！（其他细节部分我这里就不谈了）</p><p>记录一个坑：在使用类似 <code>Math.sin</code> 时，入参千万记得把角度转成弧度。比如 <code>90 * Math.PI / 180</code> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- no node --&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>牛气冲天</title>
    <link href="https://zongzi531.com/2021/02/01/%E7%89%9B%E6%B0%94%E5%86%B2%E5%A4%A9/"/>
    <id>https://zongzi531.com/2021/02/01/牛气冲天/</id>
    <published>2021-02-01T00:00:00.000Z</published>
    <updated>2021-05-26T05:37:48.820Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><a id="more"></a><blockquote><p>荣获 2020 年度优秀员工</p></blockquote><h2 id="年度总结"><a href="#年度总结" class="headerlink" title="年度总结"></a>年度总结</h2><blockquote><p>入职公司近 1 年时间，真的收获了许多，感谢所有帮助过我的大佬，感谢努力的自己。</p></blockquote><div style="text-align: center;">    <img src="pic2.png" width="50%"></div><h3 id="业务交付"><a href="#业务交付" class="headerlink" title="业务交付"></a>业务交付</h3><p>完成基本的 B 端业务交付工作，包括开发、联调对接、缺陷修复、人员安排、项目管理、技术支持、新人培养。</p><p>在这一年中，新接触了一些关于管理方面的工作，保障业务按时交付的情况下，也带着同事们一起提炼一些经验。</p><p>比如和同事们一起提炼了 TypeScript 实践经验手册，供其他同事学习。</p><p>再者就是下发给同事的抽象能力挑战，提供有效的指导，帮助同事在有限的时间内完成代码抽象及封装。</p><h3 id="技术贡献"><a href="#技术贡献" class="headerlink" title="技术贡献"></a>技术贡献</h3><p>技术贡献一直是我在工作中自产的一些挑战任务，为了让工作更有挑战性。</p><ul><li>来自一些业务交付时所产生的挑战，包括对现有库的缺陷修复、新特性支持、定制特性支持。</li><li>业务交付过程中解耦出的通用型组件库、 SDK 。</li><li>在代码中运用合理的设计模式来抽象代码、优化代码设计，提供更易维护、更易阅读、更易使用的代码模块。</li><li>参与微前端架构设计及调整，涉及开发、构建、 CI/CD （一件很有挑战的事）。</li></ul><h3 id="TypeScript-推进"><a href="#TypeScript-推进" class="headerlink" title="TypeScript 推进"></a>TypeScript 推进</h3><ul><li>推进内部 TypeScript 使用</li><li>总结 TypeScript 实践经验</li></ul><h3 id="标准代码风格"><a href="#标准代码风格" class="headerlink" title="标准代码风格"></a>标准代码风格</h3><p>因为经历了多个业务交付，发现不同业务的代码风格稍有不同，考虑到为了统一风格，则邀请多位同事一同讨论，抽离现有合理规则，定制内部标准。</p><p>从而在年底发布内部标准代码风格，支持 JavaScript / TypeScript / Node / Vue 。</p><p>学习 TC39 工作组记录会议纪要。</p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>单元测试的编写附属于技术贡献时，以保证代码的稳定性。</p><ul><li>内部库的单元测试，保证覆盖率 70%+</li><li>运用设计模式的抽象代码，提供单元测试</li></ul><h3 id="技术分享"><a href="#技术分享" class="headerlink" title="技术分享"></a>技术分享</h3><p>共计 2 场技术分享</p><ol><li><a href="https://github.com/zongzi531/daily-learning/blob/master/share/TypeScript%20%E7%BB%99%E6%88%91%E4%BB%AC%E5%B8%A6%E6%9D%A5%E4%BA%86%E4%BB%80%E4%B9%88.pdf" target="_blank" rel="noopener">《TypeScript 给我们带来了什么》</a></li><li><a href="https://github.com/zongzi531/daily-learning/blob/master/share/%E8%BF%BD%E6%B1%82%E4%BC%98%E9%9B%85%E7%9A%84%E4%BB%A3%E7%A0%81.pdf" target="_blank" rel="noopener">《追求优雅的代码》</a></li></ol><h3 id="人才招聘"><a href="#人才招聘" class="headerlink" title="人才招聘"></a>人才招聘</h3><p>负责部门实习生、社招岗位一二面。（面试 20 人左右，入围 5 人左右，具体记不清了，不重要）</p><p>在面试过程中，我也在学习，从候选人的身上寻找自己的不足。</p><p>比如在面试 CSS 方面，因为我 CSS 方面并不是特别的擅长，所以会需要资料和同事的协助。</p><p>我也明白了，我需要如何系统的学习 CSS ，才能凸显我掌握了 CSS 。</p><p>所以当在面试 CSS 相关的知识时，可以从各个 CSS Level 级别去阐述 CSS 特性。（这点很重要）</p><p>当然，另外的就是前端的基础掌握程度。（这点也很重要）</p><p>虽然面试很吃时间，但是或多或少是可以学习到不少东西的，要保持这种心态。</p><h3 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h3><p>这一年，很不错！</p><p>比较遗憾的是，没有足够的时间去尝试：</p><ul><li>可视化</li><li>工程化</li><li>服务端</li></ul><p>对于未来的工作规划似乎又有了一些新的想法：</p><ul><li>继续拓展软件开发领域知识广度</li><li>尝试可能性</li><li>现在选择一条路走到底还早</li></ul><h2 id="工程化探索"><a href="#工程化探索" class="headerlink" title="工程化探索"></a>工程化探索</h2><p>恭喜同桌大佬进入蚂蚁金服，向大佬学习的心日益强烈！</p><p>春节前除了保证业务的正常交付，开始交接工程化相关的项目，慢慢开始介入 CI/CD 相关工作。</p><p>其实发现关于前端工程化 + CI 形成前端自动工程化与 CD 组合是一件很富有挑战性的工作。</p><p>光前端工程化就有很多库、知识可以学习，非常的兴奋。</p><p>CI/CD 则会与服务端的同学进行配合，同时又可以学习到服务端的相关知识，慢慢的对服务端也有更多的了解和认识。</p><p>在维护 Webpack 插件时，利用 <a href="https://github.com/zahorovskyi/webpack-dynamic-public-path" target="_blank" rel="noopener">Dynamic Public Path Plugin</a> 的思路解决现有 <code>publicPath</code> 存在的问题。</p><p>因为是一个微前端架构的 SPA 工程打包为多页面的工程思路，配合后端路由寻址，所以 <code>publicPath</code> 需要为动态，刚好这个开源的插件给我了灵感：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">WebpackDynamicPublicPath</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     *     * @param {Object} options     * @param {string} options.externalPublicPath - variable with new publicPath     * @param {Array&lt;string>} [options.chunkNames] - list of chuck names in which publicPath will be replaced,     * in case if parameter is not defined publicPath will be replaced for all chunks     */</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>afterPlugins <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>afterPlugins<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>emit <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>emit<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>afterPlugins<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'WebpackDynamicPublicPath'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>afterPlugins<span class="token punctuation">)</span><span class="token punctuation">;</span>        compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>emit<span class="token punctuation">.</span><span class="token function">tapPromise</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'WebpackDynamicPublicPath'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>emit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">afterPlugins</span><span class="token punctuation">(</span>compilation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> compilation<span class="token punctuation">.</span>options<span class="token punctuation">.</span>output <span class="token operator">===</span> <span class="token string">'undefined'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> compilation<span class="token punctuation">.</span>options<span class="token punctuation">.</span>output<span class="token punctuation">.</span>publicPath <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'WebpackDynamicPublicPath: params missing - output.publicPath must be defined in webpack config (used only as placeholder, make it distinctive)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">===</span> <span class="token string">'undefined'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>externalPublicPath <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`WebpackDynamicPublicPath: params missing - externalPublicPath - name of global variable you want to use as publicPath.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>publicPath <span class="token operator">=</span> <span class="token template-string"><span class="token string">`"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>compilation<span class="token punctuation">.</span>options<span class="token punctuation">.</span>output<span class="token punctuation">.</span>publicPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">emit</span><span class="token punctuation">(</span>compilation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> chunks <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>chunkNames <span class="token operator">?</span>            compilation<span class="token punctuation">.</span>chunks<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>chunk <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>chunkNames<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>            compilation<span class="token punctuation">.</span>chunks<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>chunks<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'WebpackDynamicPublicPath: chunks array for replacing publicPath is empty.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> fileNames <span class="token operator">=</span> chunks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>            chunk <span class="token operator">=</span><span class="token operator">></span> chunk<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>                file <span class="token operator">=</span><span class="token operator">></span> file<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/.*\.js/</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> replacePromises <span class="token operator">=</span> fileNames<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>fileName <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replacePublicPath</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> compilation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>replacePromises<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'WebpackDynamicPublicPath: publicPath replaced.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Replace publicPath     * @param {string} fileName     * @param {object} compilation     * @return {Promise&lt;any>}     */</span>    <span class="token function">replacePublicPath</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> compilation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> source <span class="token operator">=</span> compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span>fileName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> publicPath <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>publicPath<span class="token punctuation">;</span>            <span class="token keyword">const</span> externalPublicPath <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>externalPublicPath<span class="token punctuation">;</span>            compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span>fileName<span class="token punctuation">]</span><span class="token punctuation">.</span>source <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>publicPath<span class="token punctuation">,</span> externalPublicPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> WebpackDynamicPublicPath<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源码很简单，我就复制过来凑凑字数，内部的细节我就不做展示，逻辑我在这里介绍一下。</p><p>利用环境变量配置，提供公共的 <code>publicPath</code> 前缀，获取需要被拆分的页面模块名称，拼接特定的 <code>publicPath</code> 内容。</p>]]></content>
    
    <summary type="html">
    
      荣获 2020 年度优秀员工
    
    </summary>
    
    
      <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>時間は本当に早い〜２０２１年だ〜</title>
    <link href="https://zongzi531.com/2021/01/01/%E6%99%82%E9%96%93%E3%81%AF%E6%9C%AC%E5%BD%93%E3%81%AB%E6%97%A9%E3%81%84%E3%80%9C%EF%BC%92%EF%BC%90%EF%BC%92%EF%BC%91%E5%B9%B4%E3%81%A0%E3%80%9C/"/>
    <id>https://zongzi531.com/2021/01/01/時間は本当に早い〜２０２１年だ〜/</id>
    <published>2021-01-01T00:00:00.000Z</published>
    <updated>2021-05-26T05:37:48.796Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><a id="more"></a><blockquote><p>2020 年，阅读源码，入职新公司体验技术部，推动 TypeScript 内部生态，做技术分享等等。<br>2021 年，新的计划，新的征程，继续加油。</p></blockquote><h2 id="物联网团队"><a href="#物联网团队" class="headerlink" title="物联网团队"></a>物联网团队</h2><p>继上个月之后到春节前，我会负责多个物联网相关项目的开发，任务安排，进度管理工作。同时支持微前端架构的设计和技术支持。</p><p>在这几个项目中，培养同事使用 TypeScript 。</p><p>在期间，入职的新同事（实习生）由我来带领。</p><h2 id="回顾-2020-年"><a href="#回顾-2020-年" class="headerlink" title="回顾 2020 年"></a>回顾 2020 年</h2><ul><li><strong><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f48f.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f48f.png?v8">&#x1f48f;</span> 更爱女朋友，和她开心幸福在一起</strong></li><li><strong><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f497.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f497.png?v8">&#x1f497;</span> 更爱家人，祝家人身体健康，平平安安</strong></li><li><strong><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8">&#x1f3c7;</span> 锻炼身体</strong>（微量）</li><li><strong><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8">&#x1f4d4;</span> 日本語学習</strong></li><li><strong><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">&#x1f4da;</span> 建立自己的前端知识体系</strong>（进行中）</li><li><strong>推动公司使用 TypeScript</strong></li><li><strong>更多的学习 CSS</strong>（Grid 布局）</li></ul><h2 id="展望-2021-年"><a href="#展望-2021-年" class="headerlink" title="展望 2021 年"></a>展望 2021 年</h2><ul><li><strong><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f48f.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f48f.png?v8">&#x1f48f;</span> 更爱女朋友，和她开心幸福在一起</strong></li><li><strong><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f497.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f497.png?v8">&#x1f497;</span> 更爱家人，祝家人身体健康，平平安安</strong></li><li><strong><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8">&#x1f3c7;</span> 锻炼身体</strong></li><li><strong><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8">&#x1f4d4;</span> 日本語学習文法・語彙</strong></li><li><strong><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">&#x1f4da;</span> 建立自己的前端知识体系</strong></li><li><strong><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f6e0.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f6e0.png?v8">&#x1f6e0;</span> 学习前端自动化工程体系</strong></li><li>阅读 ECMA 标准</li><li>学习计算机图形学/可视化领域</li><li>实践 Three.js</li><li>学习服务端架构</li><li>学习 OKR</li></ul><h2 id="持续进行"><a href="#持续进行" class="headerlink" title="持续进行"></a>持续进行</h2><ul><li>关注 ECMA 标准 / ECMAScript Next</li><li>关注前端发展趋势</li><li>关注 NPM 社区</li><li>关注 TypeScript</li><li>学习算法</li><li>学习 CSS</li><li>至少 2 场技术分享</li></ul><h2 id="优先级较低的规划"><a href="#优先级较低的规划" class="headerlink" title="优先级较低的规划"></a>优先级较低的规划</h2><ul><li>了解 JavaScript 在不同宿主环境下的表现</li><li>尝试实践渲染性能优化</li><li>尝试 Angular、Ember.js</li><li>尝试 Progressive Web Apps</li><li>尝试 WebAssembly</li><li>学习 Web Accessibility</li></ul><h2 id="x1f4da-建立自己的前端知识体系"><a href="#x1f4da-建立自己的前端知识体系" class="headerlink" title="&#x1f4da; 建立自己的前端知识体系"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">&#x1f4da;</span> 建立自己的前端知识体系</h2><h3 id="新规划"><a href="#新规划" class="headerlink" title="新规划"></a>新规划</h3><p>从职业规划的角度来思考，未来可能会选择的挑战有：架构师、资深开发、项目经理、可视化开发等等我没有想到的。</p><p>但是，不能局限于此。跳出前端这个岗位看到后端，会发现需要涉及以及学习的内容非常丰富。</p><p>并且架构师也好，资深开发也好，项目经理也好，也需要周边领域的学习和了解，这样才能更好的跟随或者带动团队去成长。</p><p>届时，我会在未来的时间里更多的要求自己不仅局限于前端这个岗位，而是整个软件生态，生命周期里涉及到的环节都得有所了解。</p><p>就像是 DevOps 一样，需要掌握的内容会很多。</p><p>在未来，需要达成的目标和规划如下：</p><ol><li>扎实前端相关知识基础</li></ol><p>比如从阅读 ECMA 标准开始，扎实对 JavaScript 的认识，从 HTTP 协议到浏览器实现，扎实对网络，对浏览器 API 的认识等等很多方面，这将会是一条漫长的路。</p><ol start="2"><li>更多的以产品经理角度思考问题，发现问题</li></ol><p>可以理解成深入到业务，服务到客户。思考问题的角度要去提升，而不单从开发。</p><ol start="3"><li>更多的以项目经理去沟通，学习沟通，锻炼沟通能力</li></ol><p>譬如学习 OKR 工作法，学习带同学，带动团队进步等等。</p><ol start="4"><li>关于未来需要深耕的领域，暂时还没有明确的想法，但是上面提到的内容一定是必经之路，没有捷径。</li></ol><h3 id="推动-TypeScript"><a href="#推动-TypeScript" class="headerlink" title="推动 TypeScript"></a>推动 TypeScript</h3><p>本以为今年没有机会做这件事情了，但是机会总是留给有准备的人的。因为机缘巧合，我负责公司内部项目重构为 TypeScript 项目，并且推动公司内部使用 TypeScript 业务模板开发，推动形成 TypeScript 相关的 NPM 包生态，同时建立以 TypeScript 起始的公司内部 ESLint Plugin 语法检查规范。</p><h3 id="设计模式的进阶"><a href="#设计模式的进阶" class="headerlink" title="设计模式的进阶"></a>设计模式的进阶</h3><p>非常喜欢的一种工作气氛，在有限的时间里挑战可能性。在开发低代码执行器的时候，对我来说就是一种挑战，在短暂的开发周期里，我对功能进行了解耦，引入了设计模式，完成了功能开发，并且在后续需要加功能的时候，因为有设计模式的优势夹持，将开发的时间大大缩短，虽然没有时间上的统计，但是这种挑战，是让人非常喜悦的。</p><p>再来到为项目维度提供的调度器，也是借助 React 的部分思路，拆解出执行单元，并以此为最小单元来进行代码执行的优化手段。</p><p>在未来的工作中，如遇到可能性，我会极力去挑战我想要实现的“优雅”的代码。</p><h3 id="提效贡献"><a href="#提效贡献" class="headerlink" title="提效贡献"></a>提效贡献</h3><p>考虑到需要在公司有更多的立足点，如何在内部推广自己团队的产出，除了产品这一点外，还有就是产出提效工具，解决 DevOps 中存在的痛点，这也是未来需要考虑的一个必要的切入点。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- no node --&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>&lt;img&gt; 使用 svg 后如何改变颜色</title>
    <link href="https://zongzi531.com/2020/12/16/img%E6%A0%87%E7%AD%BE%E4%BD%BF%E7%94%A8svg%E5%90%8E%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98%E9%A2%9C%E8%89%B2/"/>
    <id>https://zongzi531.com/2020/12/16/img标签使用svg后如何改变颜色/</id>
    <published>2020-12-16T17:06:56.000Z</published>
    <updated>2021-05-26T05:37:48.720Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><a id="more"></a><p>在一次开发中，使用 <code>&lt;img src=&quot;some.svg&quot; /&gt;</code> 的形式引入了 svg 文件，考虑到 svg 图片会在鼠标移入后进行变色操作，想想还是挺麻烦的。</p><p>不像是直接使用 svg 标签那样方便，这就开始了这次知难而上的尝试了。</p><p>接下来，我将为大家介绍我在解决问题的时候尝试的方法以及最终选择的方案。</p><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defs</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>turnIntoRed<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feColorMatrix</span>        <span class="token attr-name">in</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SourceGraphic<span class="token punctuation">"</span></span>        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>matrix<span class="token punctuation">"</span></span>        <span class="token attr-name">values</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1 1 1 1 0                0 0 0 0 0                0 0 0 0 0                0 0 0 1 0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>defs</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">filter</span><span class="token punctuation">:</span> <span class="token url">url('#turnIntoRed')</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>some.svg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式可以实现红色的渲染，但是会隐约出现原来的颜色，效果不行。</p><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> -<span class="token number">1000</span>px<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">1000</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defs</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>turnIntoRed<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feFlood</span> <span class="token attr-name">flood-color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#00<span class="token punctuation">"</span></span> <span class="token attr-name">flood-opacity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">result</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feComposite</span> <span class="token attr-name">in</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span> <span class="token attr-name">in2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SourceGraphic<span class="token punctuation">"</span></span> <span class="token attr-name">operator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>defs</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">filter</span><span class="token punctuation">:</span> <span class="token url">url('#turnIntoRed')</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>some.svg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方法实现效果达成了要求，可以完美显示红色，并且原来的颜色看不见。</p><p>但是方案一和方案二都有一个致命问题，需要定义一个存在全局唯一的 ID ，如果这个 ID 被覆盖的话那么就会超出预期显示内容。</p><h2 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">drop-shadow</span><span class="token punctuation">(</span><span class="token number">1000</span>px <span class="token number">0</span> <span class="token number">0</span> red<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">1000</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>some.svg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种方案不需要再定义晦涩难懂的 svg 标签，而是通过显示阴影的方式来解决问题，完美的解决了上面的问题，但是这个方案有一个注意点，需要将本身显示的图片移动至看不见的地方，不然就会有 2 个噢。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>最终我选择方案三来解决我的问题。</p>]]></content>
    
    <summary type="html">
    
      一次知难而上的尝试
    
    </summary>
    
    
      <category term="CSS" scheme="https://zongzi531.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://zongzi531.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>越来越忙，越来越充实</title>
    <link href="https://zongzi531.com/2020/12/01/%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%BF%99%EF%BC%8C%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%85%85%E5%AE%9E/"/>
    <id>https://zongzi531.com/2020/12/01/越来越忙，越来越充实/</id>
    <published>2020-12-01T10:18:55.000Z</published>
    <updated>2021-05-26T05:37:48.840Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><a id="more"></a><blockquote><p>工作变得越来越忙，也越来越充实。生活也是，为了美好的未来而努力！<br>杭州入冬了，天冷咯～</p></blockquote><h2 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h2><ul><li><strong>「日本語学習計画」</strong>：《新版 中日交流标准日本语 初级上、下》完成第 11 单元学习 <em>计划从明年开始，学习语法及词汇</em></li><li><strong>「计算机图形学」</strong>：材质与外观 <em>停滞</em></li><li><strong>「锻炼身体」</strong>：适当运动，基本保持在每周1～2次</li></ul><h2 id="x1f4da-建立自己的前端知识体系"><a href="#x1f4da-建立自己的前端知识体系" class="headerlink" title="&#x1f4da; 建立自己的前端知识体系"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">&#x1f4da;</span> 建立自己的前端知识体系</h2><h5 id="1-可视化团队"><a href="#1-可视化团队" class="headerlink" title="1. 可视化团队"></a>1. 可视化团队</h5><p>于 11 月中旬正式负责物联网相关项目，可视化团队暂时告一段落，期间主要负责 V1.3.0 和 V1.4.0 相关的开发工作：</p><ol><li>低代码执行器，附日志调试</li><li>TypeScript 重构</li><li>平台专属调度器</li><li>基于 Hooks 感念的复用逻辑提炼</li><li>单元测试</li><li>司内 TypeScript 生态建设</li><li>组织发起 TypeScript Lint 规范讨论（<strong>后续计划落地司内 TypeScript 代码规范</strong>）</li><li>等等业务导向内容，及工具包开发及发布</li></ol><h5 id="2-体系拓展"><a href="#2-体系拓展" class="headerlink" title="2. 体系拓展"></a>2. 体系拓展</h5><ol><li>利用业余时间学习 CSS Grid 概念，并在物联网项目应用</li><li>学习有关 DevOps 概念，了解 K8s 和 Docker 的关系</li></ol><blockquote><p>结合自己 CSS 薄弱的问题，渐进式学习 CSS 知识并加以应用实践，同时学习软件开发行业整体的流程，深入敏捷开发，并借助工具加速，跳离前端岗位，延伸至整个行业，甚至企业产品的生命周期中的各个环节</p></blockquote><h5 id="3-技术分享"><a href="#3-技术分享" class="headerlink" title="3. 技术分享"></a>3. 技术分享</h5><p><a href="https://github.com/zongzi531/daily-learning/blob/master/share/%E8%BF%BD%E6%B1%82%E4%BC%98%E9%9B%85%E7%9A%84%E4%BB%A3%E7%A0%81.pdf" target="_blank" rel="noopener">《追求优雅的代码》</a></p><p>这次分享较上次分享做了更多的准备，当然分享的效果也比之前要好了。只不过还有改进的地方，比如：卡顿或者停顿的时候，不要说类似于“我想想”的话，可以自然的喝口水这样。分享的素材和例子在平时也需要注意积累，因为短时间内可能不一定找到到合适的例子。还有就是需要注意分享内容不要太大，最好聚焦某一块内容进行分享，提供更多的干活之类的，不过这个还是要考虑到听众的群里再做定论，不过这个是一个很好的出发点。</p><p>计划未来每年至少做2次分享，锻炼和提升。</p><h5 id="4-文章推荐"><a href="#4-文章推荐" class="headerlink" title="4. 文章推荐"></a>4. 文章推荐</h5><ul><li><a href="https://mp.weixin.qq.com/s/YzbAPM0dxQTmkiEtrjhPNw" target="_blank" rel="noopener">前端智能化 2020 年中总结和反思</a></li><li><a href="https://mp.weixin.qq.com/s/JoZRvjvyH1s-CyZU3olYww" target="_blank" rel="noopener">【第2116期】Vue 3.0 Ref-sugar 提案真的是自寻死路吗？</a></li><li><a href="https://mp.weixin.qq.com/s/3Kkc_91U8bpRWQB7ZK342Q" target="_blank" rel="noopener">【第2118期】前端安全生产在ICBU的探索与落地</a></li><li><a href="https://mp.weixin.qq.com/s/lI_Q9TClzoBUgYpaWDxSUw" target="_blank" rel="noopener">【第2119期】浏览器端录制技术的探索与实践</a></li><li><a href="https://mp.weixin.qq.com/s/WJE7KgiOpPJMCpdcJdy30A" target="_blank" rel="noopener">【第2121期】斗鱼关注人数爬取 ── 字体反爬的攻与防</a></li><li><a href="https://book.douban.com/subject/30243169/" target="_blank" rel="noopener">《即兴演讲》</a></li><li><a href="https://mp.weixin.qq.com/s/ifLP36rFhYJsU2RCAi7OZQ" target="_blank" rel="noopener">React 是如何工作的</a></li><li><a href="https://www.zhihu.com/question/405268183/answer/1328519761" target="_blank" rel="noopener">如何看待React源码中调度优先级使用lane取代expirationTime？</a></li><li><a href="https://juejin.cn/post/6860275004597239815" target="_blank" rel="noopener">React17新特性：启发式更新算法</a></li><li><a href="https://mp.weixin.qq.com/s/nJZk-0WtEW6C8mTeJCSUzQ" target="_blank" rel="noopener">【第2133期】如何搭建一套 “无痕埋点” 体系？</a></li></ul>]]></content>
    
    <summary type="html">
    
      工作变得越来越忙，也越来越充实。生活也是，为了美好的未来而努力！
    
    </summary>
    
    
      <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>入秋的感受</title>
    <link href="https://zongzi531.com/2020/11/01/%E5%85%A5%E7%A7%8B%E7%9A%84%E6%84%9F%E5%8F%97/"/>
    <id>https://zongzi531.com/2020/11/01/入秋的感受/</id>
    <published>2020-11-01T10:19:23.000Z</published>
    <updated>2021-05-26T05:37:48.760Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><a id="more"></a><blockquote><p>感觉非常不喜欢这个季节，原因是因为昼夜温差太大，容易感冒（年纪大了，只能多穿些）。<br>对于早出晚归的我来说，出门必定得多穿些，然后到了中午下午就开始热了。<br>服装上面来说，会比较讨厌吧。<br>或许是，杭州的这个季节……</p></blockquote><h2 id="x1f4d4-日本語学習計画"><a href="#x1f4d4-日本語学習計画" class="headerlink" title="&#x1f4d4; 日本語学習計画"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8">&#x1f4d4;</span> 日本語学習計画</h2><p>截至目前《新版 中日交流标准日本语 初级上、下》完成第 10 单元学习。就现阶段存在的问题，词汇量远远不够，并且业余时间变少了。</p><h2 id="x1f4da-建立自己的前端知识体系"><a href="#x1f4da-建立自己的前端知识体系" class="headerlink" title="&#x1f4da; 建立自己的前端知识体系"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">&#x1f4da;</span> 建立自己的前端知识体系</h2><h5 id="1-计算机图形学"><a href="#1-计算机图形学" class="headerlink" title="1. 计算机图形学"></a>1. 计算机图形学</h5><p>截止目前学习进度至：<strong>「材质与外观」</strong> <strong>学习进度停滞</strong></p><p>简单尝试了 <code>Three.js</code> 的几何。</p><h5 id="2-可视化团队"><a href="#2-可视化团队" class="headerlink" title="2. 可视化团队"></a>2. 可视化团队</h5><p>月底的月会上，我可算才知道我目前的岗位定位，属于技术预研团队，目前支持可视化团队工作。</p><p>接着上个月剩余的工作，完成核心单元测试覆盖率达 70% 以上，编写「平台专属调度器」，和一些类型订正修复。</p><p>回顾重构感受，重构过程确实痛苦，但是在订正类型的过程中会发现，你对平台的数据结构会变得越来越熟悉，毕竟每一个 <code>interface</code> 都是和同事一起整理出来的。</p><p>对不熟悉的函数方法，通过类型的帮助，也渐渐知道他们存在的目的以及用途。可以说 TypeScript 是越写越上瘾的，虽然在 Vue 2.x 环境下的开发体验并不是那么好，但是我已经尽可能的在为切换到 Vue 3 在做准备，比如抽离更多的方法函数、使用 <code>@vue/composition-api</code> 、等等。</p><p>关于「平台专属调度器」的开发工作，目前因为整个实现逻辑是我自己设计的，功能难免有些简单和片面，当前实现功能如下：</p><ol><li>以可视化平台组件为工作单元，实现同步挂载渲染和异步挂载渲染。</li><li>在同步挂载渲染模式下实现分组同步挂载功能。</li><li>基于目前「平台专属调度器」实现逻辑添加了一些基础的防御性代码。</li><li>支持工作单元优先级分配调整功能。</li></ol><p>目前「平台专属调度器」的功能还是属于试验性阶段，后续会为配合平台会做适当调整。</p><blockquote><p>补充一下关于「低代码执行器」 使用到的设计模式，观察者模式，依赖注入模式，模板方法模式。</p></blockquote><h5 id="3-技术分享"><a href="#3-技术分享" class="headerlink" title="3. 技术分享"></a>3. 技术分享</h5><p>在一次分享预演的会议上，同事们纷纷发表自己的意见，让我第一次感受到要想把分享讲好还是一门很重要的学问。</p><p>在制作分享前思考，分享时的听众是哪些群体，在制作时则要相应的转换表达方式，比如不能把对开发讲的技术内容生硬的讲给销售听等等。</p><p>建立在这个基础上后，可以罗列整个分享的大纲内容，围绕着大纲去展开更多的内容。</p><p>再一个是比如你在讲一些宣传类型的分享时，内容、用词应当积极向上，避免使用一些复面的词语，可以参考苹果官网的用词，真的特别装逼，这很苹果。</p><p>等等，我相信还有很多分享时的技巧，但是我现在还没有领悟到。</p><p>最后在月底，他组的领导邀请我做有关代码质量/规范相关主题的技术分享，这算是我第二次做技术分享的机会，我毫不犹豫的接受了此次挑战，我希望可以把我学到的内容运用进去，敬请期待吧！</p><h2 id="x1f3c7-锻炼身体"><a href="#x1f3c7-锻炼身体" class="headerlink" title="&#x1f3c7; 锻炼身体"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8">&#x1f3c7;</span> 锻炼身体</h2><p>又开始松懈，惰性气质散发的淋漓精致啊！想……如何才能持续坚持，毕竟贵在坚持，好难！</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- no node --&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>一步一步向前走</title>
    <link href="https://zongzi531.com/2020/10/01/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%90%91%E5%89%8D%E8%B5%B0/"/>
    <id>https://zongzi531.com/2020/10/01/一步一步向前走/</id>
    <published>2020-10-01T06:06:06.000Z</published>
    <updated>2021-05-26T05:37:48.752Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><a id="more"></a><blockquote><p>「2017 年中秋，摄于日本东京台场」<br>时间来到了国庆，今年国庆和中秋可是一起的噢。想去日本旅游～</p></blockquote><h2 id="x1f4d4-日本語学習計画"><a href="#x1f4d4-日本語学習計画" class="headerlink" title="&#x1f4d4; 日本語学習計画"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8">&#x1f4d4;</span> 日本語学習計画</h2><p>截至目前《新版 中日交流标准日本语 初级上、下》完成第 9 单元学习。加油！</p><h2 id="x1f4da-建立自己的前端知识体系"><a href="#x1f4da-建立自己的前端知识体系" class="headerlink" title="&#x1f4da; 建立自己的前端知识体系"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">&#x1f4da;</span> 建立自己的前端知识体系</h2><h5 id="1-计算机图形学"><a href="#1-计算机图形学" class="headerlink" title="1. 计算机图形学"></a>1. 计算机图形学</h5><p>截止目前学习进度至：<strong>「材质与外观」</strong> <strong>学习进度停滞</strong></p><p>简单尝试了 <code>Three.js</code> 做鼠标跟随。</p><h5 id="2-可视化团队"><a href="#2-可视化团队" class="headerlink" title="2. 可视化团队"></a>2. 可视化团队</h5><p>9 月是参与可视化团队的第二个月，工作当然是比上个月更忙了，简单介绍一下这个月的工作内容，负责以下内容：</p><ul><li>平台整体代码重构工作：<ol><li>脚手架迁移更新</li><li>全面采用 TypeScript 开发</li><li>平台运行时逻辑优化</li><li>核心逻辑单元测试</li></ol></li><li>等等其他支持</li></ul><p>脚手架迁移是一个新的尝试，从 Vue CLI 2 构建的项目迁移至 Vue CLI 4 进行构建，并同时将语言由 JavaScript 切换至 TypeScript 。我非常喜欢的工作内容，也是我在今年想做的一件事情，非常开心，很有动力。</p><p>在代码迁移过程中，你会发现旧代码中 Lint 规则很多都是过时且不好的，虽然很多可以使用 <code>--fix</code> 进行修复，但是还是有很多代码需要手动修复，也就从这一点也发现了很多的不明显的 BUG 和多余的文件。</p><p>在脚手架迁移的过程中，学习 Webpack chain 的使用方式，在同事的帮助下节省了不少学习成本，从一开始的抵触，到慢慢的接受，再到现在的习惯，回顾起来其实还是很清晰方便的。真香！</p><p>当然了，由于一些依赖的升级，旧依赖没必要在新的环境中使用，也遇到了一些问题。比如 PostCSS 的使用问题，此次我才知道原来 <code>plugin</code> 是有顺序的，是线性执行的，也移除了一些旧的插件，使用 precss 来代替，非常的方便。</p><p>在迁移完脚手架和 TypeScript 后，联系后端进行 CI/CD 的 TS 分支自动化部署测试，也相当的顺利，对 CI/CD 也有了更多的学习和认识，对 Docker 也有了些兴趣～</p><p>在优化平台运行时逻辑时，需要充分为单元测试做考虑，比如我做了如下的优化手段，抽离挂载在 <code>Vue.prototype</code> 上的公共方法，将使用模块化的形式使用，这样的优点是更适合做单元测试，让函数更纯粹。</p><p>对原有的 <code>mixins</code> 进行抽离，放弃使用这个危险的功能。由于目前还暂时不敢使用 Vue 3.0 版本，基于 Vue 2.0 我决定使用 <code>@vue/composition-api</code> 来代替 <code>mixins</code> ，这样的做的优点是不仅可以抽离出公共的逻辑，并且利于做单元测试，让逻辑更清晰。并且提前使用 <code>@vue/composition-api</code> 会让未来在迁移到 Vue 3.0 的过程变得轻松。</p><p>当然还对 Vuex 做了类型约束，约束方式则参考<a href="https://dev.to/3vilarthas/vuex-typescript-m4j" target="_blank" rel="noopener">「 Vuex + TypeScript 」</a>，一个很不错的类型约束写法，由于目前使用的 Vuex 还是 3.x 版本，暂时未升级到 4.0 版本以上，所以在 Vue 文件中使用类型约束暂时还不行，需要后续再做尝试了……</p><p>噢，对了。在迁移 <code>watch</code> 钩子的时候才从同事这里得知 Vue 2.x 中是有一个 <code>sync</code> 参数的，查阅资料发现在 Vue 3.0 是给开发者提供了文档说明，但是在 Vue 2.x 似乎没有，使用 <code>@vue/composition-api</code> 可以使用 <code>flush: &#39;sync&#39;</code> 来使用，但是使用 <code>vue-property-decorator</code> 的 <code>@Watch</code> 装饰器时却无法使用，查看源码发现就不支持，于是自己内部重新构建了一个支持 <code>sync</code> 的 <code>@Watch</code> 装饰器使用，并且给该仓库提了一个 PR<a href="https://github.com/kaorun343/vue-property-decorator/pull/346" target="_blank" rel="noopener">#346</a> 。</p><p>截止国庆，重构的工作并没有完成，单元测试目前覆盖率仅 5 % ，平台运行时的逻辑优化也没有开始做，计划将运行时写的更优雅，使用类似于 React 事务的模式去合理的规划平台的运行时，让平台运行的更可控，加油，挑战设计模式！</p><h5 id="3-文章推荐"><a href="#3-文章推荐" class="headerlink" title="3. 文章推荐"></a>3. 文章推荐</h5><ul><li><a href="https://mp.weixin.qq.com/s/Ti4LhQfqPH2sysg6RvU_BQ" target="_blank" rel="noopener">【第2056期】蚂蚁金服@御术：比能力更重要的是你的底层操作系统</a></li><li><a href="https://mp.weixin.qq.com/s/9KKzu7f6E0dcWKXi-PQc8Q" target="_blank" rel="noopener">【第2061期】「划线高亮」和「插入笔记」—— 不止是前端知识点</a></li><li><a href="https://mp.weixin.qq.com/s/v6OSWMHRJR3AThtS-O5GdQ" target="_blank" rel="noopener">【第2076期】阿里@风月：中医药大学毕业的业务女前端修炼之路</a></li></ul><h2 id="x1f3c7-锻炼身体"><a href="#x1f3c7-锻炼身体" class="headerlink" title="&#x1f3c7; 锻炼身体"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8">&#x1f3c7;</span> 锻炼身体</h2><p>重新开始恢复锻炼，感觉出出汗还是挺舒服的，当然也是防止肥胖。啊～肥胖，远离你！</p><h2 id="新的规划"><a href="#新的规划" class="headerlink" title="新的规划"></a>新的规划</h2><p>也慢慢感觉到了自己想在新的一年的目标和规划：</p><ul><li>扎实前端相关知识基础（比较宽泛，需要罗列细节）</li><li>更多的以产品经理角度思考问题，发现问题</li><li>更多的以项目经理去沟通，学习沟通，锻炼沟通能力</li><li>领域的深耕似乎还是迷茫，多去做尝试和选择</li></ul>]]></content>
    
    <summary type="html">
    
      时间来到了国庆，今年国庆和中秋可是一起的噢。想去日本旅游～
    
    </summary>
    
    
      <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>脱离业务</title>
    <link href="https://zongzi531.com/2020/09/01/%E8%84%B1%E7%A6%BB%E4%B8%9A%E5%8A%A1/"/>
    <id>https://zongzi531.com/2020/09/01/脱离业务/</id>
    <published>2020-09-01T10:31:09.000Z</published>
    <updated>2021-05-26T05:37:48.840Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><a id="more"></a><blockquote><p>8 月，正式脱离公司业务团队，参与可视化团队项目，为公司赋能。<br>可以说，脱离业务团队后，工作变得比以前更忙了，更充实了。（会议也变多了）<br>整个 8 月甚至 9 月被工作安排的满满当当的</p></blockquote><h2 id="x1f4d4-日本語学習計画"><a href="#x1f4d4-日本語学習計画" class="headerlink" title="&#x1f4d4; 日本語学習計画"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8">&#x1f4d4;</span> 日本語学習計画</h2><p>截至目前《新版 中日交流标准日本语 初级上、下》完成第 8 单元学习，由于第 7 单元的进度在上个月未完成，所以本月已加快进度学习。</p><p>「日本語のコーナー」学习停滞。当然了，还是非常王様给我带来了那么多的帮助，所以在恢复之前我还是会继续前行，继续加油（虽然恢复也是未知的）。</p><p>在此计划加快完成单元学习进度，学习语法基础，加油！</p><h2 id="x1f4da-建立自己的前端知识体系"><a href="#x1f4da-建立自己的前端知识体系" class="headerlink" title="&#x1f4da; 建立自己的前端知识体系"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">&#x1f4da;</span> 建立自己的前端知识体系</h2><h5 id="1-计算机图形学"><a href="#1-计算机图形学" class="headerlink" title="1. 计算机图形学"></a>1. 计算机图形学</h5><p>截止目前学习进度至：<strong>「材质与外观」</strong></p><p>计划尽快完成学习进度，实战前端可视化领域。</p><p>希望本次计算机图形学可以让我更好的理解可视化领域。</p><h5 id="2-脱离业务"><a href="#2-脱离业务" class="headerlink" title="2. 脱离业务"></a>2. 脱离业务</h5><h6 id="1-「低代码执行器」开发"><a href="#1-「低代码执行器」开发" class="headerlink" title="1. 「低代码执行器」开发"></a>1. 「低代码执行器」开发</h6><blockquote><p>2020年11月 将「解释器」修改为「低代码执行器」，因为原名称含义并不贴切，关于「解释器」可以参阅维基百科解释。新名称则更符合更为贴切。</p></blockquote><p>负责内部可视化平台「星图」编辑器（节点编程） JavaScript 「低代码执行器」开发工作，「低代码执行器」实现对流程节点的触发、传递，执行、抛出功能，同时配套支持节点快照、错误捕获功能。</p><p>整个「低代码执行器」内部基于 RxJS 的 Subject 主题订阅实现，利用其多播的特性实现“一点触发、多点抛出”的传播特性，即一个观察者实例可以被多个观察者进行订阅。</p><p>「低代码执行器」内的执行即执行用户输入的低代码内容，利用节点池进行数据的传递并在规定条件下抛出。</p><p>起初编写代码使用 <code>switch</code> 进行编写，但是随着节点类型的增加，代码随之变得逐渐臃肿，逻辑复杂可读性差，为了避免更深化此问题，在紧迫的开发时间内挤出时间对「低代码执行器」进行彻底重构。</p><p>重构采用依赖<strong>注入</strong>的设计模式，将各个节点的环节逻辑进行抽象、剥离。</p><p>重构后，很明显可以看到「低代码执行器」的核心代码逻辑更为清晰，也让核心变得更为稳定；节点自身的逻辑也与外界互不干扰，并且也很容易支持新的节点注入。</p><p><em>设计模式的重要性就此体现了！</em></p><p>并且使用依赖注入的设计模式更好的支持了单元测试，让「低代码执行器」核心逻辑和节点更易测试、和排错。</p><p>关于节点快照和错误捕获功能，快照则基于队列实现，配合边（节点连接边）控制，在需要抛出时展示整个节点流向及快照，错误捕获也一同抛出。</p><h6 id="2-栈存取工具库开发"><a href="#2-栈存取工具库开发" class="headerlink" title="2. 栈存取工具库开发"></a>2. 栈存取工具库开发</h6><p>同时负责基于 IndexedDB 实现的栈存取工具库的开发工作，很不错的是目前公司的 TypeScript 仓库也非常多。考虑到发包的情况，直接就上 TypeScript 了，即实现一个完整的栈功能（回退方案支持 <code>localStorage</code> ），配套编写单元测试（测试覆盖率 100% ）。</p><blockquote><p>后续：和兄弟部门同事讨论关于 IndexedDB 存取性能问题、存储空间问题。可能会调整工具库的内部逻辑，不过需求暂时待审核。</p></blockquote><h5 id="3-文章推荐"><a href="#3-文章推荐" class="headerlink" title="3. 文章推荐"></a>3. 文章推荐</h5><ul><li><a href="https://mp.weixin.qq.com/s/42r-HqT8UOvQV-mLgkYHpA" target="_blank" rel="noopener">【第2028期】What I’m thinking about: JS疲劳、招聘</a></li><li><a href="https://mp.weixin.qq.com/s/eQjKG6wrvt2zy-O5mF6F1g" target="_blank" rel="noopener">如何写技术文章</a></li><li><a href="https://mp.weixin.qq.com/s/FHbHhjtfJOc2NPfge6xw2Q" target="_blank" rel="noopener">【第2033期】核心稳定、易扩展——开放关闭原则（The Open-Closed Principle）</a><blockquote><p>摘抄：要知道，世界上没有一劳永逸的技术方案，也没有一成不变的业务可以取得成功。理想状态下，业务应当驱使着技术的进步，同时技术的进步也促使业务有更多的可能，二者应当呈现为一种相辅相成并充满活力的状态。</p></blockquote></li><li><a href="https://mp.weixin.qq.com/s/8-SMIe-9wdwsmxYwavhDdw" target="_blank" rel="noopener">【第2042期】程序员如何把控自己的职业</a></li></ul><h2 id="x1f3c7-锻炼身体"><a href="#x1f3c7-锻炼身体" class="headerlink" title="&#x1f3c7; 锻炼身体"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8">&#x1f3c7;</span> 锻炼身体</h2><p>没坚持住……感觉整个 8 月都没锻炼……没法搞没法搞啊。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- no node --&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>充实的七月</title>
    <link href="https://zongzi531.com/2020/08/01/%E5%85%85%E5%AE%9E%E7%9A%84%E4%B8%83%E6%9C%88/"/>
    <id>https://zongzi531.com/2020/08/01/充实的七月/</id>
    <published>2020-08-01T10:23:28.000Z</published>
    <updated>2021-05-26T05:37:48.760Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><a id="more"></a><blockquote><p>和我心爱的女朋友求婚了！<br>大成功！！！哈哈哈～</p></blockquote><h2 id="x1f4d4-日本語学習計画"><a href="#x1f4d4-日本語学習計画" class="headerlink" title="&#x1f4d4; 日本語学習計画"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8">&#x1f4d4;</span> 日本語学習計画</h2><p>还是老样子，截至目前《新版 中日交流标准日本语 初级上、下》第 7 单元的学习开始，当然只学了 2 课，可能要拖到下个月咯……</p><p>不过没关系，七月加入了王様（先生）的<a href="https://zongzi531.com/nihongonokona/index.html">「日本語のコーナー」</a>学习，非常感谢王様。</p><p>王様、ありがとうございます！お疲れ様です！明日はよろしくお願いします。</p><p>えと…コーナーのみんなさん、いしょに頑張りましょ！</p><p>目前，学习日语语法的优先级在学习课文之上，打好语法基础、拓展词汇才是长久之计。</p><p>日漫日剧现在看起来也比以前有了更多的情切感，毕竟简单的词汇已经可以听懂了。</p><p>頑張りましょ！</p><h2 id="x1f4da-建立自己的前端知识体系"><a href="#x1f4da-建立自己的前端知识体系" class="headerlink" title="&#x1f4da; 建立自己的前端知识体系"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">&#x1f4da;</span> 建立自己的前端知识体系</h2><p>月底时，公司内部组织架构调整，我没有被跟着公司产品线被分离出去，而是继续留在体验技术部，将参与可视化大屏的开发工作。未来的路，清晰且又模糊着……</p><h5 id="1-计算机图形学"><a href="#1-计算机图形学" class="headerlink" title="1. 计算机图形学"></a>1. 计算机图形学</h5><p>截止目前学习进度至：<strong>「几何（基本表示方法）」</strong></p><p>作业成果展示：</p><p><img src="https://raw.githubusercontent.com/zongzi531/daily-learning/master/GAMES101/Homework/Assignment3/Code/output-texture-bilinear.png" alt="作业三实现图例"></p><p>利用投影矩阵实现透视投影，通过插值算法计算纹理颜色的插值，结合 Blinn-Phong 模型和双线性插值纹理采样技术计算纹理颜色。实现源码请前往 <a href="https://github.com/zongzi531/daily-learning/tree/master/GAMES101/Homework" target="_blank" rel="noopener">GAMES101/Homework</a> 仓库查看。</p><h5 id="2-接触内部自动化"><a href="#2-接触内部自动化" class="headerlink" title="2. 接触内部自动化"></a>2. 接触内部自动化</h5><p>拿到仓库的时候连依赖都装不起来，更别说跑了。不过公司的开发环境确实有些差劲。</p><ul><li>提示因 <code>hiredis</code> 编译失败引起的问题，查看 npm 可以看到需要基础环境，按照要求安装即可 <a href="https://www.npmjs.com/package/hiredis#install" target="_blank" rel="noopener">hiredis#install</a> 。<ul><li><code>gcc</code> / <code>g++</code> 4.8 or newer.</li><li><code>python</code> 2.7 or any newer 2.x version. <code>python</code> 3.x is not supported.</li></ul></li><li>同时遇到 <code>node-gyp</code> 或 <code>node-gyp rebuild</code> 无法使用的情况，使用如下方式解决 <a href="https://www.npmjs.com/package/node-gyp#installation" target="_blank" rel="noopener">node-gyp#installation</a> 。<ul><li><code>npm install --global --production windows-build-tools</code></li><li><code>npm config set msvs_version 2017</code></li></ul></li><li>安装 <code>node-gyp</code> 的过程中遇到需要下载其他包的情况（因为是内网环境，会提示 <code>network error</code> 。能体会有多差劲了吧），可以使用 <code>npm --disturl=你所需要的内网环境源地址</code> 来替换 <code>cli config</code> 中的 <code>disturl</code> 属性值来达成目的。</li><li>安装 <code>windows-build-tools</code> 提示需要下载 Python 2.7.15 版本<ul><li>下载离线包，安装并配置环境变量</li><li>完成上一步后提示下载 vs_BuildTools.exe 失败（原因可能也同于 Visual Studio ）</li></ul></li><li>执行安装依赖报有关 .NET Framework 2.0/4.0 的错误，<strong>未解决</strong>。<ul><li>猜测是由于没有安装 Visual Studio 导致（太难受了，正在打算从离线包的方式解决……）</li></ul></li></ul><p>仍然在排查问题当中……</p><h5 id="3-内部原型文档管理平台（兴趣小组）"><a href="#3-内部原型文档管理平台（兴趣小组）" class="headerlink" title="3. 内部原型文档管理平台（兴趣小组）"></a>3. 内部原型文档管理平台（兴趣小组）</h5><ol start="0"><li>需求、原型的讨论和确定（微前端应用）</li><li>完成开发框架的搭建（ Vue2.x + TypeScript ）</li><li>准备进入开发</li></ol><h2 id="x1f3c7-锻炼身体"><a href="#x1f3c7-锻炼身体" class="headerlink" title="&#x1f3c7; 锻炼身体"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8">&#x1f3c7;</span> 锻炼身体</h2><p>（好难坚持啊………………）加油！加油！！加油！！！太难了……</p><blockquote><p>写了半天，感觉好像也没那么充实嘛……（其实很充实）</p></blockquote>]]></content>
    
    <summary type="html">
    
      和我心爱的女朋友求婚了！大成功！！！哈哈哈～
    
    </summary>
    
    
      <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>試しでみる</title>
    <link href="https://zongzi531.com/2020/07/01/tamesidemiru/"/>
    <id>https://zongzi531.com/2020/07/01/tamesidemiru/</id>
    <published>2020-07-01T11:59:51.000Z</published>
    <updated>2021-05-26T05:37:48.732Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><a id="more"></a><blockquote><p><strong>发个牢骚：要长大了啊！粽子，要学会承担一些事情，要决定很多事情，更为生活，毕竟生活以为中心、开心最重要。</strong><br>啊哈哈，又买了一个加藤惠手办。舒服！</p></blockquote><h2 id="x1f4d4-日本語学習計画"><a href="#x1f4d4-日本語学習計画" class="headerlink" title="&#x1f4d4; 日本語学習計画"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8">&#x1f4d4;</span> 日本語学習計画</h2><p>截至目前《新版 中日交流标准日本语 初级上、下》已经完成「上」的学习，将在 7 月开始「下」的学习内容。</p><p>考虑到词汇量仍然是一座大山，尽量加大常用词汇的学习，加深印象。</p><p>听说， N3 的考试内容会比 N4/N5 简单些，因为会含有类似中文的词汇，存在着天然的优势。但是我仍然想先过 N4/N5 。</p><h2 id="x1f4da-建立自己的前端知识体系"><a href="#x1f4da-建立自己的前端知识体系" class="headerlink" title="&#x1f4da; 建立自己的前端知识体系"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">&#x1f4da;</span> 建立自己的前端知识体系</h2><h5 id="1-计算机图形学"><a href="#1-计算机图形学" class="headerlink" title="1. 计算机图形学"></a>1. 计算机图形学</h5><p>开始学习计算机图形学知识，为进入前端可视化做基础铺垫，对可视化领域进行学习探索。</p><p>目前借助<a href="https://sites.cs.ucsb.edu/~lingqi/teaching/games101.html" target="_blank" rel="noopener">《GAMES101: 现代计算机图形学入门》</a>进行学习，非常棒的学习内容，老师也非常棒！截止目前学习进度至：<strong>「变换（二维与三维）」</strong></p><h5 id="2-未来的路"><a href="#2-未来的路" class="headerlink" title="2. 未来的路"></a>2. 未来的路</h5><p>关于未来要走的路，现在还是有些迷茫和徘徊，在不断的尝试和探索中。在读到<a href="https://mp.weixin.qq.com/s/HJhNCVzmUNA47lySi_4LrQ" target="_blank" rel="noopener">《【第1981期】前端开发与架构师》</a>一文中也受到了一些启发。以下内容为摘抄：</p><blockquote><p><strong>技术是不断发展的，作为一个架构师，不断学习新的技术是非常重要的，这里所说的尝鲜，就是要对技术保持一定的热情，不能只满足于现状，说白了讲就是要不断的学。</strong></p><ul><li>习惯了jQuery开发页面，不妨试试Vue，React。</li><li>写了很久的ES5代码，学学ES6也不错。</li><li>沉醉在HTML，CSS，JavaScript开发页面，不妨学学Flutter。</li><li>打造高性能的Web App，试试Service Worker。</li><li>从HTTP协议触发，改造升级spdy和HTTP2，尝试一下HTTP3。</li><li>尝试一下新的编程语言：WebAssembly。</li><li>知道为服务，但你知道微前端吗。</li></ul><p>上面列举的尝鲜技能，是完全可以从一个前端的角度触发，来不断深入的，保持对每一个新技术的求知欲，是一名架构师必不可少的。</p></blockquote><p>其实不止是架构师，任何一条路都一样，都需要不断的学习，只有不断的学习才不会退步。</p><h5 id="3-领域兴趣小组"><a href="#3-领域兴趣小组" class="headerlink" title="3. 领域兴趣小组"></a>3. 领域兴趣小组</h5><p>关于部门领域兴趣小组的事情，因为人数调配问题，我主动退出了可视化相关的兴趣小组，当然这并不会妨碍到我去学习可视化，只不过我不需要出力了，希望可以从同事组建的可视化兴趣小组中学习到我欠缺的知识，为此我加入了另一个兴趣小组，具体做什么我就不细说了，希望我可以在小组中做到的一些事情，就是推动 TypeScript 来进行开发，从小范围开始，从新的技术站出发，继续加油。</p><p>在小组学习中，我也接受到了新的词汇，比如兴趣小组可能是 KPI 项目，当然这只是我自己的设想，目的其实是为了提升自己，更多的接触产品设计，感受产品孵化的过程，等等小团队合作的过程。关于最后的产出，则是以 OKR 的形式，也是一个新的挑战。</p><h5 id="4-学习日"><a href="#4-学习日" class="headerlink" title="4. 学习日"></a>4. 学习日</h5><p>关于学习日，部门的学习日很像是参加了技术分享会一样，可以学习到很多自己未接触过的内容，非常点赞！</p><p>如： <a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-elk/index.html" target="_blank" rel="noopener"><strong>《集中式日志系统 ELK 协议栈详解》</strong></a></p><p>一个完整的集中式日志系统，是离不开以下几个主要特点的。</p><ul><li>收集－能够采集多种来源的日志数据</li><li>传输－能够稳定的把日志数据传输到中央系统</li><li>存储－如何存储日志数据</li><li>分析－可以支持 UI 分析</li><li>警告－能够提供错误报告，监控机制</li></ul><h5 id="5-可视化大屏多屏长时间开启出现-GPU-进程爆栈页面崩溃情况处理"><a href="#5-可视化大屏多屏长时间开启出现-GPU-进程爆栈页面崩溃情况处理" class="headerlink" title="5. 可视化大屏多屏长时间开启出现 GPU 进程爆栈页面崩溃情况处理"></a>5. 可视化大屏多屏长时间开启出现 GPU 进程爆栈页面崩溃情况处理</h5><h6 id="排查原因"><a href="#排查原因" class="headerlink" title="排查原因"></a>排查原因</h6><ul><li>检查各屏可视化大屏是否存在内存溢出、报错情况 <strong>【排除】</strong></li><li>Chrome GPU 进程出现持续上涨情况 <strong>【占用 6 - 7 GB 左右】</strong></li><li>设备使用显卡：<ul><li>AMD Redeon HD 7500/7600 Series ( 以下简称独显 )</li><li>Intel(R) UHD Graphics 630 ( 以下简称集显 )</li></ul></li><li>经过长达近 1 个月的来回测试，当只使用独显运行设备时会出现 Chrome GPU 进程持续上涨情况并导致出现此现象；当同时使用集显和独显时 Chrome GPU 进程保持恒定</li><li>检测 Chrome GPU 报告发现日志内容显示<br><em>GpuProcessHost: The GPU process died due to out of memory.</em></li><li>查阅 Chrome 支持显示此情况目前暂无解决方案支持，可以前往查看：<br><a href="https://support.google.com/chrome/thread/2027254?hl=en" target="_blank" rel="noopener">GPU Process High RAM And CPU Usage</a></li></ul><h6 id="提供解决方案"><a href="#提供解决方案" class="headerlink" title="提供解决方案"></a>提供解决方案</h6><ul><li>同时使用集显和独显时避免此现象</li><li>Firefox 浏览器 <em>【未尝试，由 Chrome 支持评论可得】</em></li></ul><h5 id="6-React-源码的新理解"><a href="#6-React-源码的新理解" class="headerlink" title="6. React 源码的新理解"></a>6. React 源码的新理解</h5><ul><li><a href="https://www.yuque.com/docs/share/a142f6d5-114a-4924-8d96-17edea329357" target="_blank" rel="noopener">《Fiber &amp; Algebraic Effects》</a></li><li><a href="https://www.yuque.com/docs/share/8c167e39-1f5e-4c6d-8004-e57cf3851751" target="_blank" rel="noopener">《postMessage &amp; Scheduler》</a></li></ul><p>推荐阅读，作者写的很棒，值得理解。</p><h5 id="7-转正述职答辩"><a href="#7-转正述职答辩" class="headerlink" title="7. 转正述职答辩"></a>7. 转正述职答辩</h5><p>在转正述职答辩，也真实的提到了未来想做的事情</p><ul><li>对公共组件库提供更多的支持和贡献，提升项目开发效率</li><li>学习持续集成，以资源优化、持续集成优化角度提升部门内部自动化效率</li><li>学习计算机可视化领域，以运用到公司项目，为公司创造更炫酷的可视化效果</li></ul><p>同时以结合自己负责的业务，对业务更多的思考，加快开发效率，减少开发成本，提炼冗余代码，慢慢为产品做贡献。</p><p>希望对，学习前端自动化工程体系、 CSS 也有更多的学习。</p><h2 id="x1f3c7-锻炼身体"><a href="#x1f3c7-锻炼身体" class="headerlink" title="&#x1f3c7; 锻炼身体"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8">&#x1f3c7;</span> 锻炼身体</h2><p>（好难坚持啊………………）加油！加油！！加油！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- no node --&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>冥想</title>
    <link href="https://zongzi531.com/2020/06/01/%E5%86%A5%E6%83%B3/"/>
    <id>https://zongzi531.com/2020/06/01/冥想/</id>
    <published>2020-06-01T00:00:00.000Z</published>
    <updated>2021-05-26T05:37:48.764Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><a id="more"></a><p>时光飞逝，已经从事前端开发工作三年，也该想想下一个三年的自己应该如何。</p><p>如何突破自己，选择新的道路，成为了自己要思考的问题。</p><p>先来分享一篇最近读到的不错的文章<a href="https://mp.weixin.qq.com/s/gfFgpjn12VCfbIk4tzTKOA" target="_blank" rel="noopener">《【第1933期】钉钉前端团队负责人@贵重：技术团队 TL 如何培养人才？》</a>，其中的一段话很值得我们去思考：</p><blockquote><p>简单介绍一下前端的技术专家需要具备哪些能力？我总结为三点，第一点要看是否具备解构业务问题的能力，第二点看是否具备某领域专家的能力，是团队中该领域最懂的那个人，第三点是看技术影响力如何。每家公司有对应的 Job Model，可以对照去看。对于 JD 要去深入挖掘并提炼为几个能力，在同学接下来培养中，帮他丰富和凸显出来。</p></blockquote><p>所以，此时此刻。我会想到我的下一个三年，我需要找到自己擅长且能走远的方向，朝着某个领域深入，并且结合年初定的知识图谱的目标进行扩散，来提升自己，强壮自己。</p><p>至于要朝着哪个领域深入，这成为了我现在需要考虑的问题，非常苦恼也非常迷茫。但是又必须要做抉择，但愿我可以少走弯路，如果走了弯路，也会成为自己的经验吧，只不过这下一个“三”年可能变久了罢了。</p><p>这会是我接下来的长期探索目标，加油！</p><p>也建议看看<a href="https://mp.weixin.qq.com/s/Y94UZ_AOK3HoVh9GJPYEjw" target="_blank" rel="noopener">《前端之未来》</a>中提到的：</p><blockquote><p><strong>软件研发是一项理论和实践并重的技术，实践尤为重要，</strong>因为最终我们是要写出健壮运行的代码给用户用的。不管未来如何，在持续学习和实践中强化对编程、技术、业务的理解才是根本。除了学习和实践与业务最相关的技术外，建议按自己的专长和兴趣把重点放在这些领域：</p><ol><li><strong>领域驱动设计：</strong>强化领域建模和系统设计能力，力争懂业务、成为领域专家</li><li><strong>软件架构设计和软件设计哲学：</strong>它们会为系统、框架、类库注入灵魂，让代码有生命力</li><li><strong>图形技术：</strong>在应用、引擎两层都有广阔的场景，最关键的是图形应用在未来的占比一定会越来越高</li><li><strong>AI ：</strong>不必深入到底层，但需要掌握其使用，不妨先从 TensorFlow 开始</li></ol><p><strong>编程是一种修行，</strong>应用修行的产物，也是我们与世界交流的方式。未来在哪里并不重要，重要的是以空杯心态持续学习和实践，<strong>用心写下每行代码。</strong></p></blockquote><p>回到现在，</p><h2 id="x1f4d4-日本語学習計画"><a href="#x1f4d4-日本語学習計画" class="headerlink" title="&#x1f4d4; 日本語学習計画"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8">&#x1f4d4;</span> 日本語学習計画</h2><p>截至目前《新版 中日交流标准日本语 初级上、下》很顺利的进入第 6 个单元，词汇量依然是一座大山，对口语常用词会感到更多的兴趣，明日頑張ります！必ず成功！</p><h2 id="x1f4da-建立自己的前端知识体系"><a href="#x1f4da-建立自己的前端知识体系" class="headerlink" title="&#x1f4da; 建立自己的前端知识体系"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">&#x1f4da;</span> 建立自己的前端知识体系</h2><p>先来说说内部组件开发，参与的基本都是一些基于特定业务的定制化功能开发和少量的 BUG 问题修复。需要在这里提醒的是，需要建立内部代码评审，以 PR 形式来进行操作，直接发版可是有很大的风险的噢，很有可能闯大祸的噢，而且会造成大范围的影响，所以要对公共组件库的发版，迭代进行规范化处理。以一种健康的方式来提升组件库</p><ol><li>类似特定业务的定制化功能，采用开设分支进行开发，以分支版本进行发布，支持特定业务</li><li>BUG 修复和通用功能的开发，则以 PR 形式提出，由团队相关成员评审后并入主版本，对主版本进行长期支持</li><li>主版本可以有同行分支 Hotfix 和 Feature 以同时来接受 PR ，做到更合理的版本管理</li></ol><p>还是那句话，版本管理是个难事情噢</p><p>回过头来看看内部的持续集成机制，内部持续集成机制还算是完善，想借机会去学习了解一下实现过程，来扩充自己</p><p>再来说说参与可编辑大屏组件开发工作，可编辑类项目其实都有个通点，就是把开发的大部分权限交给产品或者运营去决定，类似拖拽、自定义、可编辑化的特点于一身，细节就不做说明，因为都差不多。可以说对可视化有了一些简单的接触和了解学习，希望未来有更多的机会。</p><p><strong>分享一些经验：</strong></p><ol><li>关于在 Windows 上使用 nvm 无作用情况，参考解决方法 <a href="https://github.com/coreybutler/nvm-windows/issues/58#issuecomment-272608696" target="_blank" rel="noopener">#58</a></li></ol><ul><li>Delete folder C:\Program Files\nodejs</li><li><code>nvm use</code></li><li><code>node -v</code></li></ul><ol start="2"><li>ECharts 关系图开启 <code>draggable</code> 参数后调整鼠标样式 <a href="https://github.com/apache/incubator-echarts/issues/5588#issuecomment-425612384" target="_blank" rel="noopener">#5588</a></li></ol><pre class="line-numbers language-javascript"><code class="language-javascript">chart<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> params <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> professionId <span class="token punctuation">}</span> <span class="token operator">=</span> params<span class="token punctuation">.</span>data  <span class="token keyword">if</span> <span class="token punctuation">(</span>professionId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    chart<span class="token punctuation">.</span><span class="token function">getZr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCursorStyle</span><span class="token punctuation">(</span><span class="token string">'pointer'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    chart<span class="token punctuation">.</span><span class="token function">getZr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCursorStyle</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="x1f3c7-锻炼身体"><a href="#x1f3c7-锻炼身体" class="headerlink" title="&#x1f3c7; 锻炼身体"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8">&#x1f3c7;</span> 锻炼身体</h2><p>自进入我司起，之前制定的日常锻炼小目标开始逐渐没有完成，情有可原，在未来的日子里慢慢重新抓起这些小目标，动起来。每天也只花个 10 分钟左右而已，很轻松啦。（好难坚持啊………………）</p><h2 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h2><p><a href="https://lutaonan.com/blog/leaving-alibaba/" target="_blank" rel="noopener">《离开阿里巴巴》</a></p><p>作者有说不能转载，但是里面有些内容确实值得我们思考，我小小摘抄一段，如有侵权，请联系我删除，不好意思呀。</p><blockquote><p>Why leave?</p><p>我从 Apple 和乔布斯身上理解到了在做同一件事时，不同的目的会导致做出来的东西天差地别。钱很重要，但如果乔布斯做产品的目的是钱而不是用户体验，那么 Apple 不会是今天的这个 Apple. 我认为做技术产品也是一样的道理，「做好」应该是目的。但能遇到适合「做大」的技术产品的场景是很靠运气的，在这样的情况下，绩效和晋升的压力会让人不得不把「做大」变成了目的，这就导致了：</p><ul><li>简单的事情复杂化，增加使用者的理解成本（ Cognitive Load ）</li><li>能使用现有的技术，偏要自己再做一套。由于「做大 -&gt; 晋升」是目的，这样的产品有很大的机率在达成了目的后被放弃。</li><li>做事态度变成「能用就行」，不关心用户体验。<br>这样的做事方式不适合我，也违背了我做技术的理念。</li></ul><p>What’s next</p><p>我还没有一个很确切的计划，但我希望能去一个地方，定义我价值的不仅仅是因为我用了多牛逼的技术，做了一个多大的「平台」，而是我用技术的手段，给用户创造了什么他们觉得有价值的东西，如何改进了用户体验。又或者我用技术解决了哪些效率问题。</p><p>Conclusion</p><p>离职不是什么苦大仇深的事，我对阿里没有任何的怨念，阿里有很多很好的地方，只不过不属于这篇文章要讨论的范围。无论在哪个地方，我想要的都是和一群有想法的人一起打磨一个有价值的产品，而不是不同职能的团队都只做对自己 KPI 有利的事。每个公司都有其独特的生存法则，但这个生存法则也应该让那些务实和纯粹的人能很好地生存下去。也许这就是我作为一个技术人的理想主义吧。</p></blockquote><p>整篇博客都写的非常的真实和接地气，建议阅读原文，希望对大家有所启发</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- no node --&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>渐入佳境</title>
    <link href="https://zongzi531.com/2020/05/01/%E6%B8%90%E5%85%A5%E4%BD%B3%E5%A2%83/"/>
    <id>https://zongzi531.com/2020/05/01/渐入佳境/</id>
    <published>2020-05-01T18:55:21.000Z</published>
    <updated>2021-05-26T05:37:48.820Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><a id="more"></a><blockquote><p>五一小长假韩国之行取消，入职 1 个月，慢慢的适应起来<br>尝试开始编写 Vue 代码，与 React 相比也有很多的相似之处，那就两个框架齐头并进吧<br>頑張れ！</p></blockquote><h2 id="x1f4d4-日本語学習計画"><a href="#x1f4d4-日本語学習計画" class="headerlink" title="&#x1f4d4; 日本語学習計画"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8">&#x1f4d4;</span> 日本語学習計画</h2><p>截至目前《新版 中日交流标准日本语 初级上、下》停留在第 3 个单元，学习进度停滞，对书产生抗拒心理，有点回归学校的感觉，词汇量真的好可恶啊啊啊。</p><p>争取在未来的日子里赶回来，同时产生变化的是有点喜欢看有字幕的日剧，想更多的通过煲日剧来对日常日语加深影响，要做到不仅会说更要听得懂。</p><h2 id="x1f4da-建立自己的前端知识体系"><a href="#x1f4da-建立自己的前端知识体系" class="headerlink" title="&#x1f4da; 建立自己的前端知识体系"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">&#x1f4da;</span> 建立自己的前端知识体系</h2><p>参与部门领域兴趣小组，借此机会来扩充自己的知识体系，尝试不同的领域。我报名了一个跟可视化相关的兴趣小组，我想在此领域做些尝试。当然了，暂时小组还没有开展什么活动……</p><p>关于源码阅读计划的继续推进，考虑到我目前接触到的我司技术栈为 Vue ，所以未来我会考虑阅读 Vue 的源码以借此机会进行学习。</p><p>接下来，来分享一些踩坑记录，当然了也是一些工作方式和学习经验的积累，希望可以融会贯通了。</p><p>先来说说内部 NPM 服务器发包的坑，入职一周的样子，在开发过程中就发现了内部库的 BUG ，借修 BUG 机会来感受发包，可是体验差强人意。</p><p>可以说基本问题都是由 Node.js 的版本差异所致，一开始我使用的是 12.x 版本，出现问题后，我尝试在网络上搜索解决方案，将版本降低至 10.x 来解决，当我以为问题解决的时候……噗，并没有。后来在发过包的同事这里才得知，是使用 8.x 版本来发包的，最后问题得以解决。</p><p>可以说是路程艰辛坎坷，其实关于公共库，我更希望可以看到有些环境配置来引导我去降级 node 版本，而非以这种惨痛的方式。</p><p>这里可以借鉴的地方还是挺多的，比如 React 仓库的 <code>package.json</code> 中：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"devEngines"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"node"</span><span class="token operator">:</span> "<span class="token number">8</span>.x || <span class="token number">9</span>.x || <span class="token number">10</span>.x || <span class="token number">11</span>.x || <span class="token number">12</span>.x || <span class="token number">13</span>.x"  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再遇到的一个问题，其实有关沟通，因为沟通的出入导致一直以为当前开发分支是错误的，并且一直在尝试调试，以至于浪费时间。所以可能更全面的了解项目，和沟通会有助于项目进度的推进，不然在临时支援项目时真的会很苦恼，会感觉每个加入的人都要踩这个坑。当然最后排除疑惑的方法也和沟通没有多大关系，而是借助线上环境的代码检索沟通的出入来最后确定开发分支是正确的，而非自身问题来解决此事，所以工作中多种多样的事情很多，但是更多的沟通会还是可以帮助问题的解决的，应该吧……（当然主要还是想说明利用线上代码来进行校对）</p><p>接下来，记录一下修复库的故事，有关 Element 库，因为我司内部库是由这个库迭代魔改的吧……，当遇到一些新的需求，或者现存 BUG 时，我会尝试去看 Element issues 来对内部库进行修复。</p><p>比如说一个有关于在 Table 组件下使用 <code>show-overflow-tooltip</code> 参数来实现当内容过长被隐藏时显示 tooltip ，然而问题就在于这个显示的 tooltip 不支持鼠标移入，需求则是需要支持，来看到 <a href="https://github.com/ElemeFE/element/issues/13916#issuecomment-482022541" target="_blank" rel="noopener">#13916</a> 。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 找到源码中的 handleCellMouseLeave 方法和 handleCellMouseEnter 方法进行替换即可</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>Table<span class="token punctuation">.</span>components<span class="token punctuation">.</span>TableBody<span class="token punctuation">.</span>methods<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token function">handleCellMouseLeave</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> tooltip <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>tooltip    <span class="token keyword">if</span> <span class="token punctuation">(</span>tooltip <span class="token operator">&amp;&amp;</span> tooltip<span class="token punctuation">.</span>expectedState<span class="token punctuation">)</span> <span class="token punctuation">{</span>      tooltip<span class="token punctuation">.</span><span class="token function">setExpectedState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>tooltip<span class="token punctuation">.</span>_timeoutLeave<span class="token punctuation">)</span>      tooltip<span class="token punctuation">.</span>_timeoutLeave <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tooltip<span class="token punctuation">.</span>expectedState<span class="token punctuation">)</span> <span class="token punctuation">{</span>          tooltip<span class="token punctuation">.</span><span class="token function">handleClosePopper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> cell <span class="token operator">=</span> <span class="token function">getCell</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cell<span class="token punctuation">)</span> <span class="token keyword">return</span>    <span class="token keyword">const</span> oldHoverState <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>table<span class="token punctuation">.</span>hoverState <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>table<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span>      <span class="token string">'cell-mouse-leave'</span><span class="token punctuation">,</span>      oldHoverState<span class="token punctuation">.</span>row<span class="token punctuation">,</span>      oldHoverState<span class="token punctuation">.</span>column<span class="token punctuation">,</span>      oldHoverState<span class="token punctuation">.</span>cell<span class="token punctuation">,</span>      event    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">handleCellMouseEnter</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> row<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log('handleCellMouseEnter', this.$refs.tooltip)</span>    <span class="token keyword">const</span> table <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>table    <span class="token keyword">const</span> cell <span class="token operator">=</span> <span class="token function">getCell</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>    <span class="token keyword">const</span> tooltip <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>tooltip    <span class="token keyword">if</span> <span class="token punctuation">(</span>cell<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> column <span class="token operator">=</span> <span class="token function">getColumnByCell</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> cell<span class="token punctuation">)</span>      <span class="token keyword">const</span> hoverState <span class="token operator">=</span> <span class="token punctuation">(</span>table<span class="token punctuation">.</span>hoverState <span class="token operator">=</span> <span class="token punctuation">{</span> cell<span class="token punctuation">,</span> column<span class="token punctuation">,</span> row <span class="token punctuation">}</span><span class="token punctuation">)</span>      table<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'cell-mouse-enter'</span><span class="token punctuation">,</span> hoverState<span class="token punctuation">.</span>row<span class="token punctuation">,</span> hoverState<span class="token punctuation">.</span>column<span class="token punctuation">,</span> hoverState<span class="token punctuation">.</span>cell<span class="token punctuation">,</span> event<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 判断是否text-overflow, 如果是就显示tooltip</span>    <span class="token keyword">const</span> cellChild <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.cell'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">hasClass</span><span class="token punctuation">(</span>cellChild<span class="token punctuation">,</span> <span class="token string">'el-tooltip'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> cellChild<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        tooltip<span class="token punctuation">.</span><span class="token function">setExpectedState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>        tooltip<span class="token punctuation">.</span><span class="token function">handleClosePopper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// use range width instead of scrollWidth to determine whether the text is overflowing</span>    <span class="token comment" spellcheck="true">// to address a potential FireFox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1074543#c3</span>    <span class="token keyword">const</span> range <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    range<span class="token punctuation">.</span><span class="token function">setStart</span><span class="token punctuation">(</span>cellChild<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    range<span class="token punctuation">.</span><span class="token function">setEnd</span><span class="token punctuation">(</span>cellChild<span class="token punctuation">,</span> cellChild<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token keyword">const</span> rangeWidth <span class="token operator">=</span> range<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width    <span class="token keyword">const</span> padding <span class="token operator">=</span>      <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">getStyle</span><span class="token punctuation">(</span>cellChild<span class="token punctuation">,</span> <span class="token string">'paddingLeft'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span>      <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">getStyle</span><span class="token punctuation">(</span>cellChild<span class="token punctuation">,</span> <span class="token string">'paddingRight'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      <span class="token punctuation">(</span>rangeWidth <span class="token operator">+</span> padding <span class="token operator">></span> cellChild<span class="token punctuation">.</span>offsetWidth <span class="token operator">||</span>        cellChild<span class="token punctuation">.</span>scrollWidth <span class="token operator">></span> cellChild<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>tooltip    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// TODO 会引起整个 Table 的重新渲染，需要优化</span>      <span class="token keyword">const</span> showTooltip <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tooltipContent <span class="token operator">=</span> cell<span class="token punctuation">.</span>innerText <span class="token operator">||</span> cell<span class="token punctuation">.</span>textContent        tooltip<span class="token punctuation">.</span>referenceElm <span class="token operator">=</span> cell        tooltip<span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>popper <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>tooltip<span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>popper<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">)</span>        tooltip<span class="token punctuation">.</span><span class="token function">doDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        tooltip<span class="token punctuation">.</span><span class="token function">setExpectedState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">activateTooltip</span><span class="token punctuation">(</span>tooltip<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>tooltip<span class="token punctuation">.</span>_timeoutEnter<span class="token punctuation">)</span>      tooltip<span class="token punctuation">.</span>_timeoutEnter <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token operator">!</span>tooltip<span class="token punctuation">.</span>expectedState <span class="token operator">&amp;&amp;</span> <span class="token function">showTooltip</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然啦，我没有直接替换，考虑到在不影响原有功能的情况下，我追加了一个参数 <code>keep-show-overflow-tooltip</code> 来实现这个需求。默认为关闭，即默认走默认逻辑，若开启则进入此逻辑。</p><p>再比如另外一个 BUG ，是 Select 组件在部分电脑上会出现抖动现象，一开始我是没办法自己复现的，当我在 issues 看到只要 Chrome 缩放调整至 110% 以上就可以复现，当时我都惊呆了，查看 DOM 也很明显发现是计算问题，一直在 <code>66px</code> <code>67px</code> 的变换跳跃……（不抖才怪了）</p><p>最后也是看到 <a href="https://github.com/ElemeFE/element/issues/13173#issuecomment-445740778" target="_blank" rel="noopener">#13173</a> ，采用将 <code>tags.clientHeight</code> 替换为 <code>tags.getBoundingClientRect().height</code> 得以解决问题。</p><p>这么一遭下来感觉 Element 确实和 Ant Design 还是有差距的，在看到 Element 上 1k 的 issues 也是倒吸一口凉气，况且这两个都是已关闭的问题。</p><p>还在团队中做了<a href="https://github.com/zongzi531/daily-learning/blob/master/share/TypeScript%20%E7%BB%99%E6%88%91%E4%BB%AC%E5%B8%A6%E6%9D%A5%E4%BA%86%E4%BB%80%E4%B9%88.pdf" target="_blank" rel="noopener">《TypeScript 给我们带来了什么》</a>分享，分享后我也回看了我的分享视频，在这次分享中，我依然有些小紧张，分享稿也准备的不是很充分，没有很全面的或者很大的给大家带来我想要的分享，希望在下一次的分享机会我更加努力的去准备，为大家带来更好的内容。</p><h2 id="x1f3c7-锻炼身体"><a href="#x1f3c7-锻炼身体" class="headerlink" title="&#x1f3c7; 锻炼身体"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8">&#x1f3c7;</span> 锻炼身体</h2><p>自进入我司起，之前制定的日常锻炼小目标开始逐渐没有完成，情有可原，在未来的日子里慢慢重新抓起这些小目标，动起来。每天也只花个 10 分钟左右而已，很轻松啦。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- no node --&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>加入体验技术部</title>
    <link href="https://zongzi531.com/2020/04/02/%E5%8A%A0%E5%85%A5%E4%BD%93%E9%AA%8C%E6%8A%80%E6%9C%AF%E9%83%A8/"/>
    <id>https://zongzi531.com/2020/04/02/加入体验技术部/</id>
    <published>2020-04-02T16:31:45.000Z</published>
    <updated>2021-05-26T05:37:48.776Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><a id="more"></a><blockquote><p>3 月选择了新的挑战，换了新单位，加入了体验技术部。<br>总的来说， 3 月没干啥事，只是争取在换单位间隙阅读了 Redux 相关的源码。<br>但是仔细回想，还学习了一些关于如何自己开发一个 CLI 的过程。<br>可是 <span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8">&#x1f3c7;</span> 锻炼身体这方面，有点懈怠了，这是一个不好的信号，只是上下班路上走路比平时多了一些而已。<br>以及 <span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">&#x1f4da;</span> 建立自己的前端知识体系暂时没有新的进展……<br>对了，我被安排了做技术分享，我会尽量好好准备，试着挑战自己。</p></blockquote><h2 id="x1f4d4-日本語学習計画"><a href="#x1f4d4-日本語学習計画" class="headerlink" title="&#x1f4d4; 日本語学習計画"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8">&#x1f4d4;</span> 日本語学習計画</h2><p>截至目前《新版 中日交流标准日本语 初级上、下》已学习 3 个单元，但是发现从第 2 单元开始到第 3 单位，对词汇量的逐渐生疏。</p><p>总有一种隐隐约约的感觉，这个计划会延期……</p><p>つづく</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- no node --&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>React Redux 源码学习</title>
    <link href="https://zongzi531.com/2020/03/23/react-redux%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <id>https://zongzi531.com/2020/03/23/react-redux源码学习/</id>
    <published>2020-03-23T17:06:07.000Z</published>
    <updated>2021-05-26T05:37:48.728Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><a id="more"></a><blockquote><p>继 Redux 源码学习之后，我们来看一看 React Redux 是如何将 Redux 和 React 组合起来的。<br>我正在阅读的则是 <code>7.2.0</code> 版本代码。</p></blockquote><p>我们依然围绕着 <code>src</code> 进行学习。可以看到源码中已经在使用 Hook 代码。如果你暂时还对 Hook 不是很了解的话，建议先前往 React 官网学习 Hook 内容。</p><p>从目录来看 <code>utils</code> 依然是简单的工具， <code>hooks</code> 下则是一些对外提供的 Hook ， <code>connect</code> 下则是我们每次都要使用的<strong>高阶组件</strong>函数， <code>components</code> 则也是我们每次都要使用的 <code>Provider</code> 组件。其中， <code>connect/connect.js</code> 其实是对 <code>components/connectAdvanced.js</code> 的封装。</p><p>示例代码中我会移除并省略掉一些逻辑代码以及一些我认为不那么重要的代码，即只展现我想要说明的内容。</p><p>有必要提到的是 <code>utils/batch.js</code> 和 <code>index.js</code> 中的部分源码，其中涉及到 React 协调中的批量更新，并且在 <code>utils/Subscription.js</code> 有使用到。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// utils/batch.js</span><span class="token keyword">let</span> batch <span class="token operator">=</span> callback <span class="token operator">=</span><span class="token operator">></span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> setBatch <span class="token operator">=</span> newBatch <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>batch <span class="token operator">=</span> newBatch<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> getBatch <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> batch<span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> setBatch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./utils/batch'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> unstable_batchedUpdates <span class="token keyword">as</span> batch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token function">setBatch</span><span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Subscription"><a href="#Subscription" class="headerlink" title="Subscription"></a>Subscription</h2><p>从上面我们可以看出 React Redux 这里使用的更新模式并不是“普通”的执行函数，而是依赖于 React DOM 的批量更新，作为了解学习即可，可以增进一些自己的思路。现在，让我们来看到 <code>utils/Subscription.js</code> 的源码：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createListenerCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 依赖于 React DOM 的批量更新</span>  <span class="token keyword">const</span> batch <span class="token operator">=</span> <span class="token function">getBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 监听器链表头和尾</span>  <span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">let</span> last <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token comment" spellcheck="true">// 典型的闭包结构</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 清空链表</span>    <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      first <span class="token operator">=</span> <span class="token keyword">null</span>      last <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 通知函数</span>    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 调用依赖于 React DOM 的批量更新</span>      <span class="token function">batch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> listener <span class="token operator">=</span> first        <span class="token keyword">while</span> <span class="token punctuation">(</span>listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>          listener<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          listener <span class="token operator">=</span> listener<span class="token punctuation">.</span>next        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 获取监听器列表</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> listeners <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">let</span> listener <span class="token operator">=</span> first      <span class="token keyword">while</span> <span class="token punctuation">(</span>listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>        listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>        listener <span class="token operator">=</span> listener<span class="token punctuation">.</span>next      <span class="token punctuation">}</span>      <span class="token keyword">return</span> listeners    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 订阅回调函数，添加至监听器链表</span>    <span class="token function">subscribe</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> isSubscribed <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token keyword">let</span> listener <span class="token operator">=</span> <span class="token punctuation">(</span>last <span class="token operator">=</span> <span class="token punctuation">{</span>        callback<span class="token punctuation">,</span>        next<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        prev<span class="token punctuation">:</span> last      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>listener<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>        listener<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> listener      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        first <span class="token operator">=</span> listener      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 返回取消订阅函数（典型的闭包结构）</span>      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isSubscribed <span class="token operator">||</span> first <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span>        isSubscribed <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token comment" spellcheck="true">// 将加入的监听器移除</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>listener<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>          listener<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> listener<span class="token punctuation">.</span>prev        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          last <span class="token operator">=</span> listener<span class="token punctuation">.</span>prev        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>listener<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>          listener<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> listener<span class="token punctuation">.</span>next        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          first <span class="token operator">=</span> listener<span class="token punctuation">.</span>next        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Subscription</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> parentSub<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>store <span class="token operator">=</span> store    <span class="token keyword">this</span><span class="token punctuation">.</span>parentSub <span class="token operator">=</span> parentSub    <span class="token keyword">this</span><span class="token punctuation">.</span>unsubscribe <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners <span class="token operator">=</span> nullListeners    <span class="token comment" spellcheck="true">// 绑定执行上下文</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleChangeWrapper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleChangeWrapper<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 添加监听器回调</span>  <span class="token function">addNestedSub</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">trySubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 监听器通知</span>  <span class="token function">notifyNestedSubs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 处理指定 API onStateChange</span>  <span class="token function">handleChangeWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>onStateChange<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onStateChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 是否尝试过订阅</span>  <span class="token function">isSubscribed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>unsubscribe<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 订阅</span>  <span class="token function">trySubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>unsubscribe<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>unsubscribe <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parentSub        <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parentSub<span class="token punctuation">.</span><span class="token function">addNestedSub</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChangeWrapper<span class="token punctuation">)</span>        <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChangeWrapper<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 创建监听器集合</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>listeners <span class="token operator">=</span> <span class="token function">createListenerCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 退订清除缓存</span>  <span class="token function">tryUnsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>unsubscribe<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>unsubscribe <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>listeners <span class="token operator">=</span> nullListeners    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h2><p>上面是一个订阅器的简单实现，也是 <code>Provider</code> 组件触发更新的原理，那么话不多说，我们来看到 <code>components</code> 目录下 <code>Provider.js</code> 的相关源码：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> ReactReduxContext <span class="token operator">=</span> <span class="token comment" spellcheck="true">/*#__PURE__*/</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">Provider</span><span class="token punctuation">(</span><span class="token punctuation">{</span> store<span class="token punctuation">,</span> context<span class="token punctuation">,</span> children <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> contextValue <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 实例化 Subscription</span>    <span class="token keyword">const</span> subscription <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subscription</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// API onStateChange 设置</span>    subscription<span class="token punctuation">.</span>onStateChange <span class="token operator">=</span> subscription<span class="token punctuation">.</span>notifyNestedSubs    <span class="token keyword">return</span> <span class="token punctuation">{</span>      store<span class="token punctuation">,</span>      subscription    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>store<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// Redux state 获取 API 调用 </span>  <span class="token keyword">const</span> previousState <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>store<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> subscription <span class="token punctuation">}</span> <span class="token operator">=</span> contextValue    <span class="token comment" spellcheck="true">// 尝试订阅并创建监听器集合</span>    subscription<span class="token punctuation">.</span><span class="token function">trySubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>previousState <span class="token operator">!==</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 若新旧 state 不一样则发起通知，执行监听器列表</span>      subscription<span class="token punctuation">.</span><span class="token function">notifyNestedSubs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 清除副作用</span>      subscription<span class="token punctuation">.</span><span class="token function">tryUnsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      subscription<span class="token punctuation">.</span>onStateChange <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>contextValue<span class="token punctuation">,</span> previousState<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 用户自定义 Context 优先</span>  <span class="token keyword">const</span> Context <span class="token operator">=</span> context <span class="token operator">||</span> ReactReduxContext  <span class="token comment" spellcheck="true">// contextValue 包含整个 Redux 实例和订阅器</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Context<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>contextValue<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Context<span class="token punctuation">.</span>Provider<span class="token operator">></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h2><p>看到这里其实已经明白 <code>Provider</code> 组件的整个逻辑，即依据 <code>store</code> 或 <code>previousState</code> 的变化触发订阅退订的生命周期以及通知更新操作。那么再和 <code>connect</code> 高阶组件函数配合实现 React Redux 的功能。显然，到了这里我想大家都应该能猜到， <code>Provider</code> 组件用于注入 Redux 并控制逻辑，<code>connect</code> 高阶组件函数来处理用户想要的 <code>store</code> 以 <code>props</code> 的形式传入。我们先来看到 <code>connectAdvanced.js</code> 的源码吧（下面内容有些多，我陪你一点点看下去）：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">connectAdvanced</span><span class="token punctuation">(</span>  <span class="token comment" spellcheck="true">/*    选择器工厂函数（默认官方提供）作用是生成类似这样的代码内容：    export default connectAdvanced((dispatch, options) => (state, props) => ({      thing: state.things[props.thingId],      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),    }))(YourComponent)  */</span>  selectorFactory<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 配置参数，官方已在 connect 进行封装（当然用户可以自己魔改），所以我们在使用的时候用的是 connect</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// the func used to compute this HOC's displayName from the wrapped component's displayName.</span>    <span class="token comment" spellcheck="true">// probably overridden by wrapper functions such as connect()</span>    getDisplayName <span class="token operator">=</span> name <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`ConnectAdvanced(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// shown in error messages</span>    <span class="token comment" spellcheck="true">// probably overridden by wrapper functions such as connect()</span>    methodName <span class="token operator">=</span> <span class="token string">'connectAdvanced'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// REMOVED: if defined, the name of the property passed to the wrapped element indicating the number of</span>    <span class="token comment" spellcheck="true">// calls to render. useful for watching in react devtools for unnecessary re-renders.</span>    renderCountProp <span class="token operator">=</span> undefined<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// determines whether this HOC subscribes to store changes</span>    shouldHandleStateChanges <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// REMOVED: the key of props/context to get the store</span>    storeKey <span class="token operator">=</span> <span class="token string">'store'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// REMOVED: expose the wrapped component via refs</span>    withRef <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// use React's forwardRef to expose a ref of the wrapped component</span>    forwardRef <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// the context consumer to use</span>    context <span class="token operator">=</span> ReactReduxContext<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// additional options are passed through to the selectorFactory</span>    <span class="token operator">...</span>connectOptions  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> Context <span class="token operator">=</span> context  <span class="token comment" spellcheck="true">// 典型的 HOC 写法</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">wrapWithConnect</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> wrappedComponentName <span class="token operator">=</span>      WrappedComponent<span class="token punctuation">.</span>displayName <span class="token operator">||</span> WrappedComponent<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token string">'Component'</span>    <span class="token keyword">const</span> displayName <span class="token operator">=</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span>wrappedComponentName<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 选择器工厂函数所需参数</span>    <span class="token keyword">const</span> selectorFactoryOptions <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>connectOptions<span class="token punctuation">,</span>      getDisplayName<span class="token punctuation">,</span>      methodName<span class="token punctuation">,</span>      renderCountProp<span class="token punctuation">,</span>      shouldHandleStateChanges<span class="token punctuation">,</span>      storeKey<span class="token punctuation">,</span>      displayName<span class="token punctuation">,</span>      wrappedComponentName<span class="token punctuation">,</span>      WrappedComponent    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// “ prue ”即一种模式，默认为开启。影响 Memo 相关内容，可以视做是一种性能优化</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> pure <span class="token punctuation">}</span> <span class="token operator">=</span> connectOptions    <span class="token keyword">const</span> usePureOnlyMemo <span class="token operator">=</span> pure <span class="token operator">?</span> useMemo <span class="token punctuation">:</span> callback <span class="token operator">=</span><span class="token operator">></span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 函数组件 ConnectFunction</span>    <span class="token keyword">function</span> <span class="token function">ConnectFunction</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// props 分类</span>      <span class="token keyword">const</span> <span class="token punctuation">[</span>propsContext<span class="token punctuation">,</span> forwardedRef<span class="token punctuation">,</span> wrapperProps<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> forwardedRef<span class="token punctuation">,</span> <span class="token operator">...</span>wrapperProps <span class="token punctuation">}</span> <span class="token operator">=</span> props        <span class="token keyword">return</span> <span class="token punctuation">[</span>props<span class="token punctuation">.</span>context<span class="token punctuation">,</span> forwardedRef<span class="token punctuation">,</span> wrapperProps<span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>props<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 选择默认 Context 或用户自己传入的 Context</span>      <span class="token keyword">const</span> ContextToUse <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> propsContext <span class="token operator">&amp;&amp;</span>          propsContext<span class="token punctuation">.</span>Consumer <span class="token operator">&amp;&amp;</span>          <span class="token function">isContextConsumer</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>propsContext<span class="token punctuation">.</span>Consumer <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span>          <span class="token operator">?</span> propsContext          <span class="token punctuation">:</span> Context      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>propsContext<span class="token punctuation">,</span> Context<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> contextValue <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>ContextToUse<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 典型的鸭子模型辨认法</span>      <span class="token keyword">const</span> didStoreComeFromProps <span class="token operator">=</span>        <span class="token function">Boolean</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>store<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">Boolean</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>store<span class="token punctuation">.</span>getState<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">Boolean</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>store<span class="token punctuation">.</span>dispatch<span class="token punctuation">)</span>      <span class="token keyword">const</span> didStoreComeFromContext <span class="token operator">=</span>        <span class="token function">Boolean</span><span class="token punctuation">(</span>contextValue<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>contextValue<span class="token punctuation">.</span>store<span class="token punctuation">)</span>      <span class="token keyword">const</span> store <span class="token operator">=</span> didStoreComeFromProps <span class="token operator">?</span> props<span class="token punctuation">.</span>store <span class="token punctuation">:</span> contextValue<span class="token punctuation">.</span>store      <span class="token comment" spellcheck="true">// props 选择器，对应源码为 finalPropsSelectorFactory 函数，可以理解为一个包装层</span>      <span class="token keyword">const</span> childPropsSelector <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">selectorFactory</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>dispatch<span class="token punctuation">,</span> selectorFactoryOptions<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* createChildSelector(store) */</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>store<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 订阅器及通知函数创建</span>      <span class="token keyword">const</span> <span class="token punctuation">[</span>subscription<span class="token punctuation">,</span> notifyNestedSubs<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shouldHandleStateChanges<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">/* NO_SUBSCRIPTION_ARRAY */</span>        <span class="token comment" spellcheck="true">// 实例化 Subscription</span>        <span class="token keyword">const</span> subscription <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subscription</span><span class="token punctuation">(</span>          store<span class="token punctuation">,</span>          didStoreComeFromProps <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> contextValue<span class="token punctuation">.</span>subscription        <span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 绑定 notifyNestedSubs 的执行上下文环境</span>        <span class="token keyword">const</span> notifyNestedSubs <span class="token operator">=</span> subscription<span class="token punctuation">.</span>notifyNestedSubs<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>          subscription        <span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>subscription<span class="token punctuation">,</span> notifyNestedSubs<span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>store<span class="token punctuation">,</span> didStoreComeFromProps<span class="token punctuation">,</span> contextValue<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// Determine what {store, subscription} value should be put into nested context, if necessary,</span>      <span class="token comment" spellcheck="true">// and memoize that value to avoid unnecessary context updates.</span>      <span class="token keyword">const</span> overriddenContextValue <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>didStoreComeFromProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> contextValue        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          <span class="token operator">...</span>contextValue<span class="token punctuation">,</span>          subscription        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>didStoreComeFromProps<span class="token punctuation">,</span> contextValue<span class="token punctuation">,</span> subscription<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> lastChildProps <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> lastWrapperProps <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span>wrapperProps<span class="token punctuation">)</span>      <span class="token keyword">const</span> childPropsFromStoreUpdate <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> renderIsScheduled <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 实际的 props</span>      <span class="token keyword">const</span> actualChildProps <span class="token operator">=</span> <span class="token function">usePureOnlyMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>          childPropsFromStoreUpdate<span class="token punctuation">.</span>current <span class="token operator">&amp;&amp;</span>          wrapperProps <span class="token operator">===</span> lastWrapperProps<span class="token punctuation">.</span>current        <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> childPropsFromStoreUpdate<span class="token punctuation">.</span>current        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// props 选择器，同包装层</span>        <span class="token keyword">return</span> <span class="token function">childPropsSelector</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> wrapperProps<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>store<span class="token punctuation">,</span> wrapperProps<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// Hook useEffect 或 useLayoutEffect</span>      <span class="token function">useIsomorphicLayoutEffect</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* captureWrapperProps */</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 用于更新最新的 props 相关</span>        lastWrapperProps<span class="token punctuation">.</span>current <span class="token operator">=</span> wrapperProps        lastChildProps<span class="token punctuation">.</span>current <span class="token operator">=</span> actualChildProps        renderIsScheduled<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token comment" spellcheck="true">// 根据条件通知</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>childPropsFromStoreUpdate<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>          childPropsFromStoreUpdate<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">null</span>          <span class="token function">notifyNestedSubs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// Our re-subscribe logic only runs when the store/subscription setup changes</span>      <span class="token function">useIsomorphicLayoutEffect</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* subscribeUpdates */</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shouldHandleStateChanges<span class="token punctuation">)</span> <span class="token keyword">return</span>        <span class="token keyword">let</span> didUnsubscribe <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token comment" spellcheck="true">// 检查更新函数</span>        <span class="token keyword">const</span> checkForUpdates <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>didUnsubscribe<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>          <span class="token keyword">const</span> latestStoreState <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// props 选择器（非包装层，可以理解为 impureFinalPropsSelector 函数，因为省略源码的关系，重名）</span>          <span class="token keyword">let</span> newChildProps <span class="token operator">=</span> <span class="token function">childPropsSelector</span><span class="token punctuation">(</span>            latestStoreState<span class="token punctuation">,</span>            lastWrapperProps<span class="token punctuation">.</span>current          <span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 如果 props 未变化，则此处无事可做 - 级联订阅更新</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>newChildProps <span class="token operator">===</span> lastChildProps<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>renderIsScheduled<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 通知</span>              <span class="token function">notifyNestedSubs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// props 变化，触发通知</span>            lastChildProps<span class="token punctuation">.</span>current <span class="token operator">=</span> newChildProps            childPropsFromStoreUpdate<span class="token punctuation">.</span>current <span class="token operator">=</span> newChildProps            renderIsScheduled<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token boolean">true</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 订阅 checkForUpdates</span>        subscription<span class="token punctuation">.</span>onStateChange <span class="token operator">=</span> checkForUpdates        subscription<span class="token punctuation">.</span><span class="token function">trySubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 首次检查</span>        <span class="token function">checkForUpdates</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 取消订阅函数用于返回</span>        <span class="token keyword">const</span> unsubscribeWrapper <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          didUnsubscribe <span class="token operator">=</span> <span class="token boolean">true</span>          subscription<span class="token punctuation">.</span><span class="token function">tryUnsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          subscription<span class="token punctuation">.</span>onStateChange <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> unsubscribeWrapper      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>store<span class="token punctuation">,</span> subscription<span class="token punctuation">,</span> childPropsSelector<span class="token comment" spellcheck="true">/* 包装层 */</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> renderedWrappedComponent <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">{</span><span class="token operator">...</span>actualChildProps<span class="token punctuation">}</span> ref<span class="token operator">=</span><span class="token punctuation">{</span>forwardedRef<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>forwardedRef<span class="token punctuation">,</span> WrappedComponent<span class="token punctuation">,</span> actualChildProps<span class="token punctuation">]</span>      <span class="token punctuation">)</span>      <span class="token keyword">const</span> renderedChild <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 性能优化标示，若为 false 则不重新渲染</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldHandleStateChanges<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>ContextToUse<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>overriddenContextValue<span class="token punctuation">}</span><span class="token operator">></span>              <span class="token punctuation">{</span>renderedWrappedComponent<span class="token punctuation">}</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>ContextToUse<span class="token punctuation">.</span>Provider<span class="token operator">></span>          <span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> renderedWrappedComponent      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>ContextToUse<span class="token punctuation">,</span> renderedWrappedComponent<span class="token punctuation">,</span> overriddenContextValue<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> renderedChild    <span class="token punctuation">}</span>    <span class="token keyword">const</span> Connect <span class="token operator">=</span> pure <span class="token operator">?</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span>ConnectFunction<span class="token punctuation">)</span> <span class="token punctuation">:</span> ConnectFunction    Connect<span class="token punctuation">.</span>WrappedComponent <span class="token operator">=</span> WrappedComponent    Connect<span class="token punctuation">.</span>displayName <span class="token operator">=</span> displayName    <span class="token comment" spellcheck="true">// 此处省略含有 React.forwardRef 相关的特殊场景下的代码内容，若感兴趣请移步至 Github 仓库查看</span>    <span class="token comment" spellcheck="true">// 关于 hoistStatics 请查看： Copies non-react specific statics from a child component to a parent component.</span>    <span class="token comment" spellcheck="true">// Similar to Object.assign, but with React static keywords blacklisted from being overridden.</span>    <span class="token keyword">return</span> <span class="token function">hoistStatics</span><span class="token punctuation">(</span>Connect<span class="token punctuation">,</span> WrappedComponent<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里， <code>connectAdvanced</code> 高阶组件函数的内容已阅读完，因为篇幅关系，我移除了部分代码，可能会导致理解不足，就像我在前面说的，这个高阶组件的功能就是如此，若大家想深入建议前往 Github 仓库查看，大部分内容是一些细节的处理。</p><p>是不是觉得内容有些爆炸，有些多。确实有些，不如，先去喝杯水，上个洗手间，放松一下，我们再继续。</p><p>我们在看到后面的源码（ <code>connect.js</code> ）之前需要先看一些内容，还记得 <code>connect</code> 函数执行的时候传入的参数类似于 <code>mapStateToProps</code> 或者 <code>mapDispatchToProps</code> 的过滤参数，源码中我会移除这部份内容，所以我在开头先来举例说明。</p><p>源码中以 <code>match</code> 函数来对参数进行识别，以条件选项最多的 <code>mapDispatchToProps</code> 为例子。</p><p>即对入参进行如下顺序校验，优先满足即返回：</p><ol><li><code>whenMapDispatchToPropsIsFunction</code> 传入识别为函数</li><li><code>whenMapDispatchToPropsIsMissing</code> 未传入</li><li><code>whenMapDispatchToPropsIsObject</code> 传入识别为对象</li></ol><p>在了解过这个后，我们来回到源码：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createConnect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  connectHOC <span class="token operator">=</span> connectAdvanced<span class="token comment" spellcheck="true">/* HOC */</span><span class="token punctuation">,</span>  mapStateToPropsFactories <span class="token operator">=</span> defaultMapStateToPropsFactories<span class="token punctuation">,</span>  mapDispatchToPropsFactories <span class="token operator">=</span> defaultMapDispatchToPropsFactories<span class="token punctuation">,</span>  mergePropsFactories <span class="token operator">=</span> defaultMergePropsFactories<span class="token punctuation">,</span>  selectorFactory <span class="token operator">=</span> defaultSelectorFactory<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 看到这里是不是少许熟悉了一些</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span>    mapStateToProps<span class="token punctuation">,</span>    mapDispatchToProps<span class="token punctuation">,</span>    mergeProps<span class="token punctuation">,</span>    <span class="token punctuation">{</span>      pure <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      areStatesEqual <span class="token operator">=</span> strictEqual<span class="token punctuation">,</span>      areOwnPropsEqual <span class="token operator">=</span> shallowEqual<span class="token punctuation">,</span>      areStatePropsEqual <span class="token operator">=</span> shallowEqual<span class="token punctuation">,</span>      areMergedPropsEqual <span class="token operator">=</span> shallowEqual<span class="token punctuation">,</span>      <span class="token operator">...</span>extraOptions    <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 分别进行入参识别</span>    <span class="token keyword">const</span> initMapStateToProps <span class="token operator">=</span> <span class="token function">match</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapStateToPropsFactories<span class="token punctuation">,</span> <span class="token string">'mapStateToProps'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> initMapDispatchToProps <span class="token operator">=</span> <span class="token function">match</span><span class="token punctuation">(</span>mapDispatchToProps<span class="token punctuation">,</span> mapDispatchToPropsFactories<span class="token punctuation">,</span> <span class="token string">'mapDispatchToProps'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> initMergeProps <span class="token operator">=</span> <span class="token function">match</span><span class="token punctuation">(</span>mergeProps<span class="token punctuation">,</span> mergePropsFactories<span class="token punctuation">,</span> <span class="token string">'mergeProps'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 对 connectAdvanced 的封装</span>    <span class="token keyword">return</span> <span class="token function">connectHOC</span><span class="token punctuation">(</span>selectorFactory<span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// used in error messages</span>      methodName<span class="token punctuation">:</span> <span class="token string">'connect'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// used to compute Connect's displayName from the wrapped component's displayName.</span>      getDisplayName<span class="token punctuation">:</span> name <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`Connect(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes</span>      shouldHandleStateChanges<span class="token punctuation">:</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// passed through to selectorFactory</span>      initMapStateToProps<span class="token punctuation">,</span>      initMapDispatchToProps<span class="token punctuation">,</span>      initMergeProps<span class="token punctuation">,</span>      pure<span class="token punctuation">,</span>      areStatesEqual<span class="token punctuation">,</span>      areOwnPropsEqual<span class="token punctuation">,</span>      areStatePropsEqual<span class="token punctuation">,</span>      areMergedPropsEqual<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// any extra options args can override defaults of connect or connectAdvanced</span>      <span class="token operator">...</span>extraOptions    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token comment" spellcheck="true">/*#__PURE__*/</span> <span class="token function">createConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么到此，我们已经看完 <code>connect</code> 函数的内容。</p><p>回到前面的内容，整个高阶组件函数是为了实现：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connectAdvanced</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  thing<span class="token punctuation">:</span> state<span class="token punctuation">.</span>things<span class="token punctuation">[</span>props<span class="token punctuation">.</span>thingId<span class="token punctuation">]</span><span class="token punctuation">,</span>  saveThing<span class="token punctuation">:</span> fields <span class="token operator">=</span><span class="token operator">></span> <span class="token function">dispatch</span><span class="token punctuation">(</span>actionCreators<span class="token punctuation">.</span><span class="token function">saveThing</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>thingId<span class="token punctuation">,</span> fields<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>YourComponent<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>类似于这样的代码，所以到目前为止是不是漏了点什么？是的，被你发现了。是 <code>selectorFactory</code> ：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">impureFinalPropsSelectorFactory</span><span class="token punctuation">(</span>  mapStateToProps<span class="token punctuation">,</span>  mapDispatchToProps<span class="token punctuation">,</span>  mergeProps<span class="token punctuation">,</span>  dispatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">impureFinalPropsSelector</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> ownProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">mergeProps</span><span class="token punctuation">(</span>      <span class="token function">mapStateToProps</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> ownProps<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">mapDispatchToProps</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">,</span> ownProps<span class="token punctuation">)</span><span class="token punctuation">,</span>      ownProps    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我省略了大部分优化代码，很直观的理解就是过滤、合并最终你想要的 <code>props</code> 。剩下关于源码中 Hook 即是一些简单的封装，这里就不做解读了，很简单，如果感兴趣的话，请移步至 Github 仓库查看，那么这次的 React Redux 源码学习到此，感谢阅读至此！</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- no node --&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://zongzi531.com/categories/React/"/>
    
    
      <category term="React" scheme="https://zongzi531.com/tags/React/"/>
    
      <category term="Redux" scheme="https://zongzi531.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>Redux 源码学习</title>
    <link href="https://zongzi531.com/2020/03/20/redux%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <id>https://zongzi531.com/2020/03/20/redux源码学习/</id>
    <published>2020-03-20T20:25:06.000Z</published>
    <updated>2021-05-26T05:37:48.728Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><a id="more"></a><blockquote><p>想着对 React 生态更深入的学习，况且 React 源码内容也不多的情况，来读一下他的源码内容。<br>目前 Redux 已经是 TypeScript 版本的源码，我正在阅读的则是 <code>4.0.4</code> 版本代码。</p></blockquote><p>很显然，可以看到这和 React 仓库一样，同样使用了 rollup 打包工具，也验证了 rollup 在开发库类仓库的优势，毕竟大厂都在用嘛。</p><p>我们先来看到 <code>package.json</code> ：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"redux"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"4.0.4"</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"lib/redux.js"</span><span class="token punctuation">,</span>  <span class="token property">"unpkg"</span><span class="token operator">:</span> <span class="token string">"dist/redux.js"</span><span class="token punctuation">,</span>  <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"es/redux.js"</span><span class="token punctuation">,</span>  <span class="token property">"types"</span><span class="token operator">:</span> <span class="token string">"types/index.d.ts"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我省略了大部分内容，可以看到开发团队针对不同使用场景，对外提供包对应的路径，比如使用 TypeScript 时，对应的则是 <code>types/index.d.ts</code> ，或者使用 ES6 模块化引入时则是 <code>es/redux.js</code> 。值得我们学习。</p><p>接下来，我们看到源码部分，整个源码学习内容，将围绕着 <code>src</code> 进行， <code>utils</code> 下的内容即一些简单的工具， <code>types</code> 下则是一些类型的定义。</p><p>示例代码中我会移除并省略掉一些逻辑代码和 TypeScript 相关的函数重载代码，以及一些我认为不那么重要的代码，即只展现我想要说明的内容。</p><p>那么我们先来看到 <code>createStore</code> 函数吧。</p><h2 id="createStore"><a href="#createStore" class="headerlink" title="createStore"></a>createStore</h2><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> createStore<span class="token operator">&lt;</span>  S<span class="token punctuation">,</span>  A <span class="token keyword">extends</span> <span class="token class-name">Action</span><span class="token punctuation">,</span>  Ext <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  StateExt <span class="token operator">=</span> never<span class="token operator">></span><span class="token punctuation">(</span>  reducer<span class="token punctuation">:</span> Reducer<span class="token operator">&lt;</span>S<span class="token punctuation">,</span> A<span class="token operator">></span><span class="token punctuation">,</span>  preloadedState<span class="token operator">?</span><span class="token punctuation">:</span> PreloadedState<span class="token operator">&lt;</span>S<span class="token operator">></span> <span class="token operator">|</span> StoreEnhancer<span class="token operator">&lt;</span>Ext<span class="token punctuation">,</span> StateExt<span class="token operator">></span><span class="token punctuation">,</span>  enhancer<span class="token operator">?</span><span class="token punctuation">:</span> StoreEnhancer<span class="token operator">&lt;</span>Ext<span class="token punctuation">,</span> StateExt<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> Store<span class="token operator">&lt;</span>ExtendState<span class="token operator">&lt;</span>S<span class="token punctuation">,</span> StateExt<span class="token operator">></span><span class="token punctuation">,</span> A<span class="token punctuation">,</span> StateExt<span class="token punctuation">,</span> Ext<span class="token operator">></span> <span class="token operator">&amp;</span> Ext <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 接受的 reducer</span>  <span class="token keyword">let</span> currentReducer <span class="token operator">=</span> reducer  <span class="token comment" spellcheck="true">// 预加载 state</span>  <span class="token keyword">let</span> currentState <span class="token operator">=</span> preloadedState as S  <span class="token comment" spellcheck="true">// 订阅队列</span>  <span class="token keyword">let</span> currentListeners<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 下一个订阅队列，看起来更像是订阅队列的副本，下面我会来介绍他和订阅队列的不解之谜</span>  <span class="token keyword">let</span> nextListeners <span class="token operator">=</span> currentListeners  <span class="token comment" spellcheck="true">// 检查并创建这个副本的函数</span>  <span class="token keyword">function</span> <span class="token function">ensureCanMutateNextListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextListeners <span class="token operator">===</span> currentListeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 拷贝到一个新的数组引用，可以理解为 [...currentListeners] 使得 nextListeners !== currentListeners</span>      nextListeners <span class="token operator">=</span> currentListeners<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 获得 state</span>  <span class="token keyword">function</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> S <span class="token punctuation">{</span>    <span class="token keyword">return</span> currentState as S  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 订阅函数</span>  <span class="token keyword">function</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>listener<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ensureCanMutateNextListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 操作订阅队列副本，与 currentListeners 之间不受影响</span>    nextListeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 返回取消订阅函数</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">ensureCanMutateNextListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 同样的效果</span>      <span class="token keyword">const</span> index <span class="token operator">=</span> nextListeners<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>      nextListeners<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>      currentListeners <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 看到这里你是不是会想，创建这个副本的目的是什么？</span>    <span class="token comment" spellcheck="true">// 官方给到的解释：This prevents any bugs around consumers calling subscribe/unsubscribe in the middle of a dispatch.</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// dispatch 函数</span>  <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>    currentState <span class="token operator">=</span> <span class="token function">currentReducer</span><span class="token punctuation">(</span>currentState<span class="token punctuation">,</span> action<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 遍历通知订阅队列，将 currentListeners 赋值为“最新”的队列</span>    <span class="token keyword">const</span> listeners <span class="token operator">=</span> <span class="token punctuation">(</span>currentListeners <span class="token operator">=</span> nextListeners<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> listeners<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> listener <span class="token operator">=</span> listeners<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> action  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 替换 reducer 函数</span>  <span class="token keyword">function</span> replaceReducer<span class="token operator">&lt;</span>NewState<span class="token punctuation">,</span> NewActions <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token operator">></span><span class="token punctuation">(</span>    nextReducer<span class="token punctuation">:</span> Reducer<span class="token operator">&lt;</span>NewState<span class="token punctuation">,</span> NewActions<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">:</span> Store<span class="token operator">&lt;</span>ExtendState<span class="token operator">&lt;</span>NewState<span class="token punctuation">,</span> StateExt<span class="token operator">></span><span class="token punctuation">,</span> NewActions<span class="token punctuation">,</span> StateExt<span class="token punctuation">,</span> Ext<span class="token operator">></span> <span class="token operator">&amp;</span> Ext <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 更新 reducer</span>    <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>currentReducer as unknown<span class="token punctuation">)</span> as Reducer<span class="token operator">&lt;</span>      NewState<span class="token punctuation">,</span>      NewActions    <span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=</span> nextReducer    <span class="token comment" spellcheck="true">// 同初始化功能一致，即生成 currentState ，下面代码中会提及</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> ActionTypes<span class="token punctuation">.</span>REPLACE <span class="token punctuation">}</span> as A<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>store as unknown<span class="token punctuation">)</span> as Store<span class="token operator">&lt;</span>      ExtendState<span class="token operator">&lt;</span>NewState<span class="token punctuation">,</span> StateExt<span class="token operator">></span><span class="token punctuation">,</span>      NewActions<span class="token punctuation">,</span>      StateExt<span class="token punctuation">,</span>      Ext    <span class="token operator">></span> <span class="token operator">&amp;</span>      Ext  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 初始化，生成 currentState ，即调用 getState 函数返回的内容， ActionTypes.INIT 即可以理解为私有类型，不会影响到你自己写的 reducer 毕竟里面包含了随机数...</span>  <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> ActionTypes<span class="token punctuation">.</span>INIT <span class="token punctuation">}</span> as A<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 暴露的 store 对象</span>  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    dispatch<span class="token punctuation">:</span> dispatch as Dispatch<span class="token operator">&lt;</span>A<span class="token operator">></span><span class="token punctuation">,</span>    subscribe<span class="token punctuation">,</span>    getState<span class="token punctuation">,</span>    replaceReducer<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 观察者方法这里不做解读，可以理解为对 subscribe 的封装</span>    <span class="token punctuation">[</span>$$observable<span class="token punctuation">]</span><span class="token punctuation">:</span> observable  <span class="token punctuation">}</span> as unknown<span class="token punctuation">)</span> as Store<span class="token operator">&lt;</span>ExtendState<span class="token operator">&lt;</span>S<span class="token punctuation">,</span> StateExt<span class="token operator">></span><span class="token punctuation">,</span> A<span class="token punctuation">,</span> StateExt<span class="token punctuation">,</span> Ext<span class="token operator">></span> <span class="token operator">&amp;</span> Ext  <span class="token keyword">return</span> store<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么到此，我们看到了整个 <code>createStore</code> 函数的实现过程以及返回的内容。</p><p>这里我来简单的代过 <code>compose</code> 函数，也是业界的常用实现，不是很明白其功能的同学可以简单看到这段代码即可：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token punctuation">(</span>funcs as <span class="token punctuation">:</span> <span class="token keyword">Function</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来，我们来看看 <code>combineReducers</code> 的实现，你可以把这个函数理解为对 <code>reducer</code> 的合并，当然函数名就是这个意思。</p><h2 id="combineReducers"><a href="#combineReducers" class="headerlink" title="combineReducers"></a>combineReducers</h2><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span>reducers<span class="token punctuation">:</span> ReducersMapObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> reducerKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>reducers<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 用于 combination 函数中使用所需，收集的有效 reducers</span>  <span class="token keyword">const</span> finalReducers<span class="token punctuation">:</span> ReducersMapObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> reducerKeys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> key <span class="token operator">=</span> reducerKeys<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> reducers<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      finalReducers<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> reducers<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 收集的 keys</span>  <span class="token keyword">const</span> finalReducerKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>finalReducers<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">combination</span><span class="token punctuation">(</span>    state<span class="token punctuation">:</span> StateFromReducersMapObject<span class="token operator">&lt;</span><span class="token keyword">typeof</span> reducers<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    action<span class="token punctuation">:</span> AnyAction  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> hasChanged <span class="token operator">=</span> <span class="token keyword">false</span>    <span class="token comment" spellcheck="true">// 新的 state</span>    <span class="token keyword">const</span> nextState<span class="token punctuation">:</span> StateFromReducersMapObject<span class="token operator">&lt;</span><span class="token keyword">typeof</span> reducers<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 遍历 keys</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> finalReducerKeys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> key <span class="token operator">=</span> finalReducerKeys<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token keyword">const</span> reducer <span class="token operator">=</span> finalReducers<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token keyword">const</span> previousStateForKey <span class="token operator">=</span> state<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token comment" spellcheck="true">// 从遍历中更新 state</span>      <span class="token keyword">const</span> nextStateForKey <span class="token operator">=</span> <span class="token function">reducer</span><span class="token punctuation">(</span>previousStateForKey<span class="token punctuation">,</span> action<span class="token punctuation">)</span>      nextState<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> nextStateForKey      hasChanged <span class="token operator">=</span> hasChanged <span class="token operator">||</span> nextStateForKey <span class="token operator">!==</span> previousStateForKey    <span class="token punctuation">}</span>    hasChanged <span class="token operator">=</span>      hasChanged <span class="token operator">||</span> finalReducerKeys<span class="token punctuation">.</span>length <span class="token operator">!==</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span>length    <span class="token comment" spellcheck="true">// 返回 state 或新的 state</span>    <span class="token keyword">return</span> hasChanged <span class="token operator">?</span> nextState <span class="token punctuation">:</span> state  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在我们看完 <code>reducer</code> 的组合工具函数后，我们来看到绑定执行上下文的语法糖函数 <code>bindActionCreators</code> 。</p><h2 id="bindActionCreators"><a href="#bindActionCreators" class="headerlink" title="bindActionCreators"></a>bindActionCreators</h2><p>实现代码很少，即绑定执行上下文环境 <code>this</code> 。具体使用场景，可以看到官网 API 文档 <a href="https://redux.js.org/api/bindactioncreators#bindactioncreatorsactioncreators-dispatch" target="_blank" rel="noopener">bindActionCreators(actionCreators, dispatch)</a> ，那么直接看到源码：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> bindActionCreator<span class="token operator">&lt;</span>A <span class="token keyword">extends</span> <span class="token class-name">AnyAction</span> <span class="token operator">=</span> AnyAction<span class="token operator">></span><span class="token punctuation">(</span>  actionCreator<span class="token punctuation">:</span> ActionCreator<span class="token operator">&lt;</span>A<span class="token operator">></span><span class="token punctuation">,</span>  dispatch<span class="token punctuation">:</span> Dispatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>actionCreator<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">bindActionCreators</span><span class="token punctuation">(</span>  actionCreators<span class="token punctuation">:</span> ActionCreator<span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span> <span class="token operator">|</span> ActionCreatorsMapObject<span class="token punctuation">,</span>  dispatch<span class="token punctuation">:</span> Dispatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> actionCreators <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">bindActionCreator</span><span class="token punctuation">(</span>actionCreators<span class="token punctuation">,</span> dispatch<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> boundActionCreators<span class="token punctuation">:</span> ActionCreatorsMapObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> actionCreators<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> actionCreator <span class="token operator">=</span> actionCreators<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> actionCreator <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      boundActionCreators<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">bindActionCreator</span><span class="token punctuation">(</span>actionCreator<span class="token punctuation">,</span> dispatch<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> boundActionCreators<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，我们来看到中间件函数 <code>applyMiddleware</code> 。</p><h2 id="applyMiddleware"><a href="#applyMiddleware" class="headerlink" title="applyMiddleware"></a>applyMiddleware</h2><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>  <span class="token operator">...</span>middlewares<span class="token punctuation">:</span> Middleware<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> StoreEnhancer<span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>createStore<span class="token punctuation">:</span> StoreCreator<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>S<span class="token punctuation">,</span> A <span class="token keyword">extends</span> <span class="token class-name">AnyAction</span><span class="token operator">></span><span class="token punctuation">(</span>    reducer<span class="token punctuation">:</span> Reducer<span class="token operator">&lt;</span>S<span class="token punctuation">,</span> A<span class="token operator">></span><span class="token punctuation">,</span>    <span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>    <span class="token keyword">let</span> dispatch<span class="token punctuation">:</span> Dispatch <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'...'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> middlewareAPI<span class="token punctuation">:</span> MiddlewareAPI <span class="token operator">=</span> <span class="token punctuation">{</span>      getState<span class="token punctuation">:</span> store<span class="token punctuation">.</span>getState<span class="token punctuation">,</span>      dispatch<span class="token punctuation">:</span> <span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> chain <span class="token operator">=</span> middlewares<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>middleware <span class="token operator">=</span><span class="token operator">></span> <span class="token function">middleware</span><span class="token punctuation">(</span>middlewareAPI<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 对 store.dispatch 进行改写，将其包装在中间件的最后一层，以实现中间件的功能</span>    dispatch <span class="token operator">=</span> compose<span class="token operator">&lt;</span><span class="token keyword">typeof</span> dispatch<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">...</span>chain<span class="token punctuation">)</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>dispatch<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>store<span class="token punctuation">,</span>      dispatch    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OK， Redux 源码学习完了，是不是没看够，确实！</p><p>这才是精妙的库设计，简洁的代码实现强大的功能，那么这次没过瘾没关系，下次我们来品一品 Redux 是如何和 React 结合在一起的吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- no node --&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://zongzi531.com/categories/React/"/>
    
    
      <category term="React" scheme="https://zongzi531.com/tags/React/"/>
    
      <category term="Redux" scheme="https://zongzi531.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>疫情中的二月</title>
    <link href="https://zongzi531.com/2020/03/01/%E7%96%AB%E6%83%85%E4%B8%AD%E7%9A%84%E4%BA%8C%E6%9C%88/"/>
    <id>https://zongzi531.com/2020/03/01/疫情中的二月/</id>
    <published>2020-03-01T09:27:35.000Z</published>
    <updated>2021-05-26T05:37:48.828Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><a id="more"></a><blockquote><p><a href="https://zh.wikipedia.org/wiki/2019%E5%86%A0%E7%8B%80%E7%97%85%E6%AF%92%E7%97%85%E7%96%AB%E6%83%85" target="_blank" rel="noopener">[维基]</a>新型冠状病毒（COVID-19）是这个春节的主角，大家并没有心思过这个春节，而是全民参与抗击疫情，我们能做的就是尽量少接触，少出门。<br>如果一定要出门，必须戴口罩，配合检查，这也是对大家负责，对我们自己负责。<br>在这个危难时刻，我们能做的或许只有那么多。<br>希望疫情能够尽快的结束，我们的生活能够恢复正常。<br>希望前线的医护人员战士们，多注意保护自己的身体，健健康康，平平安安的回来。<br>中国加油！武汉加油！杭州加油！</p></blockquote><h2 id="x1f4d4-日本語学習計画"><a href="#x1f4d4-日本語学習計画" class="headerlink" title="&#x1f4d4; 日本語学習計画"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8">&#x1f4d4;</span> 日本語学習計画</h2><p>截至目前《新版 中日交流标准日本语 初级上、下》已学习 2 个单元，自己用的是堆积式学习法，总之加油吧！</p><p>关于番剧的观看进度：</p><ul><li>アズールレーン The Animation [第 10 话]<ul><li>現在放送中のアニメ「アズールレーン」の、第11話、第12話が2020年3月に放送延期になることが発表された。<a href="https://akiba-souken.com/article/42970/" target="_blank" rel="noopener">LINK</a></li></ul></li><li>冴えない彼女の育てかた [第 3 话]</li><li>真·中華一番！[共 12 话 <strong>完成</strong>]</li><li>[新追日剧] ドラマパラビ『来世ではちゃんとします』 [第 7 话]</li></ul><h3 id="来世ではちゃんとします"><a href="#来世ではちゃんとします" class="headerlink" title="来世ではちゃんとします"></a>来世ではちゃんとします</h3><p><img src="%E6%9D%A5%E4%B8%96%E3%81%A7%E3%81%AF%E3%81%A1%E3%82%83%E3%82%93%E3%81%A8%E3%81%97%E3%81%BE%E3%81%99.jpg" alt="来世ではちゃんとします"></p><ul><li><a href="https://www.tv-tokyo.co.jp/raisechan/intro/" target="_blank" rel="noopener">官网</a></li></ul><h4 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h4><p>物語の主人公はCG制作会社「スタジオデルタ」の社員・大森桃江(27)。性に奔放で5人のセフレがいる性依存系女子。「セックスは金のかからない趣味」と割り切っている反面、本命の男性の彼女には決してなれないという事実にどうしようもない切なさと虚しさを感じています。しかしそんな自分の人生を「まーいっか。来世ではちゃんとしますということで」とどこかクールに見つめている、承認欲求と好奇心と寂しさの狭間を生きるアラサー女性です。</p><h2 id="x1f3ae-游戏人生"><a href="#x1f3ae-游戏人生" class="headerlink" title="&#x1f3ae; 游戏人生"></a><span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f3ae.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ae.png?v8">&#x1f3ae;</span> 游戏人生</h2><h3 id="Red-Dead-Redemption-2"><a href="#Red-Dead-Redemption-2" class="headerlink" title="Red Dead Redemption 2"></a>Red Dead Redemption 2</h3><p><img src="Red_Dead_Redemption_2.jpg" alt="Red Dead Redemption 2"></p><p>美国，1899年。当警察开始打击残余亡命之徒的帮派时，蛮荒的西部时代迎来了最后的黄昏。不愿投降或是屈服的人，只有死路一条。亚瑟·摩根和范德林德帮众在黑水镇的一次抢劫行动遭遇了始料不及的意外，他们不得不逃离这个西部小镇。联邦侦探和全国顶尖的赏金猎人在他们的身后穷追不舍，亚瑟一行人必须在广袤蛮荒的美国腹地上四处劫掠、挣扎求生。而帮派内部的矛盾分化日渐加深，摆在亚瑟面前的将是他无法避免的抉择：究竟是选择自己的理想，还是选择效忠于抚养了自己的帮派。</p><p><strong>点评</strong></p><p>《荒野大镖客：救赎2》，一款游戏大作，实得好评！</p><p>截至目前游戏时间近200小时，已通关。</p><p>刚购入的时候，好友就和我说，别急着做主线任务，我在第3章时，疯狂的做支线。当支线做的差不多时，我开始回到主线任务，“很快”就到了第6章，真的很快。</p><p>亚瑟得了肺结核，我看出了他脸上的沧桑、疲惫，和一颗想要救赎的心，他开始做好事，试着做一个好人。</p><p>我开始变得舍不得他，我不希望他死去，我开始想着办法不做主线任务，我开始尝试穿越黑水镇去往地图左下角，哪怕是猎杀传说动物、收集植物也行，但是我根本无法控制剧情的走向，我知道亚瑟最后还是会走向死亡。</p><p>这款游戏非常真实，不论是对西部世界的体现，或是人物的真实写照，确实是一款大作！</p><p>就是PC优化糟糕了点……</p><h3 id="第3次スーパーロボット大戦Z-天獄篇"><a href="#第3次スーパーロボット大戦Z-天獄篇" class="headerlink" title="第3次スーパーロボット大戦Z 天獄篇"></a>第3次スーパーロボット大戦Z 天獄篇</h3><p>「第３次スーパーロボット大戦Ｚ」は２部作であり、その第２部に当たるのが今回の「天獄篇」です。<br>今作にて、「スーパーロボット大戦Ｚ」シリーズが完結します。</p><hr><p>春节期间体验荒野大镖客此等神作。<br>拾起长年未玩的游戏超级机器人大战 Z 天狱篇将其通关，目前通关一周目，打算三周目获取所有成就，体验超级机器人大战 V 。<br>同样的，把耗时 2 年之久的 Master Grade 1/100 Hi-Nu Gundam Ver.Ka 和重装包拼完了。<br>看了几本国产剧。<br>买了 Nintendo Switch™ 加强续航版，舞力全开 2020 ，路易鬼屋 3 ，牧场物语都挺好玩的。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- no node --&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>对 Redux 的代码分割</title>
    <link href="https://zongzi531.com/2020/02/27/%E5%AF%B9%20Redux%20%E7%9A%84%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2/"/>
    <id>https://zongzi531.com/2020/02/27/对 Redux 的代码分割/</id>
    <published>2020-02-27T14:22:21.000Z</published>
    <updated>2021-05-26T05:37:48.788Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><a id="more"></a><p>相信大家都知道利用 React 脚手架 Create React App 构建出来的 React 项目是基于 Webpack 构建的。那么官方也提供了关于拆分 React 代码，实现代码分割的功能。</p><p>那么需要使用到的就是 <code>import()</code> 也就是 dynamic import 动态导入功能，配合 <code>React.lazy</code> 进行使用，即可实现代码分割。</p><p>关于这一块部分如果你还没有很好的了解，建议你可以看一下<a href="https://zh-hans.reactjs.org/docs/code-splitting.html#code-splitting" target="_blank" rel="noopener">《代码分割 - React》</a>。</p><p>在我司项目的快迭代环境下，我也选择这套方案来进行优化，但是我在后续的开发过程中发现，这套解决方案并不完善，因为对于 Redux ，我并没有做到代码分割，当迭代过程中仅涉及到修改 Redux reducer 时会出现大批量代码更新。</p><p>因为项目中仅使用了一个 <code>store</code> 来使用 Redux ，当里面出现一个细小的变化会导致整个 <code>store</code> 的打包 <code>hash</code> 值变化，从而影响到大部分被分割的 React 代码，包括很多并未做修改的文件。</p><p>所以我开始着手对 Redux 进行代码分割，官方<a href="https://redux.js.org/recipes/code-splitting/" target="_blank" rel="noopener">《Code Splitting - Redux》</a>也提供了很好的支持。</p><p>基于此，我开始修改项目中的代码， 依照官方的例子开始修改：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * rootReducer 即认为静态 reducer * asyncReducers 即认为需要合并的异步 reducer */</span><span class="token keyword">const</span> createReducer <span class="token operator">=</span> asyncReducers <span class="token operator">=</span><span class="token operator">></span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token operator">...</span>rootReducer<span class="token punctuation">,</span>  <span class="token operator">...</span>asyncReducers<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 暴露给外界的注入函数</span><span class="token keyword">export</span> <span class="token keyword">let</span> injectReducer<span class="token punctuation">;</span><span class="token keyword">const</span> configureStore <span class="token operator">=</span> preloadedState <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>    <span class="token function">combineReducers</span><span class="token punctuation">(</span>rootReducer<span class="token punctuation">)</span><span class="token punctuation">,</span>    preloadedState<span class="token punctuation">,</span>    middleware  <span class="token punctuation">)</span><span class="token punctuation">;</span>  store<span class="token punctuation">.</span>asyncReducers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 注入函数</span>  injectReducer <span class="token operator">=</span> store<span class="token punctuation">.</span>injectReducer <span class="token operator">=</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> asyncReducer<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>asyncReducers<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 赋值</span>    store<span class="token punctuation">.</span>asyncReducers<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> asyncReducer<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 合并 reducer 并调用 replaceReducer 方法更新</span>    store<span class="token punctuation">.</span><span class="token function">replaceReducer</span><span class="token punctuation">(</span><span class="token function">createReducer</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>asyncReducers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> store<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> configureStore<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对原先的创建 <code>store</code> 过程进行了更新，暴露了 <code>injectReducer</code> 函数用于异步注入，结合 <code>import()</code> 就可以实现对 React 的代码分割，真是非常喜悦。</p><p>那我们来看看怎么用：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> lazy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> injectReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/store/configureStore'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  Something<span class="token punctuation">:</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* webpackChunkName: 'Something' */</span><span class="token string">'@/reducers/something'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">injectReducer</span><span class="token punctuation">(</span><span class="token string">'something'</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* webpackChunkName: 'Something' */</span><span class="token string">'@/containers/Something'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法也特别简单，即动态导入后注入 reducer 即可，以实现代码分割。</p><p>那么到此，相对实现了一个比较完善的 React + Redux 的代码分割解决方案，可以以页面维度，或者你想要的细度去控制代码分割的程度以应对项目的快迭代。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- no node --&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://zongzi531.com/categories/React/"/>
    
    
      <category term="Redux" scheme="https://zongzi531.com/tags/Redux/"/>
    
      <category term="Code Splitting" scheme="https://zongzi531.com/tags/Code-Splitting/"/>
    
      <category term="代码分割" scheme="https://zongzi531.com/tags/%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2/"/>
    
  </entry>
  
</feed>
