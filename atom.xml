<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zong</title>
  
  
  <link href="https://zongzi531.com/atom.xml" rel="self"/>
  
  <link href="https://zongzi531.com/"/>
  <updated>2021-11-04T02:26:09.688Z</updated>
  <id>https://zongzi531.com/</id>
  
  <author>
    <name>Zong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>想去日本旅游</title>
    <link href="https://zongzi531.com/2021/11/01/%E6%83%B3%E5%8E%BB%E6%97%A5%E6%9C%AC%E6%97%85%E6%B8%B8/"/>
    <id>https://zongzi531.com/2021/11/01/%E6%83%B3%E5%8E%BB%E6%97%A5%E6%9C%AC%E6%97%85%E6%B8%B8/</id>
    <published>2021-11-01T14:10:07.000Z</published>
    <updated>2021-11-04T02:26:09.688Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><p>想法见标题，因为疫情的关系，真的是有点难受。</p><p>想去横滨看元祖高达，也不知道疫情啥时候才能好，估计到时候横滨的元祖高达就被搬走了……</p><p>这个月，在公司内部做了一次《现代 Web 应用的资源及网络优化分享》分享，跟之前的分享区别就是面向公司的分享。</p><p>分享内容罗列了当前 Web 应用场景的下资源及网络优化的策略及方向，以及在微前端场景下的实战经验。</p><p>因为国庆放假回来就三周的工作时间，主要忙于内部低代码平台的开发。</p><p>最近让我感触最深的就是对产品的理解，如何做好产品设计等等方面。</p><p>类似于解决问题的最短路径，虽然不是很专业无法归纳，但是能很明显感受到，新产品就像大家一起精心培育出来的一样，试着想去让产品变得更好用。</p><p>回看今年的任务进度，当前已经是 Q4 ，并且即将过半。</p><p>今年的任务也没完成多少，不过没关系。</p><p>我觉得尽力而为也不错，如果遇到调整我也可以尽快的调整我的行进路线。</p><p>总之加油。</p><h2 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h2><ul><li><strong>「日本語学習計画」</strong>：语法及词汇 <strong>第1页</strong></li><li><strong>「计算机图形学」</strong>：材质与外观</li><li><strong>「锻炼身体」</strong>：简单运动 <strong>待加强</strong></li><li><strong>「ECMA-262」</strong>：6.2.4 The Reference Specification Type</li></ul>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>天还没凉快起来</title>
    <link href="https://zongzi531.com/2021/10/09/%E5%A4%A9%E8%BF%98%E6%B2%A1%E5%87%89%E5%BF%AB%E8%B5%B7%E6%9D%A5/"/>
    <id>https://zongzi531.com/2021/10/09/%E5%A4%A9%E8%BF%98%E6%B2%A1%E5%87%89%E5%BF%AB%E8%B5%B7%E6%9D%A5/</id>
    <published>2021-10-09T13:32:03.000Z</published>
    <updated>2021-11-04T02:26:09.680Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><p>讲道理，现在的气候真的太奇怪了，都 10 月份了，还这么热……</p><blockquote><p>摄于 20210912 06:43 酒店餐厅给老婆拍早餐</p></blockquote><h2 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h2><ul><li><strong>「日本語学習計画」</strong>：语法及词汇 <strong>第1页</strong></li><li><strong>「计算机图形学」</strong>：材质与外观</li><li><strong>「锻炼身体」</strong>：简单运动 <strong>待加强</strong></li><li><strong>「ECMA-262」</strong>：6.2.4 The Reference Specification Type</li></ul><p>我自己都不太看的下去了，任务进度停滞的问题很明显，但是其实也还好。毕竟 9 月是我和老婆的大喜日子，我们结婚咯！～</p><p>最近基本都在置办婚礼相关的事情，现在有了我们的家，当然要好好经营啦，毕竟家更重要！～</p><h2 id="最近的工作"><a href="#最近的工作" class="headerlink" title="最近的工作"></a>最近的工作</h2><p>除去基本的服务业务，主要精力就是在开发内部的低代码平台，作为核心开发目前主要负责整体插件系统设计与实现、逻辑编排功能设计与实现等核心功能实现和工作安排及进度推进。</p><p>当然了，还需要负责内部 UI 库的代码审查、缺陷修复和发布更新工作，期间还持续更新了内部标准代码风格。</p><h2 id="一些新思考"><a href="#一些新思考" class="headerlink" title="一些新思考"></a>一些新思考</h2><p>在 8 月底做了一次技术分享，因为对技术的掌握片面导致没有把技术讲透彻，被大佬指导了一番……</p><p>有关 C / C# 的技术掌握自己确实欠缺（亏我在大学里还学过 C# ……）</p><p>包括在最近看到的一篇文章<a href="https://zhuanlan.zhihu.com/p/417534662">《用Rust锈化Vue Compiler》</a>，引用作者的一段回复：</p><blockquote><p>先学好TS理解现代编程语言的概念，然后学Rust（主要以clone和Rc为主）。再学习C语言和阅读C++的笑话集，之后可以学习Rust的生命周期部分</p></blockquote><p>其实可以想到，前端除了之前想到的几个路线，往广义上去思考其实往更深去学习，需要具备 C / C++ 、计算机基础这类知识储备，不能狭隘的只停留在 JavaScript 上，因为从某些角度想虽然 JavaScript 能实现很多，但是仍然是被大佬们包装过的语言，如果要想更自由的去控制计算机，这条路线是一条可以深入并且长期发展的路线。</p><p>并且当未来发生某些变化时，具备如此底层的知识在切换技术栈时也会变得轻松。</p>]]></content>
    
    
    <summary type="html">讲道理，现在的气候真的太奇怪了，都 10 月份了，还这么热……</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Hello Swing</title>
    <link href="https://zongzi531.com/2021/09/01/hello-swing/"/>
    <id>https://zongzi531.com/2021/09/01/hello-swing/</id>
    <published>2021-09-01T13:10:37.000Z</published>
    <updated>2021-11-04T02:26:09.612Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><p>这个月周末都在学习摇摆舞，也是抱着尝试一下的心态报名学习的，不过真的在跳摇摆舞的时候心情会很愉悦，哈哈，尤其是和老婆一起跳的时候。</p><h2 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h2><ul><li><strong>「日本語学習計画」</strong>：语法及词汇 <strong>第1页</strong></li><li><strong>「计算机图形学」</strong>：材质与外观</li><li><strong>「锻炼身体」</strong>：简单运动 <strong>待加强</strong></li><li><strong>「ECMA-262」</strong>：6.2.4 The Reference Specification Type</li></ul>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>《进阶 TypeScript 之初见泛型》</title>
    <link href="https://zongzi531.com/2021/08/20/%E8%BF%9B%E9%98%B6TypeScript%E4%B9%8B%E5%88%9D%E8%A7%81%E6%B3%9B%E5%9E%8B/"/>
    <id>https://zongzi531.com/2021/08/20/%E8%BF%9B%E9%98%B6TypeScript%E4%B9%8B%E5%88%9D%E8%A7%81%E6%B3%9B%E5%9E%8B/</id>
    <published>2021-08-20T09:28:10.000Z</published>
    <updated>2021-11-04T02:26:09.744Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><blockquote><p><a href="https://github.com/zongzi531/daily-learning/blob/master/share/%E8%BF%9B%E9%98%B6%20TypeScript%20%E4%B9%8B%E5%88%9D%E8%A7%81%E6%B3%9B%E5%9E%8B.pdf">链接</a></p></blockquote><p>大家晚上好，特别为大家做这次分享，因为现在几个团队都开始使用 TypeScript 了，那么除了在日常的 TypeScript 基础使用外，我想给大家带来一些 TypeScript 的进阶使用，那么本次为大家分享有关泛型的进阶入门技巧。</p><p>那我们现在就从为什么会有泛型来说什么是泛型，让我们看到这段代码，我们定义了一个 <code>identity</code> 函数，他用来处理 <code>number</code> 类型的数据，并返回 <code>number</code> 类型的数据。再来看到下一段代码，当这个函数要处理另外的类型的时候，我们不得不定义另外的类型，比如在 <code>number</code> 的基础上添加 <code>string | Array&lt;string&gt;</code> 等等类型，当然这里可以用到函数重载的概念，不过我这里要硬生生的引出泛型。</p><p>最后我们来看到这段代码，我们可以在使用的时候借助 TypeScript 的类型推断自动来使用，或者说我们可以传入类型来定义我们想要的类型，比如 <code>identity&lt;boolean&gt;(true)</code> ，这就是泛型。</p><p>我给大家摘抄了官方提供的全局泛型，见 <a href="https://www.typescriptlang.org/docs/handbook/utility-types.html">Utility Types</a> 。</p><p>官方提供的这些泛型可以说使用起来非常的方便，并且大家在日常开发当中也用到了许多，那么如何自己书写泛型呢？从这里开始将是本次分享的重点。</p><p>我们来看到例子1，这里的 <code>isString</code> 并没有 <code>typeof value === &#39;string&#39;</code> 来的好用，因为 <code>isString</code> 不能进行类型推断，有同学可能会说，我在下面对 <code>el</code> 使用断言，从代码运行上来说，这确实没什么问题。但是既然使用了 TypeScript ，就应该让类型推断变的更自然，而不是用断言来解决问题，这样和写 JavaScript 又有什么区别呢？那么其实很简单，我们将函数返回的 <code>boolean</code> 修改成 <code>value is string</code> 这样就可以实现类型推断了。</p><p>是不是很有趣，再进阶一步讲，我们是不是可以将这个 <code>isString</code> 函数改造一下，是他变成一个更通用的泛型。</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">function</span> isSomething <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> value is T<span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">isSomething</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// isSomething&lt;number></span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token function">isSomething</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// isSomething&lt;string></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>非常的妙是不是。再来看到例子2，假设我们要写一个样式对象，但是我们需要自己考虑兼容性，比如会加入前缀 <code>webkit</code> ，那么我们自然会一个个把他们写出来，但是在维护类型的时候会带来很多繁琐的问题，比如说我修改 <code>flex</code> 的类型时，我还需要顺带修改 <code>webkit</code> 前缀的对应的类型，当这种场景变得多又复杂时，代码的维护成本就会逐渐提升。</p><p>那么当然是有办法解决解决这样的问题的，首先我们需要利用一些手段将 <code>flex</code> 转换成 <code>webkitFlex</code> ，然后将 <code>interface</code> 的 key 换成我们想要的内容。</p><p>到目前为止，我们已经可以实现 key 的替换，但是原来的 key 却不见了，所以我们这里需要借助 <code>| P</code> 来完成，来实现我们的需求。到目前为止我们已经完成了我们想要的，我们再来进阶一步讲，把问题变得有趣，我们这里希望经过转换后， <code>lineHeight</code> 是不会加 <code>webkit</code> 前缀的，怎么实现呢。</p><pre class="line-numbers language-typescript"><code class="language-typescript">type WebkitKey<span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token operator">></span> <span class="token operator">=</span> K <span class="token keyword">extends</span> <span class="token string">'lineHeight'</span> <span class="token operator">?</span> never <span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`webkit$&amp;#123;Capitalize&lt;K>&amp;#125;`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样，我们就可以实现新的需求，当然了这里还是可以结合例子1进行进阶。</p><pre class="line-numbers language-typescript"><code class="language-typescript">type ExcludeWebkitKey <span class="token operator">=</span> <span class="token string">'lineHeight'</span> <span class="token operator">|</span> <span class="token string">'something you need.'</span>type WebkitKey<span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">,</span> E <span class="token operator">=</span> ExcludeWebkitKey<span class="token operator">></span> <span class="token operator">=</span> K <span class="token keyword">extends</span> <span class="token class-name">E</span> <span class="token operator">?</span> never <span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`webkit$&amp;#123;Capitalize&lt;K>&amp;#125;`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>哈哈，是不是也非常的有趣。确实，就是这么有趣。</p><p>那么我们来看到例子3，我们如何可以在 <code>methods</code> 下的方法中获得到 <code>data</code> 返回的类型呢，我这边摘抄了官网的例子，大家可以看一下。</p><p>其实我们的例子和官网的区别就是官网是个对象，而我们是个函数，我们只要把 <code>D</code> 修改成 <code>() =&gt; D</code> 就可以了。</p><p>那么本次的分享就到这里，后面我也会尝试总结更多的技巧分享到大家。</p>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Share" scheme="https://zongzi531.com/categories/Share/"/>
    
    
    <category term="TypeScript" scheme="https://zongzi531.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>持续挺进</title>
    <link href="https://zongzi531.com/2021/08/01/%E6%8C%81%E7%BB%AD%E6%8C%BA%E8%BF%9B/"/>
    <id>https://zongzi531.com/2021/08/01/%E6%8C%81%E7%BB%AD%E6%8C%BA%E8%BF%9B/</id>
    <published>2021-08-01T13:39:29.000Z</published>
    <updated>2021-11-04T02:26:09.688Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><h2 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h2><ul><li><strong>「日本語学習計画」</strong>：语法及词汇 <strong>第1页</strong></li><li><strong>「计算机图形学」</strong>：材质与外观</li><li><strong>「锻炼身体」</strong>：简单运动 <strong>待加强</strong></li><li><strong>「ECMA-262」</strong>：6.1.7.3 Invariants of the Essential Internal Methods</li><li><strong>「<code>Type&lt;Challenge[]&gt;</code>」</strong>：<img src="https://camo.githubusercontent.com/8aa86fec69f7058be373c9d85c7a81801a934668476172dd4b3d48e4a05b5538/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d3135312545332538332542425175657279253230537472696e672532305061727365722d623131623864" alt="151・Query String Parser"></li><li><strong>「OKR工作法」</strong></li></ul><blockquote><p><code>Type&lt;Challenge[]&gt;</code> 进入到 <img src="https://camo.githubusercontent.com/4c893b9915ad480e68f7b53b53e2d84a4914ea1f9ed0a45593eb5606dfb73043/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f65787472656d652d31322d623131623864" alt="extreme"> 模式，后面的题目暂时先不做了，等进阶一段时间再继续尝试吧，计划以这个挑战为例，做一次有关 TypeScript 进阶的技术分享，争取今年做 3 次分享。</p></blockquote><h2 id="OKR工作法"><a href="#OKR工作法" class="headerlink" title="OKR工作法"></a>OKR工作法</h2><p>在读完 OKR工作法后，会印象更深刻，因为目前团队的模式已经基于 OKR 实践了近 1 年的时间，也能看到确实多多少少有影响到团队的成员。总结来说，OKR就是让团队聚焦在优先级最高的任务上，并且会在阶段性同步任务进度，可以以更快的响应速度进行任务调整，避免将精力转移到不重要的任务上。同样需要具备，任务的描述需要是激进的，有挑战的。而不是轻松可以完成的或不可能完成的。</p><p>其实可以发现，在我个人每年的任务目标上，确实有列不少想做的事情，也同样分着优先级，同样都是具备挑战性的。在我一样样将任务完成时，会带有激情和成就感。</p><h2 id="微前端资源共享优化"><a href="#微前端资源共享优化" class="headerlink" title="微前端资源共享优化"></a>微前端资源共享优化</h2><p>在之前发现微前端构建后，重复资源没有利用起来的情况下，对构建流程进行优化，利用 <code>externals</code> + <code>html-webpack-plugin</code> 将子应用公共资源使用 CDN 替换。</p><p>目前对内部 3 个平台进行改造优化，实现资源大小，缩小 70% 。构建速度提升 40% 。</p><p>其实本来想采用 <code>splitChunks</code> 的方案来抽离应用中的公共模块，但是这不符合资源共享的特征，并且在实践过程中发现成本远高于现在实现的方案。</p><h2 id="低代码中台搭建平台核心功能开发"><a href="#低代码中台搭建平台核心功能开发" class="headerlink" title="低代码中台搭建平台核心功能开发"></a>低代码中台搭建平台核心功能开发</h2><p>当前低代码平台可以说是非常火热，同样的我们内部也在早前就萌生了低代码平台提效业务的想法，但是作为开发的我们，在每一次碰撞思维的时候，太过容易发散，在最近我们拉拢了一个产品来参与到我们的项目，确实是明智之选，产品很好的收拢了我们发散的思维，和我们共同确认了我们的任务优先级，有序的推进平台的开发进度。</p><p>回顾起来，产品的加入，有效的理清楚了我们发散的思路，有规范的合规了产品的生命周期，感受起来其实也有点像 OKR ，总之，从产品身上学习了不少经验。</p><p>也同样的，我参与了市场竞品的分析和比较，那么回到本次的主题。我负责核心（ CORE ）的功能开发，整体基于插件体系和发布订阅进行设计，将左侧插件栏、顶部工具栏、右侧配置栏，以及中间画布结合，通过插件体系和发布订阅进行组合。</p><p>值得高兴的是，目前核心功能的开发即将进入尾声，结合同事画布的开发配合，可以进入迭代开发的进度了。</p><h2 id="Element-Plus"><a href="#Element-Plus" class="headerlink" title="Element Plus"></a>Element Plus</h2><p>和作者有谈论到为何在源码中会出现 <code>TODO: change it to symbol</code> ，本来打算提一个 PR 的，但是采用 <code>string</code> 其实是有历史原因的，因为在目前单独发包的时候，如果使用 <code>Symbol</code> 的话，会出现 <code>Symbol</code> 不同的情况。</p><p>那么其实这算是历史遗留问题，我们内部在 Element Plus 基础上已经换成了 workspace 的发包模式，如可以通过 <code>yarn add @element-plus/affix</code> 进行单独安装，而本身的 <code>element-plus</code> 则是将这些子包以依赖的形式关联。理论上这没问题，有待进一步测试和实践，我们拭目以待吧。</p><p>再回到需求方面， Element Plus 也在切换到 CSS Var 和 SVG Icon 等等，当然内部我们已经在使用 CSS Var 并完成了一套主题切换服务，比如切换暗黑模式。</p>]]></content>
    
    
    <summary type="html">OKR工作法</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>油断中……</title>
    <link href="https://zongzi531.com/2021/07/01/%E6%B2%B9%E6%96%AD%E4%B8%AD/"/>
    <id>https://zongzi531.com/2021/07/01/%E6%B2%B9%E6%96%AD%E4%B8%AD/</id>
    <published>2021-07-01T13:22:09.000Z</published>
    <updated>2021-11-04T02:26:09.720Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><h2 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h2><ul><li><strong>「日本語学習計画」</strong>：语法及词汇 <strong>第1页</strong></li><li><strong>「计算机图形学」</strong>：材质与外观</li><li><strong>「锻炼身体」</strong>：简单运动 <strong>待加强</strong></li><li><strong>「ECMA-262」</strong>：6.1.7.3 Invariants of the Essential Internal Methods</li><li><strong>「<code>Type&lt;Challenge[]&gt;</code>」</strong>：651・Length of String 2</li></ul><p>这里其实得批评一下自己，日语的学习从今年年初开始就一直停滞不前，面对文法和词汇退缩了。ECMA 规范虽然有在阅读，但是进度还是太慢了，因为 6 月已过，规范却连一半都没读到。总体从任务来说，真的较去年太松散了！（虽然今年可能确实没多少时间做，给自己找借口中……）</p><h2 id="工程化的实践"><a href="#工程化的实践" class="headerlink" title="工程化的实践"></a>工程化的实践</h2><p>借助内部组件库的开发机会，包揽了构建和发布的工作，学习 ElementPlus 的构建代码（特别感谢鸡哥的耐心指导），采用多进程构建，并且结合自身组件库的需求，虽然同样采用 monorepo 的包管理方式，但是与 ElementPlus 不同的是每一个组件都进行独立的构建和发布，并非统一构建在根目录的 <code>es</code> 和 <code>lib</code> 下，而是构建在 <code>packages</code> 下组件们的 <code>es</code> 和 <code>lib</code> 下，并且进行了独立的依赖配置。</p><p>也遇到了与 ElementPlus 一样的问题，生成的 <code>d.ts</code> 文件存在路径问题，则按照上述的场景，重新编写了 <code>build:type</code> 的工程化代码。</p><p>同样的也提供了 ESM/CJS/UMD 的构建文件，并且因为上述的场景区别，重新编写了 <code>babel</code> 按需引入插件，实现以下 3 种按需引入方式：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 伪代码</span><span class="token keyword">import</span> ElementPlus<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> ElButton<span class="token punctuation">,</span> locale <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'element-plus'</span><span class="token keyword">import</span> ElSelect <span class="token keyword">from</span> <span class="token string">'@element-plus/select'</span><span class="token comment" spellcheck="true">// babel 转换后</span><span class="token keyword">import</span> ElementPlus<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> ElButton<span class="token punctuation">,</span> locale <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'element-plus'</span><span class="token keyword">import</span> ElSelect <span class="token keyword">from</span> <span class="token string">'@element-plus/select'</span><span class="token keyword">import</span> <span class="token string">'@element-plus/theme-chalk/lib/index.css'</span> <span class="token comment" spellcheck="true">// 全量</span><span class="token keyword">import</span> <span class="token string">'@element-plus/theme-chalk/lib/button.css'</span> <span class="token comment" spellcheck="true">// 仅 button</span><span class="token keyword">import</span> <span class="token string">'@element-plus/theme-chalk/lib/select.css'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然说内部组件库的初版功能大体是参考 ElementPlus 的，不过会在未来让内部组件库变得更适合我司，并且计划推进组合式 API 来代替原来的二次封装业务组件。</p><p>在学习过程中接触到 esbuild ，可算是对性能有了新的认识，使用其构建会大大提升构建效率，可算是前端工程化里的一颗新新力量了，也同样计划在后期改善构建效率。</p><p>也同样的，对于内部组件库计划推广和实行更多的计划（当然这里就不会多说了）。</p><p>突然想起一点， ElementPlus 的 TypeScript 代码没有开启严格模式，真的改起来有点头疼，虽然我只是在这里说，没有去提 PR 。</p><h2 id="NO-CODE"><a href="#NO-CODE" class="headerlink" title="NO CODE"></a>NO CODE</h2><p>再来谈一谈零代码这个概念，内部成立了一个小组在推进零代码。并且这个零代码强就强在可以结合我们自己的微前端架构和微前端动态构建平台直出业务到业务。</p><p>用户可以简单的进行拖拽、组合等等一系列操作（反正不用写代码），组合出新的页面或页面集合，结合上述系统，直出到业务。</p><p>并且零代码的架构设计采用开放的插件模式，安全的沙箱模式等设计模式组成。</p><p>总之，正在开发中……</p><p>值得期待！</p><h2 id="x1f4da-建立自己的前端知识体系"><a href="#x1f4da-建立自己的前端知识体系" class="headerlink" title="&#x1f4da; 建立自己的前端知识体系"></a><span class="github-emoji" alias="books" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">&#x1f4da;</span> 建立自己的前端知识体系</h2><p>回到这个话题，虽然好几个月没有聊起过，但是从整体来说还是有在慢慢的推进，只不过文章开始提到的那些进度有些缓慢……希望可以在下半年抓起来（加油）！</p>]]></content>
    
    
    <summary type="html">这里其实得批评一下自己，日语的学习从今年年初开始就开始停滞不前，面对文法和词汇退缩了。ECMA 规范虽然有...</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>人生新阶段</title>
    <link href="https://zongzi531.com/2021/06/01/%E4%BA%BA%E7%94%9F%E6%96%B0%E9%98%B6%E6%AE%B5/"/>
    <id>https://zongzi531.com/2021/06/01/%E4%BA%BA%E7%94%9F%E6%96%B0%E9%98%B6%E6%AE%B5/</id>
    <published>2021-06-01T10:02:32.000Z</published>
    <updated>2021-11-04T02:26:09.648Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><blockquote><p>女朋友变成老婆咯！～</p></blockquote><h2 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h2><ul><li><strong>「日本語学習計画」</strong>：语法及词汇 <strong>第1页</strong></li><li><strong>「计算机图形学」</strong>：材质与外观</li><li><strong>「锻炼身体」</strong>：简单运动 <strong>待加强</strong></li><li><strong>「ECMA-262」</strong>：6.1.6.1.1 Number::unaryMinus (x)</li></ul><p>这个月的工作主要是保障业务能够按时上线，空闲之余开发内部组件库 Vue 3 版本，同时给 element-plus 提了些 PR 。</p><p>那么接下来我会负责开发组件库的打包及发布功能工作，同时负责组件库的开发规划。</p><p>同时会参与内部新项目的架构设计及底层功能实现。</p><blockquote><p>这个月，没啥内容可以说，但又想说些什么……</p></blockquote><p>更加深刻的感受到基础的重要性，需要学习的知识还是无穷无尽呀！</p>]]></content>
    
    
    <summary type="html">女朋友变成老婆咯！～</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>《追求优雅的代码之用设计模式让代码更优雅》</title>
    <link href="https://zongzi531.com/2021/05/25/%E8%BF%BD%E6%B1%82%E4%BC%98%E9%9B%85%E7%9A%84%E4%BB%A3%E7%A0%812/"/>
    <id>https://zongzi531.com/2021/05/25/%E8%BF%BD%E6%B1%82%E4%BC%98%E9%9B%85%E7%9A%84%E4%BB%A3%E7%A0%812/</id>
    <published>2021-05-25T09:25:57.000Z</published>
    <updated>2021-11-04T02:26:09.744Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><blockquote><p><a href="https://github.com/zongzi531/daily-learning/blob/master/share/%E8%BF%BD%E6%B1%82%E4%BC%98%E9%9B%85%E7%9A%84%E4%BB%A3%E7%A0%812.pdf">链接</a></p></blockquote><p>大家晚上好，很高兴能够为大家带来这次分享，不好意思鸽了一下，业务太忙了。本次为大家分享的主题是追求优雅的代码之用设计模式让代码更优雅。</p><p>讲到设计模式，大家一定有使用过和了解过，关于什么是设计模式，我总结了一句话：场景下的“最佳”解决方案。这里的最佳我给他划了一个下划线是因为他是在某个场景某个情况（某个时空）下的最佳解决方案，并且这里的最佳也是相对的。</p><p>所以设计模式，他存在的目的也很简单。</p><p>为了复用代码、提升可维护性、提升性能等等…… 总之，就是让你的代码更优雅。</p><p>可以说是无处不在，处处都存在设计模式。那么我找了几个设计模式为切入点，为大家介绍使用设计模式如何让你的代码更优雅。</p><p>观察者模式，浏览器环境的事件监听就使用了这个模式，当然 DOM 事件触发后执行注册过的回调函数，并且实现一对多的通知功能，也体现出观察者模式的优势就是可以在任意代码位置进行订阅或解除订阅。</p><p>比如让我们来看到观察者模式，一般初学者容易忽略的使用技巧导致后期排查问题费了很多时间，其实凡是遇到观察者模式，就一定会有订阅和解除订阅，而初学者特别容易忘记的就是解除订阅而产生重复的通知，从而产生问题。</p><p>原型模式，相信大家都很熟悉，JavaScript 就是基于原型设计的语言。这个例子不是很恰当，也不是很直观，不过没关系，我就是想简单介绍一下这个模式。大家看一下即可，Zong 在实例化以后可以调用原型 Human 的方法。</p><p>再来说到一些原型链的问题，我找了一个比较常见的例子，就是 hasOwnProperty 这个方法，我们看到代码……</p><blockquote><p>这里使用到的 Father 和 Child 命名空间并不恰当，不属于继承关系。</p></blockquote><p>尝试看到这段代码……</p><p>尝试看到这段代码……</p><p>Mixin 模式，我们来看到这段代码，代码中 Class 类沿用原型模式的例子，而 mixin 则是类似“人”的一些通用能力的复用，如 sayHi 和 sleep ，可以用在不同的“人”上。使用 Mixin 可以扩展功能，看到代码第 22 行。我们可以使实例化后的 zong1 获得 sayHi 的功能，当然问题也同样暴露出来了，那就是原有的 sleep 被 Mixin 中的 sleep 覆盖。他对原有的类造成了污染，所以使用 Mixin 模式的时候要格外小心，因为或许你一个人注意也无济于事，当项目经由多人协作时，不熟悉项目获不熟悉 Mixin 的开发者使用或不使用 Mixin 都会产生不小的影响。</p><p>那么如此容易出现问题的 Mixin 模式在目前也有不少的解决方案，如 Vue 采用 Composition API ，React 采用高阶组件（HOC）也就是高阶函数来解决问题，推荐大家在平时开发时采用此类设计模式解决问题。</p><p>水了一会时间，上面我挑选了几个设计模式和大家进行了简单的介绍，其他的设计模式有兴趣的同学可以通过网上查阅和学习，就简单说到这里了。那么接下来，分享一些我自己的经验之谈，当然因为时间紧迫加上平时没有将一些技巧及时总结下来，导致短时间内没回想起多少经验，比如设计模式带来的好处、如何组合设计模式提供特殊场景下的解决方案。</p><p>在日常的 B 端开发过程中，相信大家见的最多的就是 CRUD 基本操作了。也相信大家已经厌倦了 CV 的操作，并且这样做非常的不优雅，所以大家会想办法抽离并抽象这部分 CRUD 的代码，最早接触到的设计模式就是 Mixin 模式，在 React 或 Vue 中都有 Mixin 的使用方法，非常的方便。当然了，前面提到了 Mixin 的缺陷也是必然存在的，说起来也很不好意思，比如我刚入职那会在改公司项目的时候，就是因为不熟悉项目，所以没有充分很好的利用 Mixin ，而全部自己手写了一套 CRUD 代码，当我写完后我才发现居然可以直接使用 Mixin ，讲实话非常的难过。</p><p>当然了，这已经成为历史。现在我们可以拥抱高阶组件、Composition API 来真正的抽象所需要的代码，让我们写的代码变得优雅起来。</p><p>目前 Composition API 基本支持 Vue 2 和 Vue 3 ，建议大家可以尝试使用起来，嘿嘿，安利一波优雅的心态。</p><p>说了这么多，所以类似于高阶函数、组合式API他们只是简单的解决了 CV 问题吗？</p><ol><li>高效开发</li><li>专注调试（当出现程序缺陷时，可以只在关键的代码位置进行调试，这时候就体现出单元测试的重要性了，所以必要的时候还是要写单元测试噢～）</li><li>高安全性（这一点是基于单元测试的，如果说你抽象出来的代码包含了较为完整的测试用例和较高的覆盖率的话，你所抽象的代码将会显得可靠。）</li><li>易用易维护（这一点与前面没有较大的关联，他体现在你抽离的代码自身是否应用了比较好的设计模式，比如使用插件模式设计功能等等……）</li><li>低代码基石（这一点是我认为在近段时间就可以落地的想法，当大家把业务中的逻辑，像是 CRUD 做到合理的抽象、安全性的保障，那么他就是低代码平台的基石，低代码平台或零代码平台就是依托于此，让非专业开发人员完成 CRUD 等业务逻辑的组合。）</li></ol><p>那么这个场景下使用设计模式解决问题，可以带来这些好处。当然在其他场景下也同样的会有另外的好处。</p><p>总之，就和没有绝对的对错一样，没有绝对的优雅，所以坚持你的坚持，定会有所成果。</p><p>其实身边，还有很多可以提升代码优雅，让你的代码变得优雅的地方和机会，有兴趣的同学可以，如果愿意的话，我们可以在日常工作中多多讨论此类问题。</p>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Share" scheme="https://zongzi531.com/categories/Share/"/>
    
    
    <category term="JavaScript" scheme="https://zongzi531.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>The Next Target</title>
    <link href="https://zongzi531.com/2021/05/01/the-next-target/"/>
    <id>https://zongzi531.com/2021/05/01/the-next-target/</id>
    <published>2021-05-01T15:15:37.000Z</published>
    <updated>2021-11-04T02:26:09.624Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><blockquote><p>提前完成了 17 年定下的 30 岁目标，也证明了当年离开浙商银行的正确决定。<br>的确，年轻的可能性很大！付出终归会有回报。</p></blockquote><h2 id="新目标"><a href="#新目标" class="headerlink" title="新目标"></a>新目标</h2><ul><li>35 岁前，有一份轻松快乐的副业</li><li>35 岁，打稳主业基础，尝试更多突破</li></ul><h2 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h2><ul><li><strong>「日本語学習計画」</strong>：语法及词汇 <strong>第1页</strong></li><li><strong>「计算机图形学」</strong>：材质与外观</li><li><strong>「锻炼身体」</strong>：简单运动 <strong>待加强</strong></li><li><strong>「ECMA-262」</strong>：5.2.3.4 ReturnIfAbrupt Shorthands</li><li><strong>「内部技术分享」</strong>：计划5月中旬 <strong>主题《追求优雅的代码之用设计模式让代码更优雅》</strong></li></ul><h2 id="TypeScript-进阶"><a href="#TypeScript-进阶" class="headerlink" title="TypeScript 进阶"></a>TypeScript 进阶</h2><p>有关 TypeScript 的面试问题，其实很难提问。因为自己掌握的也只是很浅的知识，为了更深入的理解 TypeScript ，所以我尝试开始做 <code>Type&lt;Challenge[]&gt;</code> 的题目，目前做到 medium 部分，确实在编写泛型层面有了简单的突破，计划将挑战尽快做完，做到更理解 TypeScript 。</p><h2 id="内部组件库阶段性感受"><a href="#内部组件库阶段性感受" class="headerlink" title="内部组件库阶段性感受"></a>内部组件库阶段性感受</h2><p>在使用过 PostCSS 来编写组件库后有个很明显的感受就是，它不像 Sass 这样更具备编程性， PostCSS 更像是 JavaScript 中的 polyfills 的角色，应该说更像是 Babel 的角色。</p><p>所以，从组件库开发的角度来说，PostCSS 和 Sass 更适合组合使用。</p><p>虽然说这次的技术方案只采用了 PostCSS ，并且开发体验并没有如此之好，不过这或许是更了解 PostCSS 的一次尝试，更有可能接触和编写 PostCSS Plugin 的一次机会。</p><p>PS：每天早上看 PR ，效率最高～</p>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>时光荏苒</title>
    <link href="https://zongzi531.com/2021/04/01/%E6%97%B6%E5%85%89%E8%8D%8F%E8%8B%92/"/>
    <id>https://zongzi531.com/2021/04/01/%E6%97%B6%E5%85%89%E8%8D%8F%E8%8B%92/</id>
    <published>2021-04-01T09:30:25.000Z</published>
    <updated>2021-11-04T02:26:09.696Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><blockquote><p>这么快入职一周年了，其实我更想表达的是时间不够。<br>除了工作、生活、陪伴家人，自己的时间确确实实变少了，或许这就是长大了。<br>应该承担起更多的责任，加油吧～<br>本想说一堆废话，但是被我删掉了，所以加油继续努力即可，向前向上！</p></blockquote><h2 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h2><ul><li><strong>「日本語学習計画」</strong>：语法及词汇 <strong>第1页</strong></li><li><strong>「计算机图形学」</strong>：材质与外观</li><li><strong>「锻炼身体」</strong>：简单运动 <strong>待加强</strong></li><li><strong>「ECMA-262」</strong>：5.1.3 The Numeric String Grammar</li><li><strong>「内部技术分享」</strong>：计划5月中旬</li></ul><h2 id="内部技术贡献"><a href="#内部技术贡献" class="headerlink" title="内部技术贡献"></a>内部技术贡献</h2><ul><li>基于 Vue 3.0 + TypeScript 开发 Vue 组件库/负责相关组件 PR 评审</li><li>微前端动态构建平台</li><li>专利发明</li></ul>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>新动力</title>
    <link href="https://zongzi531.com/2021/03/01/%E6%96%B0%E5%8A%A8%E5%8A%9B/"/>
    <id>https://zongzi531.com/2021/03/01/%E6%96%B0%E5%8A%A8%E5%8A%9B/</id>
    <published>2021-03-01T15:51:30.000Z</published>
    <updated>2021-11-04T02:26:09.692Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><blockquote><p>讲实话，最近有些焦虑……一直在思考人为什么活着，为 什么活着？<br>这里就不深入了，看看春节月我都做了些什么吧～</p></blockquote><h2 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h2><ul><li><strong>「日本語学習計画」</strong>：语法及词汇 <em>仅学了 <strong>1</strong> 页</em></li><li><strong>「计算机图形学」</strong>：材质与外观 <em>停滞</em></li><li><strong>「锻炼身体」</strong>：简单运动，爬公司楼梯、散步</li></ul><blockquote><p>自己好懒惰啊，动漫疯狂看，游戏疯狂玩。就是没办法坚持上面的事情。愤怒！<br>始终相信万事都不难，贵在坚持，只是我没坚持住……</p></blockquote><h2 id="ECMA-262-进度"><a href="#ECMA-262-进度" class="headerlink" title="ECMA-262 进度"></a>ECMA-262 进度</h2><p>阅读版本：ECMAScript® 2020 language specification, 11th edition (June 2020)</p><p>讲实话，看英文文章大多借助翻译工具加自己的理解，虽然不能很完整的还原细节（大概率会漏）。不过没关系，至少对大致有了认识。</p><p>目前进度：<a href="https://262.ecma-international.org/11.0/#sec-organization-of-this-specification">4.4 Organization of This Specification</a></p><p>摘抄内容：</p><blockquote><p>The remainder of this specification is organized as follows:<br>Clause 5 defines the notational conventions used throughout the specification.<br>Clauses 6-9 define the execution environment within which ECMAScript programs operate.<br>Clauses 10-16 define the actual ECMAScript programming language including its syntactic encoding and the execution semantics of all language features.<br>Clauses 17-26 define the ECMAScript standard library. They include the definitions of all of the standard objects that are available for use by ECMAScript programs as they execute.<br>Clause 27 describes the memory consistency model of accesses on SharedArrayBuffer-backed memory and methods of the Atomics object.</p></blockquote><p>到目前为止，规范的内容已进行了介绍，后续将是对规范中的细节进行讲解，我们敬请期待吧。</p><h2 id="CSS3-三角函数实现-2-5D-动效实践"><a href="#CSS3-三角函数实现-2-5D-动效实践" class="headerlink" title="CSS3 + 三角函数实现 2.5D 动效实践"></a>CSS3 + 三角函数实现 2.5D 动效实践</h2><p>需求：轮播组件</p><p>需求来的很突然（因为 CSS 这块的薄弱，所以称之为突然），不过我一向不怕这些，我喜欢迎难而上。</p><p>说是一个轮播组件的确没错，但是这个组件是倾斜的（设计图我就不放了，我怕挨打）。</p><p>我尽可能的用文字描述一下，类似<a href="https://element.eleme.cn/#/zh-CN/component/carousel#qia-pian-hua">Element Carousel 走马灯</a>组件使用卡片化的效果，可透视至后方，椭圆的视觉效果，并且从上 45 度角向下看的视觉效果。</p><p>我还是画个草图吧……</p><p><img src="pic2.png" alt="轮播组件"></p><p>起初我打算使用 <code>transform</code> 的旋转和变换实现透视圆形轮播，在外层使用 <code>perspective</code> 实现视角下沉，但是经过实践我发现这并不可行（或许是我的姿势有问题）。但是就算这个方式实现了，卡片的视角会有问题，因为使用了旋转，所以会有变短的效果。</p><p>后来我发现其实可以只用 <code>transform</code> 来实现，卡片位置使用相对定位控制，那么如何让卡片位置形成这样的椭圆形呢，那就是使用三角函数<a href="https://wuu.wikipedia.org/wiki/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0">[维基]</a>！</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/0/0f/Trig_functions_on_descartes.png" alt="三角函数"></p><p>利用公式，计算卡片坐标位置。以及使用一些简单的算法来计算出当前卡片位置的权重，设置 <code>z-index</code> 来实现层次感。</p><p>最后加入动画效果及自动播放旋转功能即大功告成！（其他细节部分我这里就不谈了）</p><p>记录一个坑：在使用类似 <code>Math.sin</code> 时，入参千万记得把角度转成弧度。比如 <code>90 * Math.PI / 180</code> 。</p>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>牛气冲天</title>
    <link href="https://zongzi531.com/2021/02/01/%E7%89%9B%E6%B0%94%E5%86%B2%E5%A4%A9/"/>
    <id>https://zongzi531.com/2021/02/01/%E7%89%9B%E6%B0%94%E5%86%B2%E5%A4%A9/</id>
    <published>2021-02-01T00:00:00.000Z</published>
    <updated>2021-11-04T02:26:09.720Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><blockquote><p>荣获 2020 年度优秀员工</p></blockquote><h2 id="年度总结"><a href="#年度总结" class="headerlink" title="年度总结"></a>年度总结</h2><blockquote><p>入职公司近 1 年时间，真的收获了许多，感谢所有帮助过我的大佬，感谢努力的自己。</p></blockquote><div style="text-align: center;">    <img src="pic2.png" width="50%"></div><h3 id="业务交付"><a href="#业务交付" class="headerlink" title="业务交付"></a>业务交付</h3><p>完成基本的 B 端业务交付工作，包括开发、联调对接、缺陷修复、人员安排、项目管理、技术支持、新人培养。</p><p>在这一年中，新接触了一些关于管理方面的工作，保障业务按时交付的情况下，也带着同事们一起提炼一些经验。</p><p>比如和同事们一起提炼了 TypeScript 实践经验手册，供其他同事学习。</p><p>再者就是下发给同事的抽象能力挑战，提供有效的指导，帮助同事在有限的时间内完成代码抽象及封装。</p><h3 id="技术贡献"><a href="#技术贡献" class="headerlink" title="技术贡献"></a>技术贡献</h3><p>技术贡献一直是我在工作中自产的一些挑战任务，为了让工作更有挑战性。</p><ul><li>来自一些业务交付时所产生的挑战，包括对现有库的缺陷修复、新特性支持、定制特性支持。</li><li>业务交付过程中解耦出的通用型组件库、 SDK 。</li><li>在代码中运用合理的设计模式来抽象代码、优化代码设计，提供更易维护、更易阅读、更易使用的代码模块。</li><li>参与微前端架构设计及调整，涉及开发、构建、 CI/CD （一件很有挑战的事）。</li></ul><h3 id="TypeScript-推进"><a href="#TypeScript-推进" class="headerlink" title="TypeScript 推进"></a>TypeScript 推进</h3><ul><li>推进内部 TypeScript 使用</li><li>总结 TypeScript 实践经验</li></ul><h3 id="标准代码风格"><a href="#标准代码风格" class="headerlink" title="标准代码风格"></a>标准代码风格</h3><p>因为经历了多个业务交付，发现不同业务的代码风格稍有不同，考虑到为了统一风格，则邀请多位同事一同讨论，抽离现有合理规则，定制内部标准。</p><p>从而在年底发布内部标准代码风格，支持 JavaScript / TypeScript / Node / Vue 。</p><p>学习 TC39 工作组记录会议纪要。</p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>单元测试的编写附属于技术贡献时，以保证代码的稳定性。</p><ul><li>内部库的单元测试，保证覆盖率 70%+</li><li>运用设计模式的抽象代码，提供单元测试</li></ul><h3 id="技术分享"><a href="#技术分享" class="headerlink" title="技术分享"></a>技术分享</h3><p>共计 2 场技术分享</p><ol><li><a href="https://github.com/zongzi531/daily-learning/blob/master/share/TypeScript%20%E7%BB%99%E6%88%91%E4%BB%AC%E5%B8%A6%E6%9D%A5%E4%BA%86%E4%BB%80%E4%B9%88.pdf">《TypeScript 给我们带来了什么》</a></li><li><a href="https://github.com/zongzi531/daily-learning/blob/master/share/%E8%BF%BD%E6%B1%82%E4%BC%98%E9%9B%85%E7%9A%84%E4%BB%A3%E7%A0%81.pdf">《追求优雅的代码》</a></li></ol><h3 id="人才招聘"><a href="#人才招聘" class="headerlink" title="人才招聘"></a>人才招聘</h3><p>负责部门实习生、社招岗位一二面。（面试 20 人左右，入围 5 人左右，具体记不清了，不重要）</p><p>在面试过程中，我也在学习，从候选人的身上寻找自己的不足。</p><p>比如在面试 CSS 方面，因为我 CSS 方面并不是特别的擅长，所以会需要资料和同事的协助。</p><p>我也明白了，我需要如何系统的学习 CSS ，才能凸显我掌握了 CSS 。</p><p>所以当在面试 CSS 相关的知识时，可以从各个 CSS Level 级别去阐述 CSS 特性。（这点很重要）</p><p>当然，另外的就是前端的基础掌握程度。（这点也很重要）</p><p>虽然面试很吃时间，但是或多或少是可以学习到不少东西的，要保持这种心态。</p><h3 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h3><p>这一年，很不错！</p><p>比较遗憾的是，没有足够的时间去尝试：</p><ul><li>可视化</li><li>工程化</li><li>服务端</li></ul><p>对于未来的工作规划似乎又有了一些新的想法：</p><ul><li>继续拓展软件开发领域知识广度</li><li>尝试可能性</li><li>现在选择一条路走到底还早</li></ul><h2 id="工程化探索"><a href="#工程化探索" class="headerlink" title="工程化探索"></a>工程化探索</h2><p>恭喜同桌大佬进入蚂蚁金服，向大佬学习的心日益强烈！</p><p>春节前除了保证业务的正常交付，开始交接工程化相关的项目，慢慢开始介入 CI/CD 相关工作。</p><p>其实发现关于前端工程化 + CI 形成前端自动工程化与 CD 组合是一件很富有挑战性的工作。</p><p>光前端工程化就有很多库、知识可以学习，非常的兴奋。</p><p>CI/CD 则会与服务端的同学进行配合，同时又可以学习到服务端的相关知识，慢慢的对服务端也有更多的了解和认识。</p><p>在维护 Webpack 插件时，利用 <a href="https://github.com/zahorovskyi/webpack-dynamic-public-path">Dynamic Public Path Plugin</a> 的思路解决现有 <code>publicPath</code> 存在的问题。</p><p>因为是一个微前端架构的 SPA 工程打包为多页面的工程思路，配合后端路由寻址，所以 <code>publicPath</code> 需要为动态，刚好这个开源的插件给我了灵感：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">WebpackDynamicPublicPath</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *     * @param &amp;#123;Object&amp;#125; options     * @param &amp;#123;string&amp;#125; options.externalPublicPath - variable with new publicPath     * @param &amp;#123;Array&lt;string>&amp;#125; [options.chunkNames] - list of chuck names in which publicPath will be replaced,     * in case if parameter is not defined publicPath will be replaced for all chunks     */</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>afterPlugins <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>afterPlugins<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>emit <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>emit<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>afterPlugins<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">'WebpackDynamicPublicPath'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>afterPlugins<span class="token punctuation">)</span><span class="token punctuation">;</span>        compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>emit<span class="token punctuation">.</span><span class="token function">tapPromise</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">'WebpackDynamicPublicPath'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>emit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">afterPlugins</span><span class="token punctuation">(</span>compilation<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> compilation<span class="token punctuation">.</span>options<span class="token punctuation">.</span>output <span class="token operator">===</span> <span class="token string">'undefined'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> compilation<span class="token punctuation">.</span>options<span class="token punctuation">.</span>output<span class="token punctuation">.</span>publicPath <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'WebpackDynamicPublicPath: params missing - output.publicPath must be defined in webpack config (used only as placeholder, make it distinctive)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">===</span> <span class="token string">'undefined'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>externalPublicPath <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`WebpackDynamicPublicPath: params missing - externalPublicPath - name of global variable you want to use as publicPath.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>publicPath <span class="token operator">=</span> <span class="token template-string"><span class="token string">`"$&amp;#123;compilation.options.output.publicPath&amp;#125;"`</span></span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">emit</span><span class="token punctuation">(</span>compilation<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> chunks <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>chunkNames <span class="token operator">?</span>            compilation<span class="token punctuation">.</span>chunks<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>chunk <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>chunkNames<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>            compilation<span class="token punctuation">.</span>chunks<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>chunks<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'WebpackDynamicPublicPath: chunks array for replacing publicPath is empty.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> fileNames <span class="token operator">=</span> chunks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>            chunk <span class="token operator">=</span><span class="token operator">></span> chunk<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>                file <span class="token operator">=</span><span class="token operator">></span> file<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/.*\.js/</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> replacePromises <span class="token operator">=</span> fileNames<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>fileName <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replacePublicPath</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> compilation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>replacePromises<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'WebpackDynamicPublicPath: publicPath replaced.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Replace publicPath     * @param &amp;#123;string&amp;#125; fileName     * @param &amp;#123;object&amp;#125; compilation     * @return &amp;#123;Promise&lt;any>&amp;#125;     */</span>    <span class="token function">replacePublicPath</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> compilation<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> source <span class="token operator">=</span> compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span>fileName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> publicPath <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>publicPath<span class="token punctuation">;</span>            <span class="token keyword">const</span> externalPublicPath <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>externalPublicPath<span class="token punctuation">;</span>            compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span>fileName<span class="token punctuation">]</span><span class="token punctuation">.</span>source <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>publicPath<span class="token punctuation">,</span> externalPublicPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> WebpackDynamicPublicPath<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源码很简单，我就复制过来凑凑字数，内部的细节我就不做展示，逻辑我在这里介绍一下。</p><p>利用环境变量配置，提供公共的 <code>publicPath</code> 前缀，获取需要被拆分的页面模块名称，拼接特定的 <code>publicPath</code> 内容。</p>]]></content>
    
    
    <summary type="html">荣获 2020 年度优秀员工</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>時間は本当に早い〜２０２１年だ〜</title>
    <link href="https://zongzi531.com/2021/01/01/%E6%99%82%E9%96%93%E3%81%AF%E6%9C%AC%E5%BD%93%E3%81%AB%E6%97%A9%E3%81%84%E3%80%9C%EF%BC%92%EF%BC%90%EF%BC%92%EF%BC%91%E5%B9%B4%E3%81%A0%E3%80%9C/"/>
    <id>https://zongzi531.com/2021/01/01/%E6%99%82%E9%96%93%E3%81%AF%E6%9C%AC%E5%BD%93%E3%81%AB%E6%97%A9%E3%81%84%E3%80%9C%EF%BC%92%EF%BC%90%EF%BC%92%EF%BC%91%E5%B9%B4%E3%81%A0%E3%80%9C/</id>
    <published>2021-01-01T00:00:00.000Z</published>
    <updated>2021-11-04T02:26:09.696Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><blockquote><p>2020 年，阅读源码，入职新公司体验技术部，推动 TypeScript 内部生态，做技术分享等等。<br>2021 年，新的计划，新的征程，继续加油。</p></blockquote><h2 id="物联网团队"><a href="#物联网团队" class="headerlink" title="物联网团队"></a>物联网团队</h2><p>继上个月之后到春节前，我会负责多个物联网相关项目的开发，任务安排，进度管理工作。同时支持微前端架构的设计和技术支持。</p><p>在这几个项目中，培养同事使用 TypeScript 。</p><p>在期间，入职的新同事（实习生）由我来带领。</p><h2 id="回顾-2020-年"><a href="#回顾-2020-年" class="headerlink" title="回顾 2020 年"></a>回顾 2020 年</h2><ul><li><strong><span class="github-emoji" alias="couplekiss_man_woman" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f469-2764-1f48b-1f468.png?v8">&#x1f469;&#xfe0f;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f48b;&#xfe0f;&#x200d;&#x1f468;</span> 更爱女朋友，和她开心幸福在一起</strong></li><li><strong><span class="github-emoji" alias="heartpulse" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f497.png?v8">&#x1f497;</span> 更爱家人，祝家人身体健康，平平安安</strong></li><li><strong><span class="github-emoji" alias="horse_racing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8">&#x1f3c7;</span> 锻炼身体</strong>（微量）</li><li><strong><span class="github-emoji" alias="notebook_with_decorative_cover" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8">&#x1f4d4;</span> 日本語学習</strong></li><li><strong><span class="github-emoji" alias="books" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">&#x1f4da;</span> 建立自己的前端知识体系</strong>（进行中）</li><li><strong>推动公司使用 TypeScript</strong></li><li><strong>更多的学习 CSS</strong>（Grid 布局）</li></ul><h2 id="展望-2021-年"><a href="#展望-2021-年" class="headerlink" title="展望 2021 年"></a>展望 2021 年</h2><ul><li><strong><span class="github-emoji" alias="couplekiss_man_woman" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f469-2764-1f48b-1f468.png?v8">&#x1f469;&#xfe0f;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f48b;&#xfe0f;&#x200d;&#x1f468;</span> 更爱女朋友，和她开心幸福在一起</strong></li><li><strong><span class="github-emoji" alias="heartpulse" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f497.png?v8">&#x1f497;</span> 更爱家人，祝家人身体健康，平平安安</strong></li><li><strong><span class="github-emoji" alias="horse_racing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8">&#x1f3c7;</span> 锻炼身体</strong></li><li><strong><span class="github-emoji" alias="notebook_with_decorative_cover" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8">&#x1f4d4;</span> 日本語学習文法・語彙</strong></li><li><strong><span class="github-emoji" alias="books" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">&#x1f4da;</span> 建立自己的前端知识体系</strong></li><li><strong><span class="github-emoji" alias="hammer_and_wrench" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f6e0.png?v8">&#x1f6e0;</span> 学习前端自动化工程体系</strong></li><li>阅读 ECMA 标准</li><li>学习计算机图形学/可视化领域</li><li>实践 Three.js</li><li>学习服务端架构</li><li>学习 OKR</li></ul><h2 id="持续进行"><a href="#持续进行" class="headerlink" title="持续进行"></a>持续进行</h2><ul><li>关注 ECMA 标准 / ECMAScript Next</li><li>关注前端发展趋势</li><li>关注 NPM 社区</li><li>关注 TypeScript</li><li>学习算法</li><li>学习 CSS</li><li>至少 2 场技术分享</li></ul><h2 id="优先级较低的规划"><a href="#优先级较低的规划" class="headerlink" title="优先级较低的规划"></a>优先级较低的规划</h2><ul><li>了解 JavaScript 在不同宿主环境下的表现</li><li>尝试实践渲染性能优化</li><li>尝试 Angular、Ember.js</li><li>尝试 Progressive Web Apps</li><li>尝试 WebAssembly</li><li>学习 Web Accessibility</li></ul><h2 id="x1f4da-建立自己的前端知识体系"><a href="#x1f4da-建立自己的前端知识体系" class="headerlink" title="&#x1f4da; 建立自己的前端知识体系"></a><span class="github-emoji" alias="books" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">&#x1f4da;</span> 建立自己的前端知识体系</h2><h3 id="新规划"><a href="#新规划" class="headerlink" title="新规划"></a>新规划</h3><p>从职业规划的角度来思考，未来可能会选择的挑战有：架构师、资深开发、项目经理、可视化开发等等我没有想到的。</p><p>但是，不能局限于此。跳出前端这个岗位看到后端，会发现需要涉及以及学习的内容非常丰富。</p><p>并且架构师也好，资深开发也好，项目经理也好，也需要周边领域的学习和了解，这样才能更好的跟随或者带动团队去成长。</p><p>届时，我会在未来的时间里更多的要求自己不仅局限于前端这个岗位，而是整个软件生态，生命周期里涉及到的环节都得有所了解。</p><p>就像是 DevOps 一样，需要掌握的内容会很多。</p><p>在未来，需要达成的目标和规划如下：</p><ol><li>扎实前端相关知识基础</li></ol><p>比如从阅读 ECMA 标准开始，扎实对 JavaScript 的认识，从 HTTP 协议到浏览器实现，扎实对网络，对浏览器 API 的认识等等很多方面，这将会是一条漫长的路。</p><ol start="2"><li>更多的以产品经理角度思考问题，发现问题</li></ol><p>可以理解成深入到业务，服务到客户。思考问题的角度要去提升，而不单从开发。</p><ol start="3"><li>更多的以项目经理去沟通，学习沟通，锻炼沟通能力</li></ol><p>譬如学习 OKR 工作法，学习带同学，带动团队进步等等。</p><ol start="4"><li>关于未来需要深耕的领域，暂时还没有明确的想法，但是上面提到的内容一定是必经之路，没有捷径。</li></ol><h3 id="推动-TypeScript"><a href="#推动-TypeScript" class="headerlink" title="推动 TypeScript"></a>推动 TypeScript</h3><p>本以为今年没有机会做这件事情了，但是机会总是留给有准备的人的。因为机缘巧合，我负责公司内部项目重构为 TypeScript 项目，并且推动公司内部使用 TypeScript 业务模板开发，推动形成 TypeScript 相关的 NPM 包生态，同时建立以 TypeScript 起始的公司内部 ESLint Plugin 语法检查规范。</p><h3 id="设计模式的进阶"><a href="#设计模式的进阶" class="headerlink" title="设计模式的进阶"></a>设计模式的进阶</h3><p>非常喜欢的一种工作气氛，在有限的时间里挑战可能性。在开发低代码执行器的时候，对我来说就是一种挑战，在短暂的开发周期里，我对功能进行了解耦，引入了设计模式，完成了功能开发，并且在后续需要加功能的时候，因为有设计模式的优势夹持，将开发的时间大大缩短，虽然没有时间上的统计，但是这种挑战，是让人非常喜悦的。</p><p>再来到为项目维度提供的调度器，也是借助 React 的部分思路，拆解出执行单元，并以此为最小单元来进行代码执行的优化手段。</p><p>在未来的工作中，如遇到可能性，我会极力去挑战我想要实现的“优雅”的代码。</p><h3 id="提效贡献"><a href="#提效贡献" class="headerlink" title="提效贡献"></a>提效贡献</h3><p>考虑到需要在公司有更多的立足点，如何在内部推广自己团队的产出，除了产品这一点外，还有就是产出提效工具，解决 DevOps 中存在的痛点，这也是未来需要考虑的一个必要的切入点。</p>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>&lt;img&gt; 使用 svg 后如何改变颜色</title>
    <link href="https://zongzi531.com/2020/12/16/img%E6%A0%87%E7%AD%BE%E4%BD%BF%E7%94%A8svg%E5%90%8E%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98%E9%A2%9C%E8%89%B2/"/>
    <id>https://zongzi531.com/2020/12/16/img%E6%A0%87%E7%AD%BE%E4%BD%BF%E7%94%A8svg%E5%90%8E%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98%E9%A2%9C%E8%89%B2/</id>
    <published>2020-12-16T17:06:56.000Z</published>
    <updated>2021-11-04T02:26:09.612Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><p>在一次开发中，使用 <code>&lt;img src=&quot;some.svg&quot; /&gt;</code> 的形式引入了 svg 文件，考虑到 svg 图片会在鼠标移入后进行变色操作，想想还是挺麻烦的。</p><p>不像是直接使用 svg 标签那样方便，这就开始了这次知难而上的尝试了。</p><p>接下来，我将为大家介绍我在解决问题的时候尝试的方法以及最终选择的方案。</p><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defs</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>turnIntoRed<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feColorMatrix</span>        <span class="token attr-name">in</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SourceGraphic<span class="token punctuation">"</span></span>        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>matrix<span class="token punctuation">"</span></span>        <span class="token attr-name">values</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1 1 1 1 0                0 0 0 0 0                0 0 0 0 0                0 0 0 1 0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>defs</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">filter</span><span class="token punctuation">:</span> <span class="token url">url('#turnIntoRed')</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>some.svg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式可以实现红色的渲染，但是会隐约出现原来的颜色，效果不行。</p><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> -<span class="token number">1000</span>px<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">1000</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defs</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>turnIntoRed<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feFlood</span> <span class="token attr-name">flood-color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#00<span class="token punctuation">"</span></span> <span class="token attr-name">flood-opacity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">result</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feComposite</span> <span class="token attr-name">in</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span> <span class="token attr-name">in2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SourceGraphic<span class="token punctuation">"</span></span> <span class="token attr-name">operator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>defs</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">filter</span><span class="token punctuation">:</span> <span class="token url">url('#turnIntoRed')</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>some.svg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方法实现效果达成了要求，可以完美显示红色，并且原来的颜色看不见。</p><p>但是方案一和方案二都有一个致命问题，需要定义一个存在全局唯一的 ID ，如果这个 ID 被覆盖的话那么就会超出预期显示内容。</p><h2 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">drop-shadow</span><span class="token punctuation">(</span><span class="token number">1000</span>px <span class="token number">0</span> <span class="token number">0</span> red<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">1000</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>some.svg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种方案不需要再定义晦涩难懂的 svg 标签，而是通过显示阴影的方式来解决问题，完美的解决了上面的问题，但是这个方案有一个注意点，需要将本身显示的图片移动至看不见的地方，不然就会有 2 个噢。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>最终我选择方案三来解决我的问题。</p>]]></content>
    
    
    <summary type="html">一次知难而上的尝试</summary>
    
    
    
    <category term="CSS" scheme="https://zongzi531.com/categories/CSS/"/>
    
    
    <category term="CSS" scheme="https://zongzi531.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>越来越忙，越来越充实</title>
    <link href="https://zongzi531.com/2020/12/01/%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%BF%99%EF%BC%8C%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%85%85%E5%AE%9E/"/>
    <id>https://zongzi531.com/2020/12/01/%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%BF%99%EF%BC%8C%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%85%85%E5%AE%9E/</id>
    <published>2020-12-01T10:18:55.000Z</published>
    <updated>2021-11-04T02:26:09.740Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><blockquote><p>工作变得越来越忙，也越来越充实。生活也是，为了美好的未来而努力！<br>杭州入冬了，天冷咯～</p></blockquote><h2 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h2><ul><li><strong>「日本語学習計画」</strong>：《新版 中日交流标准日本语 初级上、下》完成第 11 单元学习 <em>计划从明年开始，学习语法及词汇</em></li><li><strong>「计算机图形学」</strong>：材质与外观 <em>停滞</em></li><li><strong>「锻炼身体」</strong>：适当运动，基本保持在每周1～2次</li></ul><h2 id="x1f4da-建立自己的前端知识体系"><a href="#x1f4da-建立自己的前端知识体系" class="headerlink" title="&#x1f4da; 建立自己的前端知识体系"></a><span class="github-emoji" alias="books" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">&#x1f4da;</span> 建立自己的前端知识体系</h2><h5 id="1-可视化团队"><a href="#1-可视化团队" class="headerlink" title="1. 可视化团队"></a>1. 可视化团队</h5><p>于 11 月中旬正式负责物联网相关项目，可视化团队暂时告一段落，期间主要负责 V1.3.0 和 V1.4.0 相关的开发工作：</p><ol><li>低代码执行器，附日志调试</li><li>TypeScript 重构</li><li>平台专属调度器</li><li>基于 Hooks 感念的复用逻辑提炼</li><li>单元测试</li><li>司内 TypeScript 生态建设</li><li>组织发起 TypeScript Lint 规范讨论（<strong>后续计划落地司内 TypeScript 代码规范</strong>）</li><li>等等业务导向内容，及工具包开发及发布</li></ol><h5 id="2-体系拓展"><a href="#2-体系拓展" class="headerlink" title="2. 体系拓展"></a>2. 体系拓展</h5><ol><li>利用业余时间学习 CSS Grid 概念，并在物联网项目应用</li><li>学习有关 DevOps 概念，了解 K8s 和 Docker 的关系</li></ol><blockquote><p>结合自己 CSS 薄弱的问题，渐进式学习 CSS 知识并加以应用实践，同时学习软件开发行业整体的流程，深入敏捷开发，并借助工具加速，跳离前端岗位，延伸至整个行业，甚至企业产品的生命周期中的各个环节</p></blockquote><h5 id="3-技术分享"><a href="#3-技术分享" class="headerlink" title="3. 技术分享"></a>3. 技术分享</h5><p><a href="https://github.com/zongzi531/daily-learning/blob/master/share/%E8%BF%BD%E6%B1%82%E4%BC%98%E9%9B%85%E7%9A%84%E4%BB%A3%E7%A0%81.pdf">《追求优雅的代码》</a></p><p>这次分享较上次分享做了更多的准备，当然分享的效果也比之前要好了。只不过还有改进的地方，比如：卡顿或者停顿的时候，不要说类似于“我想想”的话，可以自然的喝口水这样。分享的素材和例子在平时也需要注意积累，因为短时间内可能不一定找到到合适的例子。还有就是需要注意分享内容不要太大，最好聚焦某一块内容进行分享，提供更多的干活之类的，不过这个还是要考虑到听众的群里再做定论，不过这个是一个很好的出发点。</p><p>计划未来每年至少做2次分享，锻炼和提升。</p><h5 id="4-文章推荐"><a href="#4-文章推荐" class="headerlink" title="4. 文章推荐"></a>4. 文章推荐</h5><ul><li><a href="https://mp.weixin.qq.com/s/YzbAPM0dxQTmkiEtrjhPNw">前端智能化 2020 年中总结和反思</a></li><li><a href="https://mp.weixin.qq.com/s/JoZRvjvyH1s-CyZU3olYww">【第2116期】Vue 3.0 Ref-sugar 提案真的是自寻死路吗？</a></li><li><a href="https://mp.weixin.qq.com/s/3Kkc_91U8bpRWQB7ZK342Q">【第2118期】前端安全生产在ICBU的探索与落地</a></li><li><a href="https://mp.weixin.qq.com/s/lI_Q9TClzoBUgYpaWDxSUw">【第2119期】浏览器端录制技术的探索与实践</a></li><li><a href="https://mp.weixin.qq.com/s/WJE7KgiOpPJMCpdcJdy30A">【第2121期】斗鱼关注人数爬取 ── 字体反爬的攻与防</a></li><li><a href="https://book.douban.com/subject/30243169/">《即兴演讲》</a></li><li><a href="https://mp.weixin.qq.com/s/ifLP36rFhYJsU2RCAi7OZQ">React 是如何工作的</a></li><li><a href="https://www.zhihu.com/question/405268183/answer/1328519761">如何看待React源码中调度优先级使用lane取代expirationTime？</a></li><li><a href="https://juejin.cn/post/6860275004597239815">React17新特性：启发式更新算法</a></li><li><a href="https://mp.weixin.qq.com/s/nJZk-0WtEW6C8mTeJCSUzQ">【第2133期】如何搭建一套 “无痕埋点” 体系？</a></li></ul>]]></content>
    
    
    <summary type="html">工作变得越来越忙，也越来越充实。生活也是，为了美好的未来而努力！</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>入秋的感受</title>
    <link href="https://zongzi531.com/2020/11/01/%E5%85%A5%E7%A7%8B%E7%9A%84%E6%84%9F%E5%8F%97/"/>
    <id>https://zongzi531.com/2020/11/01/%E5%85%A5%E7%A7%8B%E7%9A%84%E6%84%9F%E5%8F%97/</id>
    <published>2020-11-01T10:19:23.000Z</published>
    <updated>2021-11-04T02:26:09.652Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><blockquote><p>感觉非常不喜欢这个季节，原因是因为昼夜温差太大，容易感冒（年纪大了，只能多穿些）。<br>对于早出晚归的我来说，出门必定得多穿些，然后到了中午下午就开始热了。<br>服装上面来说，会比较讨厌吧。<br>或许是，杭州的这个季节……</p></blockquote><h2 id="x1f4d4-日本語学習計画"><a href="#x1f4d4-日本語学習計画" class="headerlink" title="&#x1f4d4; 日本語学習計画"></a><span class="github-emoji" alias="notebook_with_decorative_cover" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8">&#x1f4d4;</span> 日本語学習計画</h2><p>截至目前《新版 中日交流标准日本语 初级上、下》完成第 10 单元学习。就现阶段存在的问题，词汇量远远不够，并且业余时间变少了。</p><h2 id="x1f4da-建立自己的前端知识体系"><a href="#x1f4da-建立自己的前端知识体系" class="headerlink" title="&#x1f4da; 建立自己的前端知识体系"></a><span class="github-emoji" alias="books" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">&#x1f4da;</span> 建立自己的前端知识体系</h2><h5 id="1-计算机图形学"><a href="#1-计算机图形学" class="headerlink" title="1. 计算机图形学"></a>1. 计算机图形学</h5><p>截止目前学习进度至：<strong>「材质与外观」</strong> <strong>学习进度停滞</strong></p><p>简单尝试了 <code>Three.js</code> 的几何。</p><h5 id="2-可视化团队"><a href="#2-可视化团队" class="headerlink" title="2. 可视化团队"></a>2. 可视化团队</h5><p>月底的月会上，我可算才知道我目前的岗位定位，属于技术预研团队，目前支持可视化团队工作。</p><p>接着上个月剩余的工作，完成核心单元测试覆盖率达 70% 以上，编写「平台专属调度器」，和一些类型订正修复。</p><p>回顾重构感受，重构过程确实痛苦，但是在订正类型的过程中会发现，你对平台的数据结构会变得越来越熟悉，毕竟每一个 <code>interface</code> 都是和同事一起整理出来的。</p><p>对不熟悉的函数方法，通过类型的帮助，也渐渐知道他们存在的目的以及用途。可以说 TypeScript 是越写越上瘾的，虽然在 Vue 2.x 环境下的开发体验并不是那么好，但是我已经尽可能的在为切换到 Vue 3 在做准备，比如抽离更多的方法函数、使用 <code>@vue/composition-api</code> 、等等。</p><p>关于「平台专属调度器」的开发工作，目前因为整个实现逻辑是我自己设计的，功能难免有些简单和片面，当前实现功能如下：</p><ol><li>以可视化平台组件为工作单元，实现同步挂载渲染和异步挂载渲染。</li><li>在同步挂载渲染模式下实现分组同步挂载功能。</li><li>基于目前「平台专属调度器」实现逻辑添加了一些基础的防御性代码。</li><li>支持工作单元优先级分配调整功能。</li></ol><p>目前「平台专属调度器」的功能还是属于试验性阶段，后续会为配合平台会做适当调整。</p><blockquote><p>补充一下关于「低代码执行器」 使用到的设计模式，观察者模式，依赖注入模式，模板方法模式。</p></blockquote><h5 id="3-技术分享"><a href="#3-技术分享" class="headerlink" title="3. 技术分享"></a>3. 技术分享</h5><p>在一次分享预演的会议上，同事们纷纷发表自己的意见，让我第一次感受到要想把分享讲好还是一门很重要的学问。</p><p>在制作分享前思考，分享时的听众是哪些群体，在制作时则要相应的转换表达方式，比如不能把对开发讲的技术内容生硬的讲给销售听等等。</p><p>建立在这个基础上后，可以罗列整个分享的大纲内容，围绕着大纲去展开更多的内容。</p><p>再一个是比如你在讲一些宣传类型的分享时，内容、用词应当积极向上，避免使用一些复面的词语，可以参考苹果官网的用词，真的特别装逼，这很苹果。</p><p>等等，我相信还有很多分享时的技巧，但是我现在还没有领悟到。</p><p>最后在月底，他组的领导邀请我做有关代码质量/规范相关主题的技术分享，这算是我第二次做技术分享的机会，我毫不犹豫的接受了此次挑战，我希望可以把我学到的内容运用进去，敬请期待吧！</p><h2 id="x1f3c7-锻炼身体"><a href="#x1f3c7-锻炼身体" class="headerlink" title="&#x1f3c7; 锻炼身体"></a><span class="github-emoji" alias="horse_racing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8">&#x1f3c7;</span> 锻炼身体</h2><p>又开始松懈，惰性气质散发的淋漓精致啊！想……如何才能持续坚持，毕竟贵在坚持，好难！</p>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>一步一步向前走</title>
    <link href="https://zongzi531.com/2020/10/01/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%90%91%E5%89%8D%E8%B5%B0/"/>
    <id>https://zongzi531.com/2020/10/01/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%90%91%E5%89%8D%E8%B5%B0/</id>
    <published>2020-10-01T06:06:06.000Z</published>
    <updated>2021-11-04T02:26:09.644Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><blockquote><p>「2017 年中秋，摄于日本东京台场」<br>时间来到了国庆，今年国庆和中秋可是一起的噢。想去日本旅游～</p></blockquote><h2 id="x1f4d4-日本語学習計画"><a href="#x1f4d4-日本語学習計画" class="headerlink" title="&#x1f4d4; 日本語学習計画"></a><span class="github-emoji" alias="notebook_with_decorative_cover" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8">&#x1f4d4;</span> 日本語学習計画</h2><p>截至目前《新版 中日交流标准日本语 初级上、下》完成第 9 单元学习。加油！</p><h2 id="x1f4da-建立自己的前端知识体系"><a href="#x1f4da-建立自己的前端知识体系" class="headerlink" title="&#x1f4da; 建立自己的前端知识体系"></a><span class="github-emoji" alias="books" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">&#x1f4da;</span> 建立自己的前端知识体系</h2><h5 id="1-计算机图形学"><a href="#1-计算机图形学" class="headerlink" title="1. 计算机图形学"></a>1. 计算机图形学</h5><p>截止目前学习进度至：<strong>「材质与外观」</strong> <strong>学习进度停滞</strong></p><p>简单尝试了 <code>Three.js</code> 做鼠标跟随。</p><h5 id="2-可视化团队"><a href="#2-可视化团队" class="headerlink" title="2. 可视化团队"></a>2. 可视化团队</h5><p>9 月是参与可视化团队的第二个月，工作当然是比上个月更忙了，简单介绍一下这个月的工作内容，负责以下内容：</p><ul><li>平台整体代码重构工作：<ol><li>脚手架迁移更新</li><li>全面采用 TypeScript 开发</li><li>平台运行时逻辑优化</li><li>核心逻辑单元测试</li></ol></li><li>等等其他支持</li></ul><p>脚手架迁移是一个新的尝试，从 Vue CLI 2 构建的项目迁移至 Vue CLI 4 进行构建，并同时将语言由 JavaScript 切换至 TypeScript 。我非常喜欢的工作内容，也是我在今年想做的一件事情，非常开心，很有动力。</p><p>在代码迁移过程中，你会发现旧代码中 Lint 规则很多都是过时且不好的，虽然很多可以使用 <code>--fix</code> 进行修复，但是还是有很多代码需要手动修复，也就从这一点也发现了很多的不明显的 BUG 和多余的文件。</p><p>在脚手架迁移的过程中，学习 Webpack chain 的使用方式，在同事的帮助下节省了不少学习成本，从一开始的抵触，到慢慢的接受，再到现在的习惯，回顾起来其实还是很清晰方便的。真香！</p><p>当然了，由于一些依赖的升级，旧依赖没必要在新的环境中使用，也遇到了一些问题。比如 PostCSS 的使用问题，此次我才知道原来 <code>plugin</code> 是有顺序的，是线性执行的，也移除了一些旧的插件，使用 precss 来代替，非常的方便。</p><p>在迁移完脚手架和 TypeScript 后，联系后端进行 CI/CD 的 TS 分支自动化部署测试，也相当的顺利，对 CI/CD 也有了更多的学习和认识，对 Docker 也有了些兴趣～</p><p>在优化平台运行时逻辑时，需要充分为单元测试做考虑，比如我做了如下的优化手段，抽离挂载在 <code>Vue.prototype</code> 上的公共方法，将使用模块化的形式使用，这样的优点是更适合做单元测试，让函数更纯粹。</p><p>对原有的 <code>mixins</code> 进行抽离，放弃使用这个危险的功能。由于目前还暂时不敢使用 Vue 3.0 版本，基于 Vue 2.0 我决定使用 <code>@vue/composition-api</code> 来代替 <code>mixins</code> ，这样的做的优点是不仅可以抽离出公共的逻辑，并且利于做单元测试，让逻辑更清晰。并且提前使用 <code>@vue/composition-api</code> 会让未来在迁移到 Vue 3.0 的过程变得轻松。</p><p>当然还对 Vuex 做了类型约束，约束方式则参考<a href="https://dev.to/3vilarthas/vuex-typescript-m4j">「 Vuex + TypeScript 」</a>，一个很不错的类型约束写法，由于目前使用的 Vuex 还是 3.x 版本，暂时未升级到 4.0 版本以上，所以在 Vue 文件中使用类型约束暂时还不行，需要后续再做尝试了……</p><p>噢，对了。在迁移 <code>watch</code> 钩子的时候才从同事这里得知 Vue 2.x 中是有一个 <code>sync</code> 参数的，查阅资料发现在 Vue 3.0 是给开发者提供了文档说明，但是在 Vue 2.x 似乎没有，使用 <code>@vue/composition-api</code> 可以使用 <code>flush: &#39;sync&#39;</code> 来使用，但是使用 <code>vue-property-decorator</code> 的 <code>@Watch</code> 装饰器时却无法使用，查看源码发现就不支持，于是自己内部重新构建了一个支持 <code>sync</code> 的 <code>@Watch</code> 装饰器使用，并且给该仓库提了一个 PR<a href="https://github.com/kaorun343/vue-property-decorator/pull/346">#346</a> 。</p><p>截止国庆，重构的工作并没有完成，单元测试目前覆盖率仅 5 % ，平台运行时的逻辑优化也没有开始做，计划将运行时写的更优雅，使用类似于 React 事务的模式去合理的规划平台的运行时，让平台运行的更可控，加油，挑战设计模式！</p><h5 id="3-文章推荐"><a href="#3-文章推荐" class="headerlink" title="3. 文章推荐"></a>3. 文章推荐</h5><ul><li><a href="https://mp.weixin.qq.com/s/Ti4LhQfqPH2sysg6RvU_BQ">【第2056期】蚂蚁金服@御术：比能力更重要的是你的底层操作系统</a></li><li><a href="https://mp.weixin.qq.com/s/9KKzu7f6E0dcWKXi-PQc8Q">【第2061期】「划线高亮」和「插入笔记」—— 不止是前端知识点</a></li><li><a href="https://mp.weixin.qq.com/s/v6OSWMHRJR3AThtS-O5GdQ">【第2076期】阿里@风月：中医药大学毕业的业务女前端修炼之路</a></li></ul><h2 id="x1f3c7-锻炼身体"><a href="#x1f3c7-锻炼身体" class="headerlink" title="&#x1f3c7; 锻炼身体"></a><span class="github-emoji" alias="horse_racing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8">&#x1f3c7;</span> 锻炼身体</h2><p>重新开始恢复锻炼，感觉出出汗还是挺舒服的，当然也是防止肥胖。啊～肥胖，远离你！</p><h2 id="新的规划"><a href="#新的规划" class="headerlink" title="新的规划"></a>新的规划</h2><p>也慢慢感觉到了自己想在新的一年的目标和规划：</p><ul><li>扎实前端相关知识基础（比较宽泛，需要罗列细节）</li><li>更多的以产品经理角度思考问题，发现问题</li><li>更多的以项目经理去沟通，学习沟通，锻炼沟通能力</li><li>领域的深耕似乎还是迷茫，多去做尝试和选择</li></ul>]]></content>
    
    
    <summary type="html">时间来到了国庆，今年国庆和中秋可是一起的噢。想去日本旅游～</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>脱离业务</title>
    <link href="https://zongzi531.com/2020/09/01/%E8%84%B1%E7%A6%BB%E4%B8%9A%E5%8A%A1/"/>
    <id>https://zongzi531.com/2020/09/01/%E8%84%B1%E7%A6%BB%E4%B8%9A%E5%8A%A1/</id>
    <published>2020-09-01T10:31:09.000Z</published>
    <updated>2021-11-04T02:26:09.740Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><blockquote><p>8 月，正式脱离公司业务团队，参与可视化团队项目，为公司赋能。<br>可以说，脱离业务团队后，工作变得比以前更忙了，更充实了。（会议也变多了）<br>整个 8 月甚至 9 月被工作安排的满满当当的</p></blockquote><h2 id="x1f4d4-日本語学習計画"><a href="#x1f4d4-日本語学習計画" class="headerlink" title="&#x1f4d4; 日本語学習計画"></a><span class="github-emoji" alias="notebook_with_decorative_cover" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8">&#x1f4d4;</span> 日本語学習計画</h2><p>截至目前《新版 中日交流标准日本语 初级上、下》完成第 8 单元学习，由于第 7 单元的进度在上个月未完成，所以本月已加快进度学习。</p><p>「日本語のコーナー」学习停滞。当然了，还是非常王様给我带来了那么多的帮助，所以在恢复之前我还是会继续前行，继续加油（虽然恢复也是未知的）。</p><p>在此计划加快完成单元学习进度，学习语法基础，加油！</p><h2 id="x1f4da-建立自己的前端知识体系"><a href="#x1f4da-建立自己的前端知识体系" class="headerlink" title="&#x1f4da; 建立自己的前端知识体系"></a><span class="github-emoji" alias="books" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">&#x1f4da;</span> 建立自己的前端知识体系</h2><h5 id="1-计算机图形学"><a href="#1-计算机图形学" class="headerlink" title="1. 计算机图形学"></a>1. 计算机图形学</h5><p>截止目前学习进度至：<strong>「材质与外观」</strong></p><p>计划尽快完成学习进度，实战前端可视化领域。</p><p>希望本次计算机图形学可以让我更好的理解可视化领域。</p><h5 id="2-脱离业务"><a href="#2-脱离业务" class="headerlink" title="2. 脱离业务"></a>2. 脱离业务</h5><h6 id="1-「低代码执行器」开发"><a href="#1-「低代码执行器」开发" class="headerlink" title="1. 「低代码执行器」开发"></a>1. 「低代码执行器」开发</h6><blockquote><p>2020年11月 将「解释器」修改为「低代码执行器」，因为原名称含义并不贴切，关于「解释器」可以参阅维基百科解释。新名称则更符合更为贴切。</p></blockquote><p>负责内部可视化平台「星图」编辑器（节点编程） JavaScript 「低代码执行器」开发工作，「低代码执行器」实现对流程节点的触发、传递，执行、抛出功能，同时配套支持节点快照、错误捕获功能。</p><p>整个「低代码执行器」内部基于 RxJS 的 Subject 主题订阅实现，利用其多播的特性实现“一点触发、多点抛出”的传播特性，即一个观察者实例可以被多个观察者进行订阅。</p><p>「低代码执行器」内的执行即执行用户输入的低代码内容，利用节点池进行数据的传递并在规定条件下抛出。</p><p>起初编写代码使用 <code>switch</code> 进行编写，但是随着节点类型的增加，代码随之变得逐渐臃肿，逻辑复杂可读性差，为了避免更深化此问题，在紧迫的开发时间内挤出时间对「低代码执行器」进行彻底重构。</p><p>重构采用依赖<strong>注入</strong>的设计模式，将各个节点的环节逻辑进行抽象、剥离。</p><p>重构后，很明显可以看到「低代码执行器」的核心代码逻辑更为清晰，也让核心变得更为稳定；节点自身的逻辑也与外界互不干扰，并且也很容易支持新的节点注入。</p><p><em>设计模式的重要性就此体现了！</em></p><p>并且使用依赖注入的设计模式更好的支持了单元测试，让「低代码执行器」核心逻辑和节点更易测试、和排错。</p><p>关于节点快照和错误捕获功能，快照则基于队列实现，配合边（节点连接边）控制，在需要抛出时展示整个节点流向及快照，错误捕获也一同抛出。</p><h6 id="2-栈存取工具库开发"><a href="#2-栈存取工具库开发" class="headerlink" title="2. 栈存取工具库开发"></a>2. 栈存取工具库开发</h6><p>同时负责基于 IndexedDB 实现的栈存取工具库的开发工作，很不错的是目前公司的 TypeScript 仓库也非常多。考虑到发包的情况，直接就上 TypeScript 了，即实现一个完整的栈功能（回退方案支持 <code>localStorage</code> ），配套编写单元测试（测试覆盖率 100% ）。</p><blockquote><p>后续：和兄弟部门同事讨论关于 IndexedDB 存取性能问题、存储空间问题。可能会调整工具库的内部逻辑，不过需求暂时待审核。</p></blockquote><h5 id="3-文章推荐"><a href="#3-文章推荐" class="headerlink" title="3. 文章推荐"></a>3. 文章推荐</h5><ul><li><a href="https://mp.weixin.qq.com/s/42r-HqT8UOvQV-mLgkYHpA">【第2028期】What I’m thinking about: JS疲劳、招聘</a></li><li><a href="https://mp.weixin.qq.com/s/eQjKG6wrvt2zy-O5mF6F1g">如何写技术文章</a></li><li><a href="https://mp.weixin.qq.com/s/FHbHhjtfJOc2NPfge6xw2Q">【第2033期】核心稳定、易扩展——开放关闭原则（The Open-Closed Principle）</a><blockquote><p>摘抄：要知道，世界上没有一劳永逸的技术方案，也没有一成不变的业务可以取得成功。理想状态下，业务应当驱使着技术的进步，同时技术的进步也促使业务有更多的可能，二者应当呈现为一种相辅相成并充满活力的状态。</p></blockquote></li><li><a href="https://mp.weixin.qq.com/s/8-SMIe-9wdwsmxYwavhDdw">【第2042期】程序员如何把控自己的职业</a></li></ul><h2 id="x1f3c7-锻炼身体"><a href="#x1f3c7-锻炼身体" class="headerlink" title="&#x1f3c7; 锻炼身体"></a><span class="github-emoji" alias="horse_racing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8">&#x1f3c7;</span> 锻炼身体</h2><p>没坚持住……感觉整个 8 月都没锻炼……没法搞没法搞啊。</p>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>充实的七月</title>
    <link href="https://zongzi531.com/2020/08/01/%E5%85%85%E5%AE%9E%E7%9A%84%E4%B8%83%E6%9C%88/"/>
    <id>https://zongzi531.com/2020/08/01/%E5%85%85%E5%AE%9E%E7%9A%84%E4%B8%83%E6%9C%88/</id>
    <published>2020-08-01T10:23:28.000Z</published>
    <updated>2021-11-04T02:26:09.652Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><blockquote><p>和我心爱的女朋友求婚了！<br>大成功！！！哈哈哈～</p></blockquote><h2 id="x1f4d4-日本語学習計画"><a href="#x1f4d4-日本語学習計画" class="headerlink" title="&#x1f4d4; 日本語学習計画"></a><span class="github-emoji" alias="notebook_with_decorative_cover" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8">&#x1f4d4;</span> 日本語学習計画</h2><p>还是老样子，截至目前《新版 中日交流标准日本语 初级上、下》第 7 单元的学习开始，当然只学了 2 课，可能要拖到下个月咯……</p><p>不过没关系，七月加入了王様（先生）的<a href="https://zongzi531.com/nihongonokona/index.html">「日本語のコーナー」</a>学习，非常感谢王様。</p><p>王様、ありがとうございます！お疲れ様です！明日はよろしくお願いします。</p><p>えと…コーナーのみんなさん、いしょに頑張りましょ！</p><p>目前，学习日语语法的优先级在学习课文之上，打好语法基础、拓展词汇才是长久之计。</p><p>日漫日剧现在看起来也比以前有了更多的情切感，毕竟简单的词汇已经可以听懂了。</p><p>頑張りましょ！</p><h2 id="x1f4da-建立自己的前端知识体系"><a href="#x1f4da-建立自己的前端知识体系" class="headerlink" title="&#x1f4da; 建立自己的前端知识体系"></a><span class="github-emoji" alias="books" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">&#x1f4da;</span> 建立自己的前端知识体系</h2><p>月底时，公司内部组织架构调整，我没有被跟着公司产品线被分离出去，而是继续留在体验技术部，将参与可视化大屏的开发工作。未来的路，清晰且又模糊着……</p><h5 id="1-计算机图形学"><a href="#1-计算机图形学" class="headerlink" title="1. 计算机图形学"></a>1. 计算机图形学</h5><p>截止目前学习进度至：<strong>「几何（基本表示方法）」</strong></p><p>作业成果展示：</p><p><img src="https://raw.githubusercontent.com/zongzi531/daily-learning/master/GAMES101/Homework/Assignment3/Code/output-texture-bilinear.png" alt="作业三实现图例"></p><p>利用投影矩阵实现透视投影，通过插值算法计算纹理颜色的插值，结合 Blinn-Phong 模型和双线性插值纹理采样技术计算纹理颜色。实现源码请前往 <a href="https://github.com/zongzi531/daily-learning/tree/master/GAMES101/Homework">GAMES101/Homework</a> 仓库查看。</p><h5 id="2-接触内部自动化"><a href="#2-接触内部自动化" class="headerlink" title="2. 接触内部自动化"></a>2. 接触内部自动化</h5><p>拿到仓库的时候连依赖都装不起来，更别说跑了。不过公司的开发环境确实有些差劲。</p><ul><li>提示因 <code>hiredis</code> 编译失败引起的问题，查看 npm 可以看到需要基础环境，按照要求安装即可 <a href="https://www.npmjs.com/package/hiredis#install">hiredis#install</a> 。<ul><li><code>gcc</code> / <code>g++</code> 4.8 or newer.</li><li><code>python</code> 2.7 or any newer 2.x version. <code>python</code> 3.x is not supported.</li></ul></li><li>同时遇到 <code>node-gyp</code> 或 <code>node-gyp rebuild</code> 无法使用的情况，使用如下方式解决 <a href="https://www.npmjs.com/package/node-gyp#installation">node-gyp#installation</a> 。<ul><li><code>npm install --global --production windows-build-tools</code></li><li><code>npm config set msvs_version 2017</code></li></ul></li><li>安装 <code>node-gyp</code> 的过程中遇到需要下载其他包的情况（因为是内网环境，会提示 <code>network error</code> 。能体会有多差劲了吧），可以使用 <code>npm --disturl=你所需要的内网环境源地址</code> 来替换 <code>cli config</code> 中的 <code>disturl</code> 属性值来达成目的。</li><li>安装 <code>windows-build-tools</code> 提示需要下载 Python 2.7.15 版本<ul><li>下载离线包，安装并配置环境变量</li><li>完成上一步后提示下载 vs_BuildTools.exe 失败（原因可能也同于 Visual Studio ）</li></ul></li><li>执行安装依赖报有关 .NET Framework 2.0/4.0 的错误，<strong>未解决</strong>。<ul><li>猜测是由于没有安装 Visual Studio 导致（太难受了，正在打算从离线包的方式解决……）</li></ul></li></ul><p>仍然在排查问题当中……</p><h5 id="3-内部原型文档管理平台（兴趣小组）"><a href="#3-内部原型文档管理平台（兴趣小组）" class="headerlink" title="3. 内部原型文档管理平台（兴趣小组）"></a>3. 内部原型文档管理平台（兴趣小组）</h5><ol start="0"><li>需求、原型的讨论和确定（微前端应用）</li><li>完成开发框架的搭建（ Vue2.x + TypeScript ）</li><li>准备进入开发</li></ol><h2 id="x1f3c7-锻炼身体"><a href="#x1f3c7-锻炼身体" class="headerlink" title="&#x1f3c7; 锻炼身体"></a><span class="github-emoji" alias="horse_racing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8">&#x1f3c7;</span> 锻炼身体</h2><p>（好难坚持啊………………）加油！加油！！加油！！！太难了……</p><blockquote><p>写了半天，感觉好像也没那么充实嘛……（其实很充实）</p></blockquote>]]></content>
    
    
    <summary type="html">和我心爱的女朋友求婚了！大成功！！！哈哈哈～</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>試しでみる</title>
    <link href="https://zongzi531.com/2020/07/01/tamesidemiru/"/>
    <id>https://zongzi531.com/2020/07/01/tamesidemiru/</id>
    <published>2020-07-01T11:59:51.000Z</published>
    <updated>2021-11-04T02:26:09.624Z</updated>
    
    <content type="html"><![CDATA[<!-- no node --><span id="more"></span><blockquote><p><strong>发个牢骚：要长大了啊！粽子，要学会承担一些事情，要决定很多事情，更为生活，毕竟生活以为中心、开心最重要。</strong><br>啊哈哈，又买了一个加藤惠手办。舒服！</p></blockquote><h2 id="x1f4d4-日本語学習計画"><a href="#x1f4d4-日本語学習計画" class="headerlink" title="&#x1f4d4; 日本語学習計画"></a><span class="github-emoji" alias="notebook_with_decorative_cover" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8">&#x1f4d4;</span> 日本語学習計画</h2><p>截至目前《新版 中日交流标准日本语 初级上、下》已经完成「上」的学习，将在 7 月开始「下」的学习内容。</p><p>考虑到词汇量仍然是一座大山，尽量加大常用词汇的学习，加深印象。</p><p>听说， N3 的考试内容会比 N4/N5 简单些，因为会含有类似中文的词汇，存在着天然的优势。但是我仍然想先过 N4/N5 。</p><h2 id="x1f4da-建立自己的前端知识体系"><a href="#x1f4da-建立自己的前端知识体系" class="headerlink" title="&#x1f4da; 建立自己的前端知识体系"></a><span class="github-emoji" alias="books" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8">&#x1f4da;</span> 建立自己的前端知识体系</h2><h5 id="1-计算机图形学"><a href="#1-计算机图形学" class="headerlink" title="1. 计算机图形学"></a>1. 计算机图形学</h5><p>开始学习计算机图形学知识，为进入前端可视化做基础铺垫，对可视化领域进行学习探索。</p><p>目前借助<a href="https://sites.cs.ucsb.edu/~lingqi/teaching/games101.html">《GAMES101: 现代计算机图形学入门》</a>进行学习，非常棒的学习内容，老师也非常棒！截止目前学习进度至：<strong>「变换（二维与三维）」</strong></p><h5 id="2-未来的路"><a href="#2-未来的路" class="headerlink" title="2. 未来的路"></a>2. 未来的路</h5><p>关于未来要走的路，现在还是有些迷茫和徘徊，在不断的尝试和探索中。在读到<a href="https://mp.weixin.qq.com/s/HJhNCVzmUNA47lySi_4LrQ">《【第1981期】前端开发与架构师》</a>一文中也受到了一些启发。以下内容为摘抄：</p><blockquote><p><strong>技术是不断发展的，作为一个架构师，不断学习新的技术是非常重要的，这里所说的尝鲜，就是要对技术保持一定的热情，不能只满足于现状，说白了讲就是要不断的学。</strong></p><ul><li>习惯了jQuery开发页面，不妨试试Vue，React。</li><li>写了很久的ES5代码，学学ES6也不错。</li><li>沉醉在HTML，CSS，JavaScript开发页面，不妨学学Flutter。</li><li>打造高性能的Web App，试试Service Worker。</li><li>从HTTP协议触发，改造升级spdy和HTTP2，尝试一下HTTP3。</li><li>尝试一下新的编程语言：WebAssembly。</li><li>知道为服务，但你知道微前端吗。</li></ul><p>上面列举的尝鲜技能，是完全可以从一个前端的角度触发，来不断深入的，保持对每一个新技术的求知欲，是一名架构师必不可少的。</p></blockquote><p>其实不止是架构师，任何一条路都一样，都需要不断的学习，只有不断的学习才不会退步。</p><h5 id="3-领域兴趣小组"><a href="#3-领域兴趣小组" class="headerlink" title="3. 领域兴趣小组"></a>3. 领域兴趣小组</h5><p>关于部门领域兴趣小组的事情，因为人数调配问题，我主动退出了可视化相关的兴趣小组，当然这并不会妨碍到我去学习可视化，只不过我不需要出力了，希望可以从同事组建的可视化兴趣小组中学习到我欠缺的知识，为此我加入了另一个兴趣小组，具体做什么我就不细说了，希望我可以在小组中做到的一些事情，就是推动 TypeScript 来进行开发，从小范围开始，从新的技术站出发，继续加油。</p><p>在小组学习中，我也接受到了新的词汇，比如兴趣小组可能是 KPI 项目，当然这只是我自己的设想，目的其实是为了提升自己，更多的接触产品设计，感受产品孵化的过程，等等小团队合作的过程。关于最后的产出，则是以 OKR 的形式，也是一个新的挑战。</p><h5 id="4-学习日"><a href="#4-学习日" class="headerlink" title="4. 学习日"></a>4. 学习日</h5><p>关于学习日，部门的学习日很像是参加了技术分享会一样，可以学习到很多自己未接触过的内容，非常点赞！</p><p>如： <a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-elk/index.html"><strong>《集中式日志系统 ELK 协议栈详解》</strong></a></p><p>一个完整的集中式日志系统，是离不开以下几个主要特点的。</p><ul><li>收集－能够采集多种来源的日志数据</li><li>传输－能够稳定的把日志数据传输到中央系统</li><li>存储－如何存储日志数据</li><li>分析－可以支持 UI 分析</li><li>警告－能够提供错误报告，监控机制</li></ul><h5 id="5-可视化大屏多屏长时间开启出现-GPU-进程爆栈页面崩溃情况处理"><a href="#5-可视化大屏多屏长时间开启出现-GPU-进程爆栈页面崩溃情况处理" class="headerlink" title="5. 可视化大屏多屏长时间开启出现 GPU 进程爆栈页面崩溃情况处理"></a>5. 可视化大屏多屏长时间开启出现 GPU 进程爆栈页面崩溃情况处理</h5><h6 id="排查原因"><a href="#排查原因" class="headerlink" title="排查原因"></a>排查原因</h6><ul><li>检查各屏可视化大屏是否存在内存溢出、报错情况 <strong>【排除】</strong></li><li>Chrome GPU 进程出现持续上涨情况 <strong>【占用 6 - 7 GB 左右】</strong></li><li>设备使用显卡：<ul><li>AMD Redeon HD 7500/7600 Series ( 以下简称独显 )</li><li>Intel(R) UHD Graphics 630 ( 以下简称集显 )</li></ul></li><li>经过长达近 1 个月的来回测试，当只使用独显运行设备时会出现 Chrome GPU 进程持续上涨情况并导致出现此现象；当同时使用集显和独显时 Chrome GPU 进程保持恒定</li><li>检测 Chrome GPU 报告发现日志内容显示<br><em>GpuProcessHost: The GPU process died due to out of memory.</em></li><li>查阅 Chrome 支持显示此情况目前暂无解决方案支持，可以前往查看：<br><a href="https://support.google.com/chrome/thread/2027254?hl=en">GPU Process High RAM And CPU Usage</a></li></ul><h6 id="提供解决方案"><a href="#提供解决方案" class="headerlink" title="提供解决方案"></a>提供解决方案</h6><ul><li>同时使用集显和独显时避免此现象</li><li>Firefox 浏览器 <em>【未尝试，由 Chrome 支持评论可得】</em></li></ul><h5 id="6-React-源码的新理解"><a href="#6-React-源码的新理解" class="headerlink" title="6. React 源码的新理解"></a>6. React 源码的新理解</h5><ul><li><a href="https://www.yuque.com/docs/share/a142f6d5-114a-4924-8d96-17edea329357">《Fiber &amp; Algebraic Effects》</a></li><li><a href="https://www.yuque.com/docs/share/8c167e39-1f5e-4c6d-8004-e57cf3851751">《postMessage &amp; Scheduler》</a></li></ul><p>推荐阅读，作者写的很棒，值得理解。</p><h5 id="7-转正述职答辩"><a href="#7-转正述职答辩" class="headerlink" title="7. 转正述职答辩"></a>7. 转正述职答辩</h5><p>在转正述职答辩，也真实的提到了未来想做的事情</p><ul><li>对公共组件库提供更多的支持和贡献，提升项目开发效率</li><li>学习持续集成，以资源优化、持续集成优化角度提升部门内部自动化效率</li><li>学习计算机可视化领域，以运用到公司项目，为公司创造更炫酷的可视化效果</li></ul><p>同时以结合自己负责的业务，对业务更多的思考，加快开发效率，减少开发成本，提炼冗余代码，慢慢为产品做贡献。</p><p>希望对，学习前端自动化工程体系、 CSS 也有更多的学习。</p><h2 id="x1f3c7-锻炼身体"><a href="#x1f3c7-锻炼身体" class="headerlink" title="&#x1f3c7; 锻炼身体"></a><span class="github-emoji" alias="horse_racing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8">&#x1f3c7;</span> 锻炼身体</h2><p>（好难坚持啊………………）加油！加油！！加油！！！</p>]]></content>
    
    
    <summary type="html">&lt;!-- no node --&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://zongzi531.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://zongzi531.com/tags/Blog/"/>
    
  </entry>
  
</feed>
